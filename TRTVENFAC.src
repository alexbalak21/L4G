#<AdxTL>@(#)8.0.0.0 $Revision$
# TRTVENFAC : TRAITEMENTS STANDARDS UTILISES DANS LES FACTURES DE VENTE               #
#######################################################################################
#                                                                                     #
# Subprog ALIFAC (TYPCLI,VALEUR)                                                      #
#      Alimentation des masques SIH à partir des clients                              #
#                                                                                     #
# Subprog ALISDHSIH()                                                                 #
#      Alimentation des masques SIH à partir de la première livraison                 #
#              Utilisé par le picking des livraisons à partir des factures            #
#                       et le bouton facture depuis les livraisons                    #
#                                                                                     #
# Subprog ALISDDSIH(NOL)                                                              #
#      Alimentation des masques SIH à partir d'une ligne de livraison                 #
#              Utilisé par le picking des livraisons à partir des factures            #
#                       et le bouton facture depuis les livraisons                    #
#                                                                                     #
# Subprog ALISOHSIH()                                                                 #
#      Alimentation des masques SIH à partir de la première commande                  #
#              Utilisé par le picking des commandes et contrats à partir des factures #
#                       et le bouton facture depuis les commandes                     #
#                                                                                     #
# Subprog ALISOQSIH(NOL,WQTAFAC,WQTAFACSTU)                                           #
#      Alimentation des masques SIH à partir d'une ligne de commande                  #
#              Utilisé par le picking des commandes et contrats à partir des factures #
#                       et le bouton facture depuis les commandes                     #
#                                                                                     #
# Subprog ALISQHSIH()                                                                 #
#      Alimentation des masques SIH à partir du premier devis                         #
#              Utilisé par le bouton facture depuis les devis                         #
#                                                                                     #
# Subprog ALISQDSIH()                                                                 #
#      Alimentation des masques SIH à partir d'une ligne de devis                     #
#              Utilisé par le bouton facture depuis les devis                         #
#                                                                                     #
# Subprog ALISIHSIH(WINVORI)                                                          #
#      Alimentation des masques SIH à partir de la première facture                   #
#              Utilisé par le picking des factures et retours à partir des avoirs     #
#                                                                                     #
# Subprog ALISIDSIH(WINVORI, NOL)                                                     #
#      Alimentation des masques SIH à partir d'une ligne de factures                  #
#              Utilisé par le picking des factures et retours à partir des avoirs     #
#                                                                                     #
# Subprog CNVREM (PARTNER,STRUCTURE,MAJREM,CUR,ANCCOEF,NVXCOEF)                       #
#       Conversion frais/remises d'une unité vers une autre                           #
#                                                                                     #
# Subprog ALISRHSIH(WBPCINV)                                                          #
#      Alimentation des masques SIH à partir du premier retour                        #
#              Utilisé par le picking des retours à partir des avoirs                 #
#                                                                                     #
# Subprog ALISRDSIH(NOL)                                                              #
#      Alimentation des masques SIH à partir d'une ligne de retour                    #
#              Utilisé par le picking des retours à partir des avoirs                 #
#                                                                                     #
# Subprog ALISIV(INVORI, WINVDAT)                                                     #
#      Alimentation de l'entête facture SIV                                           #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes         #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons        #
#                                                                                     #
# Subprog ALISIH (INVORI,WGTE, WRET)                                                  #
#      Alimentation de l'entête facture SIH                                           #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes         #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons        #
#                                                                                     #
# Subprog ALISID (INVORI, WLIN, WTRANSAC)                                             #
#      Alimentation du détail facture SID                                             #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes         #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons        #
#                                                                                     #
# Subprog MAJDETCDEO(WRET,WCPE_SOQSTA)                                                #
#      Maj suite à la création d'une ligne facture pr commande à facturation directe  #
#          du détail commande                                                         #
#          de l'en-cours                                                              #
#          de l'allocation                                                            #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes         #
#                                                                                     #
# Subprog MAJDETCDED()                                                                #
#      Maj suite à la création d'une ligne facture à partir d'une ligne de livraison  #
#          du facturé                                                                 #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons        #
#                                                                                     #
# Subprog ALICUMSOH(WORDBPCNOT, WORDBPCATI)                                           #
#      Cumul mnt commande pour la maj mvt client (en-cde)                             #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes         #
#                                                                                     #
# Subprog MAJSOH(WORDBPCNOT, WORDBPCATI)                                              #
#      Mise à jour de l'entête commande                                               #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes         #
#                                                                                     #
# Subprog ALICUMSDH(WNIVDLV)                                                          #
#     Cumul mnt livraison pour la maj mvt client (livré non facturé)                  #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons        #
#                                                                                     #
# Subprog MAJLIV(WINVORN)                                                             #
#     Mise à jour de l'entête livraison                                               #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons        #
#                                                                                     #
# Subprog CALC_COMREP()                                                               #
#      Calcul de la commission d'un représentant sur une ligne facture                #
#                                                                                     #
# Subprog FORMULE_REP(WFORMULE, WREPBAS)                                              #
#      Calcul de la base de commission d'un représentant à partir d'une formule       #
#                                                                                     #
# Subprog EVALAUTO(WTRANSAC,ZONE,VALEUR)                                              #
#      Evaluation de la pièce automatique                                             #
#                                                                                     #
# Subprog INIT_ACC (WTRANSAC,WABREV, WNOL, TPLAN,TACC)                                #
#      Recherche des comptes                                                          #
#                                                                                     #
# Subprog RECUOMACC (WPLAN,WACC,WUOM,STAT)                                            #
#      Recherche l'unité d'oeuvre associée à un compte                                #
#                                                                                     #
# Subprog RECUOMQTY (WPLAN,WACC,WSTU,WQTYSTU,WUOM,WQTYUOM,STAT)                       #
#      Recherche l'unité d'oeuvre associée à un compte                                #
#                et calcule la qté en unité d'oeuvre                                  #
#                                                                                     #
# $ CTRL_CHRONOLOGIE                                                                  #
#      Contrôle de la chronologie des no factures                                     #
#                                                                                     #
# $ CONTROLE_GTE                                                                      #
#      Contrôle sur le type de pièce                                                  #
#                                                                                     #
# $ CONTROLE_JOU                                                                      #
#      Contrôle sur le code journal                                                   #
#                                                                                     #
# $ REC_ARGNUM_TYPDOC                                                                 #
#      Localisation argentine : Recherche du type de document lié aux factures        #
#                                                                                     #
# $ INITAX                                                                            #
#      Pour l'Allemagne : Etiquette exploitée dans les pièces automatiques            #
#                                                                                     #
#######################################################################################
# Issue X3-98052 - 20180803 by LD : Cost price on line of Sales Order is rounding for currency conversion

#-------------------------------------------------------------------
# Alimentation des masques SIH à partir des clients
#-------------------------------------------------------------------
# Entrée TYPCLI : F = Client fac / C = Client livre
#-------------------------------------------------------------------
Subprog ALIFAC (TYPCLI,VALEUR)
Value   Char    TYPCLI
Value   Char    VALEUR

Local Char      SECTION
Local Integer   NBPOSTE, CDTSTA, OK
Local Integer   WTYPFAC

Case TYPCLI
 When "F" : Gosub CLIFAC
 When "C" : Gosub CLICDE
 When "L" : Gosub CLILIV
Endcase
End

#########################################################################
# Alimentation depuis le client facture
#########################################################################
$CLIFAC
Local Integer I
Local Char    CODCPT(GLONCAC)
Local Char    SVGBPCINV(GLONBPC), WBPCORD(GLONBPC)
SVGBPCINV = [M]BPCINV
# Utile pour l'init. des sections : La Section par défaut "SIH" utile [M:SIH0]BPCINV
[M]BPCINV = VALEUR
[M]BPINAM = [F:BPC]BPCNAM(0)
[M]CHGTYP = [F:BPC]CHGTYP
[M:SIH2]CURTYP = [M]CHGTYP
[M]PRITYP = [F:BPC]PRITYP
[M:SIH1]BPCORD = VALEUR           : # client cde = client fac
WBPCORD   = VALEUR
[M]BPCNAM = [F:BPC]BPCNAM(0)
[M]BPRPAY = [F:BPC]BPCPYR
[M]BPCGRU = [F:BPC]BPCGRU
[M]IME    = [F:BPC]IME

# Initialisation des escomptes et agios
Call INIT_ESCOMPTE(VALEUR, GSOCIETE, "C", [M]DEP) From CPTSUB
# 102423 : Belgium Early discounts
# Early discount rate determination
If find(GDEPMGTMOD, 1,5)
    Call ALIDISVAT (5, [M:SIH2]DEP, GBIDI1, [M:SIH2]DEPRAT) From SUBTDA
Endif
#  102423

# Initialisation du code condition de paiement
Call INIPTE ([F:BPC]BPCPYR, [F:BPC]BPCNUM, "C", [M]PTE) From TRTX3

# 87923 : Gestion des prélèvements SDD
If dim([M:SIH2]UMRNUM)>0
    If GSDDMGT=2 & find([M:SIH0]INVTYP, 1,2)
        [M:SIH2]SDDFLG=func TRTVENSDD.IS_PTE_SDD([M:SIH2]PTE,GSOCIETE)
    Else
        [M:SIH2]SDDFLG=1
    Endif
    If [M:SIH2]SDDFLG=1
        Raz [M:SIH2]UMRNUM
    Elsif [M:SIH2]UMRNUM <> ""
        # Si mandat renseigné, raz s'il n'est plus cohérent (si changement de tiers payeur)
        Call CTL_UMRNUM([M:SIH2]UMRNUM,GSOCIETE,[M:SIH1]BPRPAY) From INVSDDLIB
        If mkstat=2 Raz mkstat : Raz [M:SIH2]UMRNUM Endif
    Endif
    If [M:SIH2]SDDFLG=2 & [M:SIH2]UMRNUM = ""
        # Facture gérée avec SDD : Initialisation du n° mandat
        Call INIT_UMRNUM(GSOCIETE,[M:SIH1]BPRPAY,2,2,[M:SIH2]UMRNUM) From INVSDDLIB
    Endif
    Gosub GRIZO_UMRNUM From TRTVENSDD
Endif
# 87923

# Alimentation à partir du modèle d'édition
If [M]INVTYP=2
   Call ALI_PRTMOD("SIH0",6) From TRTX3
   If [M:SIH0]COPNBE=0 [M:SIH0]COPNBE=1 Endif
Else
   Call ALI_PRTMOD("SIH0",5) From TRTX3
   If [M:SIH0]COPNBR=0 [M:SIH0]COPNBR=1 Endif
Endif

# Si client facture du client saisi = client saisi, on récupère l'adresse de facturation
If [F:BPC]BPCINV = VALEUR [M]BPAINV = [F:BPC]BPAINV Endif
#--CPO 87261 BPAINV non alimenté si cl fact du cl saisi sont différents
#--Déplacé ici avant le chargement de [m:adb3]
# Si client saisi n'est pas le client facture, on récupère l'adresse par défaut
If [F:BPC]BPCINV <> VALEUR [M]BPAINV = [F:BPC]BPAADD Endif
#--/CPO

If dim([M:ADB3]BPAADD) > 0
    If !GIMPORT & [F:BPC]BPCTYP<>2 Raz [M:ADB3] Endif
#   Alimentation code adresse client facture dans [M:ADB3]
#    If !GIMPORT [M:ADB3]BPAADD = [M]BPAINV Endif                         : # Bug 67868
    If !GIMPORT | [M:ADB3]BPAADD=""  [M:ADB3]BPAADD = [M]BPAINV Endif     : # Bug 67868
    If !GIMPORT & dim([M:ADB2]BPAADD) > 0 & [F:BPC]BPCTYP<>2 Raz [M:ADB2] : Endif
Endif
If dim([M]BPRFCT) > 0 [M]BPRFCT = [F:BPC]FCTNUM : Endif

# JPGA : 16/06/2008 - Recherche Régime taxe s'il est renseigné dans le tiers société
#Call INIT_REGIME(VALEUR, GSOCIETE, "C", [M]VACBPR)     From CPTSUB : # Déplacé à la lecture du client livré

[M]LAN = GLANGUE
If [M]CUR = ""
   [M]CUR = GLOCALDEV
Endif

# Initialisation du collectif
Call INIT_COMPTE([F:BPC]BPCNUM,GSOCIETE,"C",CODCPT) From CPTSUB
Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
If [F:CAC]ACC(0)<>""
 Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
 If !fstat & [F:GAC]SAC=2
  [M]BPRSAC = [F:GAC]ACCSHO
 Endif
Endif

Raz [M]SIHTEX1, [M]SIHTEX2
If GSALTEXINV=1
   [M]SIHTEX1 = [F:BPC]INVTEX
Elsif GSALTEXINV=2
   [M]SIHTEX2 = [F:BPC]INVTEX
Endif

# Le client facturé a t'il un no d'identification CEE
GETATCEE=2
Read [BPR]BPR0 = VALEUR
If fstat = 0
   [M]LAN = [F:BPR]LAN
   # end X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)
   If dim([M]CRN)>0
      If [F:BPC]BPCTYP=2
        If [M]CRN = "": [M]CRN = [F:BPR]CRN: Endif
      Else
        [M]CRN = [F:BPR]CRN
      Endif
   Endif
   # end X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)
#   If dim([M:ADB3]EECNUM)>0 & [M:ADB3]EECNUM="" [M:ADB3]EECNUM=[F:BPR]EECNUM Endif
Endif
If fstat | [F:BPR]EECNUM="" GETATCEE=1 Endif

#--CPO 87261 BPAINV non alimenté si cl fact du cl saisi sont différents
#--Déplacé plus haut avant le chargement de [m:adb3]
# Si client saisi n'est pas le client facture, on récupère l'adresse par défaut
#If [F:BPC]BPCINV <> VALEUR [M]BPAINV = [F:BPC]BPAADD Endif
#--/CPO
If dim([M:ADB3]CNTNAM)>0 & [M:ADB3]CNTNAM=""
    Call RECH_CNTNAM(VALEUR, [M]BPAINV, [M:ADB3]CNTNAM) From TRTVENDIV
Endif
[M:SIH0]CUR = [F:BPC]CUR
[M:SIH2]CUR = [M:SIH0]CUR

# Calcul en-cours
#Call SDCDTSTA("",[M]BPCORD,[M]CHGTYP,[M]CUR,datesyst,0,0,CDTSTA,
#&             [M]OST,[M]OSTAUZ) From TRTVENCDT
## Client bloqué          : Avertissement si  facture et avoir
## Dépassement d'en-cours : Avertissement ssi avoir
#If (find([M:SIH0]INVTYP, 1,2) & CDTSTA=2) | ([M:SIH0]INVTYP=2 & CDTSTA=3)
##If [M:SIH0]INVTYP=2 & (CDTSTA=2 | CDTSTA=3)
#    Local Integer OK
#    If CDTSTA = 2 GMESSAGE = mess(151,199,1) Endif
#    If CDTSTA = 3 GMESSAGE = mess(29,192,1) Endif
#    OK=2: Call AVERTIR(GMESSAGE,OK) From GESECRAN
#    Raz GMESSAGE
#    If OK=1
#       [M]BPCINV = SVGBPCINV
#       mkstat=2 : Return
#    Endif
#Endif
# init. du tableau des éléments de facturation
NBPOSTE = dim([M:SIH2]INVDTA)
Raz [M]INVDTAAMT

# Determination type facture : Directe, Cde, Livraison
WTYPFAC = 8
#If [M]SIHORI = 1    WTYPFAC = 8
#Elsif [M]SIHORI = 2 WTYPFAC = 7
# 107888 : Scheduled invoices : (LD:11/05/16)
#If [M]SIHORI = 2 WTYPFAC = 7
#Elsif [M]SIHORI = 3 WTYPFAC = 6 : Endif
Case [M]SIHORI
    When 2        : # Orders
        WTYPFAC=7
    When 3        : # Deliveries
        WTYPFAC=6
    When 10       : # Schedule invoices
        # For the moment, we manage only scheduled invoices from order
        # This will have to be changed when we'll manage other scheduled invoices
        If [M]SIHORITYP = 10 WTYPFAC = 7 Endif
    When Default  : # Default value Direct invoice
        WTYPFAC = 8
Endcase
# 107888 : Scheduled invoices : (LD:11/05/16)
Call SAISFOOT (WTYPFAC,"SIH2",NBPOSTE,[M]CHGTYP,[M]CUR,
&              [M]CUR,"OUI") From SUBSFIT
[M]NBFAC = NBPOSTE

#----- Chargement zones devises et cours -----#
Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS

# Récupération du format de saisie des frais/remises
#Call FMTREM("SIH4",[M]CUR) From TRTPRICE

# alimentation des codes statistiques
If dim([M]TSCCOD) <> -1
   For I = 1 To dim([M]TSCCOD)
      [M]TSCCOD(I-1) = [F:BPC]TSCCOD(I-1)
   Next I
Endif
# alimentation du 1er réprésentant
If dim([M]REP) > 0
   [M]REP(0) = [F:BPC]REP(0)
Endif
# alimentation du 2eme réprésentant
If dim([M]REP) > 1
   If [M]REP(0) <> ""
      [M]REP(1) = [F:BPC]REP(1)
   Endif
Endif
# Initialisation sections analytiques une fois tout chargé (la devise)
If dim([M:SIH2]NBAXE)>0
    If [M:SIH2]NBAXE>0
        For I=1 To [M:SIH2]NBAXE Raz [M:SIH2]CCE(I-1) : Next
    Endif
    Call INIT_CCEH("SIH2","NBAXE","SIH") From TRTX3CPT
Endif

Gosub CLICDE
If mkstat=2 [M]BPCINV = SVGBPCINV : Return Endif

Gosub NEW_REGIME  From TRTVENFACC

Return

#########################################################################
# Alimentation depuis le client commande
#########################################################################
$CLICDE

WBPCORD=VALEUR

# Calcul en-cours
Call SDCDTSTA("",VALEUR,[M]CHGTYP,0,[M]CUR,[M]INVDAT,0,0,CDTSTA,
&             [M]OST,[M]OSTAUZ) From TRTVENCDT
# Client bloqué          : Avertissement si  facture et avoir
# Dépassement d'en-cours : Avertissement ssi avoir
# (Si saisie d'une facture directe avec mvt de stock et clt bloqué, la création sera impossible (msg en VERIF_CRE)
# On ne peut pas bloquer à ce niveau car on ne sait encore ce qui va être saisi (facture directe ou de cde ou de liv))
If (find([M:SIH0]INVTYP, 1,2) & CDTSTA=2) | ([M:SIH0]INVTYP=2 & CDTSTA=3)
    Local Integer OK
    If CDTSTA = 2 GMESSAGE = mess(151,199,1) Endif
    If CDTSTA = 3 GMESSAGE = mess(29,192,1) Endif
    OK=2: Call AVERTIR(GMESSAGE,OK) From GESECRAN
    Raz GMESSAGE
    If OK=1 mkstat=2 : Return Endif
Endif
# Alimentation de la raison sociale
If VALEUR=[M:SIH0]BPCINV
    [M]BPCNAM = [M]BPINAM
Else
    [M]BPCNAM = [F:BPC]BPCNAM
Endif
# lecture client livre pour alimentation
Filter [BPD] Where [BPD]BPCNUM = VALEUR & ENAFLG=2
Read [BPD]BPD0 = VALEUR;[F:BPC]BPDADD
If fstat = 0
    [M]BPAADD = [F:BPD]BPAADD
    Gosub CLILIV
  Else
    Read [BPD]BPD0 First
    If fstat = 0
      [M]BPAADD = [F:BPD]BPAADD
      Gosub CLILIV
    Endif
Endif
Filter [BPD]

If dim([M:SIH0]BPIEECNUM)>0
#    Call INIEECNUM ([M:SIH1]BPCORD,[M:SIH1]BPAADD,VALEUR,[M:SIH0]BPIEECNUM) From TRTVENDIV
    Call INIEECNUM (VALEUR,[M:SIH1]BPAADD, [M:SIH0]BPCINV,[M:SIH0]BPIEECNUM,[M:SIH0]EECNUMCRY) From TRTVENDIV
Endif

Return
#########################################################################
# Alimentation depuis le client livré
#########################################################################
$CLILIV

#If TYPCLI = "F"
#   [M]BPDNAM = [F:BPD]BPDNAM(0)
#   WBPCINV   = VALEUR
#Else
#   WBPCINV   = [M:SIH0]BPCINV
#Endif

If find(TYPCLI,"F","C") [M]BPDNAM = [F:BPD]BPDNAM(0) Endif
If TYPCLI="L" WBPCORD = [M:SIH1]BPCORD Endif

If [M:SIH4]NBLIG = 0 & [F:BPD]STOFCY <> ""
    Read [FCY]FCY0=[F:BPD]STOFCY
    If !fstat & [F:FCY]LEGCPY=GSOCIETE
        [M:SIH1]STOFCY = [F:BPD]STOFCY
    Endif
Endif
# Alimentation code adresse (client livré) dans [M:ADB2] pour saisie adresse libre
If dim([M:ADB2]BPAADD) > 0
    [M:ADB2]BPAADD    = [F:BPD]BPAADD
    If [M:ADB2]CNTNAM=""
#        Call RECH_CNTNAM(WBPCINV, [F:BPD]BPAADD, [M:ADB2]CNTNAM) From TRTVENDIV
        Call RECH_CNTNAM(WBPCORD, [F:BPD]BPAADD, [M:ADB2]CNTNAM) From TRTVENDIV
    Endif
Endif
#  Alimentation des représentants s'ils n'ont pas été alimentés par le client commande
#If [F:BPC]BPCNUM <> WBPCINV
#    Read [BPC]BPC0 = WBPCINV
If [F:BPC]BPCNUM <> WBPCORD
    Read [BPC]BPC0 = WBPCORD
    If fstat <> 0 Raz [F:BPC] : Endif
Endif
#  Alimentation du 1er représentant
#If dim([M:SIH1]REP) > 0 & [M:SIH1]REP(0) = ""
If dim([M:SIH1]REP) > 0 & [F:BPC]REP(0) = ""
   [M:SIH1]REP(0) = [F:BPD]REP(0)
Endif
#  Alimentation du 2eme représentant
If dim([M:SIH1]REP) > 1
#   If [M:SIH1]REP(0) <> "" & [M:SIH1]REP(1) = ""
   If [M:SIH1]REP(0) <> "" & [F:BPC]REP(1) = ""
      [M:SIH1]REP(1) = [F:BPD]REP(1)
   Endif
   # 81661 : Le second représentant ne doit être alimenté si le 1er réprésentant est alimenté
   If [M:SIH1]REP(0)="" [M:SIH1]REP(1) = "" Endif
Endif

#  Alimentation régime de taxe du client livré
# JPGA : 16/06/2008 - Recherche Régime taxe s'il est renseigné dans le tiers société
#--CPO 83046 Ici VALEUR contient le code adresse du client livré
#Call INIT_REGIME(VALEUR, GSOCIETE, "C", [M:SIH1]VACBPR)     From CPTSUB
Call INIT_REGIME(WBPCORD, GSOCIETE, "C", [M:SIH1]VACBPR)     From CPTSUB
#--/CPO
If [F:BPD]VACBPR<>"" [M:SIH1]VACBPR = [F:BPD]VACBPR Endif
#LTA.sn
# If GLOCUSATAX and func AFNC.ACTIV("LTA")   # 106867.o
If func AFNC.ACTIV("LTA") & [F:CPY]SSTTAXACT = 2   # 106867.n
  If dim([M:SIH1]SSTENTCOD)>0
    [M:SIH1]SSTENTCOD=[F:BPD]SSTENTCOD
    Gosub SHOW_HIDE_ENTCOD From TRTADRLIB
  Endif
  If [M]BPAADD <> ""
    Read [F:BPA]BPA0=1;VALEUR;[M]BPAADD
    If fstat = 0 and [F:BPA]ADRVAL <> 2 and func TRTADRLIB.CHKADR_CRY([F:BPA]CRY)
      If func TRTADRLIB.CHKADR_MANDATORY()
        GMESSAGE=mess(366,192,1) # Address has not been validated
        mkstat = 2
        Return
      Else
        Call MESSAGE(mess(366,192,1)) From GESECRAN  # Address has not been validated
      Endif
    Endif
  Endif
Endif
#LTA.en
If dim([M:SIH0]EECLOC)>0 [M:SIH0]EECLOC=[F:BPD]EECLOC Endif
If dim([M:SIH0]EECICT)>0 [M:SIH0]EECICT=[F:BPD]EECICT Endif
If dim([M:SIH1]EECICT)>0 [M:SIH1]EECICT=[F:BPD]EECICT Endif   :#-- CPO 65018
If dim([M:SIH0]ICTCTY)>0 [M:SIH0]ICTCTY=[F:BPD]ICTCTY Endif
If dim([M:SIH1]ICTCTY)>0 [M:SIH1]ICTCTY=[F:BPD]ICTCTY Endif   :#-- CPO 65018
If dim([M:SIH0]FFWNUM)>0 [M:SIH0]FFWNUM=[F:BPD]FFWNUM Endif
If dim([M:SIH0]FFWADD)>0 [M:SIH0]FFWADD=[F:BPD]FFWADD Endif
If TYPCLI = "L" & dim([M:SIH0]BPIEECNUM)>0
#    Call INIEECNUM ([M:SIH1]BPCORD,VALEUR,[M:SIH0]BPCINV,[M:SIH0]BPIEECNUM) From TRTVENDIV
    Call INIEECNUM (WBPCORD,VALEUR,[M:SIH0]BPCINV,[M:SIH0]BPIEECNUM,[M:SIH0]EECNUMCRY) From TRTVENDIV
Endif

# Lecture table modes de livraison
If clalev ([F:TMD]) <= 0 Local File TABMODELIV [TMD] Endif
If [F:BPD]MDL<>""
   Read [TMD]TMD0=[F:BPD]MDL
   If fstat=0 & dim([M:SIH0]EECTRN)>0
      [M:SIH0]EECTRN=[F:TMD]EECTRN
   Endif
Endif
Close Local File [TMD]

Return

#########################################################################
Subprog RAZ_TRANSPORT_FIELDS

  # FGR 17/07/2014 : X3SUIVI91606
  Raz [M:SIH1]LICPLATE
  Raz [M:SIH1]TRLLICPLATE
  Raz [M:SIH1]DPEDAT
  Raz [M:SIH1]ARVDAT
  Raz [M:SIH1]ETD
  Raz [M:SIH1]ETA
End

#########################################################################
#------------------------------------------------------------
# Alimentation des masques SIH à partir de la 1ère livraison
#------------------------------------------------------------
Subprog ALISDHSIH ()

Local  Integer  I, NBPOSTE
Local  Char     SECTION, WSVGTRSFAM(GLONADI), WSVGENTCOD(GLONGAU) : # 99654
Local  Char     CODCPT(GLONCAC)
Local Char      SMESSAGE(80)  # FGR 14/12/2011 : X3SUIVI71065

WSVGTRSFAM = [M:SIH1]TRSFAM
WSVGENTCOD = [M:SIH0]ENTCOD

nolign=1

Local Char EXCLI : EXCLI=[M:SIH0]BPCINV
Local Char EXCUR : EXCUR=[M:SIH0]CUR
[M:SIH0] = [F:SDH]
#---CPO 62810 - Pb découvert lors du ttt de cette fiche
#--Le transclasse va initialiser les champs DSPTOTQTY/DSPTOTWEI/DSPTOTVOL avec les valeurs inscrite dans le SQH
#--On doit les Raz car ces champs sont mis à jour dans les ss-pros appelés par les avant et après lignes
Raz [M:SIH0]DSPTOTQTY ,[M:SIH0]DSPTOTVOL, [M:SIH0]DSPTOTWEI
#---fin 62810
If EXCLI<>[M:SIH0]BPCINV or EXCUR<>[M:SIH0]CUR
    Call NEW_SFIT ("M","SIH2",[M:SIH0]CUR,[M:SIH0]BPCINV,[F:SDH]BPCORD,[M:SIH0]INVDAT) From SUBSFIT
Endif
[M:SIH1] = [F:SDH]
[M:SIH2] = [F:SDH]

Call RAZ_TRANSPORT_FIELDS  # FGR 17/07/2014 : X3SUIVI91606

# FGR 02/12/2011 : X3SUIVI71065 (début)
If func TRTPJT.IS_PJT_AVAILABLE([M:SIH1]PJT, "[M:SIH1]PJT", SMESSAGE) = G_NON Then
  Call PJT_ADD_MSG([M:SIH1]PJT, SMESSAGE) From TRTPJT
  Raz [M:SIH1]PJT
Endif
# FGR 02/12/2011 : X3SUIVI71065 (fin)

GBPCNUM  = [F:SDH]BPCORD

[M:SIH1]TRSFAM = WSVGTRSFAM
[M:SIH0]ENTCOD = WSVGENTCOD

#----------------------------------------------------#
# Chargement libellés et formats colonnes tarif      #
#----------------------------------------------------#
#If GACTMUL=2
# Alimentation concernant les colonnes frais/remises en fonction de la structure tarif de la société
Call ALICOLREM (1,5,GFLAG,"SIH4",[M:SIH2]CUR,0,[M:SIH0]PLISTC) From TRTPRICE
#Endif

For I= 0 To dim ([M:SIH2]INVDTAAMT)-1
    Raz [M:SIH2]INVDTAAMT(I)
    Raz [M:SIH2]INVDTA(I)
    Raz [M:SIH2]INVDTATYP(I)
Next

# 102423 : Belgium Early discounts
# Early discount rate determination
If find(GDEPMGTMOD, 1,5)
    Call ALIDISVAT (5, [M:SIH2]DEP, GBIDI1, [M:SIH2]DEPRAT) From SUBTDA
Endif
#  102423

#[M:SIH0]COPNBR    = [F:BPC]COPNBR

If [F:SDH]SOHNUM <> ""
    If [F:SDH]SOHNUM <> [F:SOH]SOHNUM
        Read [SOH]SOH0 = [F:SDH]SOHNUM
        If fstat Raz [F:SOH] Endif
    Endif
    [M:SIH0]INVREF = [F:SOH]CUSORDREF
Endif

# Alimentation adresse facture
Raz [M:SIH0]BPAINV
# Si client cde <> client en ligne (client fac de la facture)
If GBPCNUM<>[F:BPC]BPCNUM
   Read [BPC]BPC0=GBPCNUM
   # Si client fac de la facture = client fac du client cde de la facture
   If !fstat
      If [M:SIH0]BPCINV=[F:BPC]BPCINV
         [M:SIH0]BPAINV = [F:BPC]BPAINV
      Endif
   Endif
Endif

# Repositionnement sur client facture de la facture
If [F:BPC]BPCNUM<>[M:SIH0]BPCINV
   Read [BPC]BPC0=[M:SIH0]BPCINV
Endif
Call ALI_PRTMOD("SIH0",5) From TRTX3
If [M:SIH0]COPNBR=0 [M:SIH0]COPNBR=1 Endif

If [M:SIH0]BPAINV=""
   # Si client fac de la facture = client fac du client fac de la facture
   If [M:SIH0]BPCINV=[F:BPC]BPCINV
      [M:SIH0]BPAINV    = [F:BPC]BPAINV
   Else
      [M:SIH0]BPAINV    = [F:BPC]BPAADD
   Endif
Endif

[M:SIH1]SIHORI    = 3
[M:SIH1]SIHORINUM = [F:SDH]SDHNUM
[M:SIH1]SIHORIDAT = [F:SDH]DLVDAT
[M:SIH1]BPRPAY    = [F:SDH]BPCPYR
If [M:SIH0]INVTYP<>5
    [M:SIH1]STOMVTFLG = 2
Else
    [M:SIH1]STOMVTFLG = 1
Endif
[M:SIH1]INVSTA   = 1 : [M:SIH1]STARPT = 1

If [F:BPC]DUDCLC = 2
    [M:SIH2]STRDUDDAT = [F:SDH]DLVDAT
Else
    [M:SIH2]STRDUDDAT = [M:SIH0]INVDAT
Endif

# Bug 70183 et Dde 51781 : Init. de la date d'application de la taxe sur une facture de livraison
# Ssi la date d'application est saisissable dans l'écran facture et nulle
If dim([M:SIH2]VATDAT)>0 & [M:SIH2]VATDAT=[0/0/0]
    If varmode([M:SIH2]VATDAT)= 0
        [M:SIH2]VATDAT=[F:SDH]DLVDAT
    Endif
Endif

# ---   Suivi texte facture du client sur entete facture
If GSALTEXINV = 1 & [F:BPC]INVTEX <> ""
   [M:SIH0]SIHTEX1 = [F:BPC]INVTEX
Elsif GSALTEXINV = 2 & [F:BPC]INVTEX <> ""
# ---   Suivi texte facture du client sur pied facture
   [M:SIH0]SIHTEX2 = [F:BPC]INVTEX
Endif

# X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)
Read [F:BPR]BPR0=[M:SIH0]BPCINV
If fstat:  Raz [F:BPR]: Endif
[M:SIH0]CRN=[F:BPR]CRN
# End X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)

If dim([M:SIH2]BPRFCT) > 0 [M:SIH2]BPRFCT = [F:BPC]FCTNUM : Endif
#[M:SIH2]RATCUR    = [F:SDH]CHGRAT
[M:SIH2]CURTYP    = [F:SDH]CHGTYP

# Initialisation du collectif
Call INIT_COMPTE([F:BPC]BPCNUM,GSOCIETE,"C",CODCPT) From CPTSUB
Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
If [F:CAC]ACC(0)<>""
   Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
   If !fstat & [F:GAC]SAC=2
       [M:SIH2]BPRSAC = [F:GAC]ACCSHO
   Else
       [M:SIH2]BPRSAC = ""
   Endif
Endif

## --> Chargement du cours devise et du cours reporting
#Call COURSITE([M]CUR,GFCY,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATCUR,I)   From TRTDEV
#Call COURDEV([M]CUR,GSYSCUR,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATRPT,I) From TRTDIV
#If dim([M:SIH2]LABEL)>0
#  Call SET_FLGDEV([M]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#  Gosub CHARG_ZONES_DEV From SUBSIHB
#  Gosub INIT_COURS      From SUBSIHB
#Endif
#----- Chargement zones devises et cours -----#
Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS

# Init. du tableau des éléments de facturation
NBPOSTE = dim([M:SIH2]INVDTA)
Call STRUFOOT (6,"SIH2",NBPOSTE,[M:SIH2]CURTYP,[F:SDH]CUR,[M:SIH2]CUR,"OUI") From SUBSFIT
# Call SAISFOOT2(6,"SIH2",NBPOSTE,[M:SIH2]CURTYP,[F:SDH]CUR,[M:SIH2]CUR,"OUI") From TRTVENELT
[M:SIH2]NBFAC = NBPOSTE

#---------------------------#
# Alimentation des adresses #
#---------------------------#
[M:ADB2]ADBBPR       = [F:SDH]BPCORD
[M:ADB2]BPAADD       = [F:SDH]BPAADD
[M:ADB2]BPRNAM(0)    = [F:SDH]BPDNAM(0)
[M:ADB2]BPRNAM(1)    = [F:SDH]BPDNAM(1)
[M:ADB2]BPAADDLIG(0) = [F:SDH]BPDADDLIG(0)
[M:ADB2]BPAADDLIG(1) = [F:SDH]BPDADDLIG(1)
[M:ADB2]BPAADDLIG(2) = [F:SDH]BPDADDLIG(2)
[M:ADB2]POSCOD       = [F:SDH]BPDPOSCOD
[M:ADB2]CTY          = [F:SDH]BPDCTY
[M:ADB2]SAT          = [F:SDH]BPDSAT
[M:ADB2]CRY          = [F:SDH]BPDCRY
[M:ADB2]CRYNAM       = [F:SDH]BPDCRYNAM
[M:ADB2]CNTNAM       = [F:SDH]CNDNAM
#If [F:SDH]BPCORD=[F:SDH]BPCINV & dim([M:ADB2]EECNUM)>0
#   [M:ADB2]EECNUM = [F:SDH]BPIEECNUM
#Endif

If [M:ADB2]BPRNAM <> "" | [M:ADB2]BPAADDLIG <> "" |
&  [M:ADB2]POSCOD <> "" | [M:ADB2]CTY <> "" |
&  [M:ADB2]SAT    <> "" |
&  [M:ADB2]CRY    <> "" | [M:ADB2]CRYNAM <> ""
    [M:ADB2]ADBFLG = 3
Else
    [M:ADB2]ADBFLG = 0
Endif
If func AFNC.ACTIV("LTA") and dim([M:ADB2]ADRVAL) > 0 #LTA.sn
  [M:ADB2]ADRVAL = [F:SDH]ADRVAL
Endif                                                 #LTA.en

[M:ADB3]ADBBPR       = [F:SDH]BPCINV
[M:ADB3]BPAADD       = [F:SDH]BPAINV
[M:ADB3]BPRNAM(0)    = [F:SDH]BPINAM(0)
[M:ADB3]BPRNAM(1)    = [F:SDH]BPINAM(1)
[M:ADB3]BPAADDLIG(0) = [F:SDH]BPIADDLIG(0)
[M:ADB3]BPAADDLIG(1) = [F:SDH]BPIADDLIG(1)
[M:ADB3]BPAADDLIG(2) = [F:SDH]BPIADDLIG(2)
[M:ADB3]POSCOD       = [F:SDH]BPIPOSCOD
[M:ADB3]CTY          = [F:SDH]BPICTY
[M:ADB3]SAT          = [F:SDH]BPISAT
[M:ADB3]CRY          = [F:SDH]BPICRY
[M:ADB3]CRYNAM       = [F:SDH]BPICRYNAM
[M:ADB3]CNTNAM       = [F:SDH]CNINAM
#If dim([M:ADB3]EECNUM)>0 [M:ADB3]EECNUM = [F:SDH]BPIEECNUM Endif

If [M:ADB3]BPRNAM <> "" | [M:ADB3]BPAADDLIG <> "" |
&  [M:ADB3]POSCOD <> "" | [M:ADB3]CTY <> "" |
&  [M:ADB3]SAT    <> "" |
&  [M:ADB3]CRY    <> "" | [M:ADB3]CRYNAM <> ""
    [M:ADB3]ADBFLG = 3
Else
    [M:ADB3]ADBFLG = 0
Endif

# ACA - Adresse règlement - Init à l'adresse par défaut du tiers
# Mais si client divers, on prend l'adresse de facturation - CH 07/01/2009
# CH 13/01/2009 : On considère que si le client est divers, le tiers payeur est divers,
# et inversement, si le client est déterminé, le tiers payeur l'est également
Local Char BPA(GLONBPA)
If [F:BPC]BPCTYP=2
    [M:ADI4]=[M:ADB3]
Else
    If [M:SIH1]BPRPAY=[F:BPC]BPCPYR
      BPA=[F:BPC]BPAPYR
    Else
      Read [BPR]BPR0=[M:SIH1]BPRPAY
      If fstat Raz [F:BPR] Endif
      BPA=[F:BPR]BPAADD
    Endif
    Read [BPA]BPA0=1;[M:SIH1]BPRPAY;BPA
    If fstat : Raz [F:BPA] : Endif
    [M:ADI4]BPAADD       = [F:BPA]BPAADD
    [M:ADI4]ADBBPR       = [F:BPA]BPANUM
    [M:ADI4]BPRNAM(0)    = [F:BPR]BPRNAM(0)
    [M:ADI4]BPRNAM(1)    = [F:BPR]BPRNAM(1)
    [M:ADI4]BPAADDLIG(0) = [F:BPA]BPAADDLIG(0)
    [M:ADI4]BPAADDLIG(1) = [F:BPA]BPAADDLIG(1)
    [M:ADI4]BPAADDLIG(2) = [F:BPA]BPAADDLIG(2)
    [M:ADI4]POSCOD       = [F:BPA]POSCOD
    [M:ADI4]CTY          = [F:BPA]CTY
    [M:ADI4]SAT          = [F:BPA]SAT
    [M:ADI4]CRY          = [F:BPA]CRY
    [M:ADI4]CRYNAM       = [F:BPA]CRYNAM
    [M:ADI4]CNTNAM       = [F:BPR]CNTNAM
Endif

# Chargement des sections analytiques entête facture à partir de l'entête livraison
Call CHARG_CCEH("SIH2","NBAXE","SDH") From TRTX3CPT
# On complète les sections vides
If dim([M:SIH2]NBAXE)>0
  [M:SIH2]NBAXE=GNBDIE
  For I=1 To GNBDIE
    If [M:SIH2]CCE(I-1)=""
      [M:SIH2]DIE(I-1)=GDIE(I)
      Call INISEC(SECTION,"SIH",GDIE(I)) From SUBCDE
      [M:SIH2]CCE(I-1)=SECTION
    Endif
  Next I
Endif

End

#########################################################################

#----------------------------------------------------------------
# Alimentation des masques SIH à partir d'une ligne de livraison
#----------------------------------------------------------------
Subprog ALISDDSIH (NOL)
Value Integer NOL

   # -------------------------------------
   # FGR 22/11/2013 : X3SUIVI94641 (début)
   If NOL = 0 Then
     If [F:SDD]SOHNUM <> "" Then
       Read [SOH]SOH0=[F:SDD]SOHNUM
       If fstat Then
         Raz [F:SOH]
       Endif
       If [F:SOH]CUSORDREF <> "" Then
         [M:SIH0]INVREF = [F:SOH]CUSORDREF
       Endif
     Endif
   Endif
   # FGR 22/11/2013 : X3SUIVI94641 (fin)
   # -------------------------------------

[M:SIH4] = [F:SDD]

# --------------------------------------
# FGR 23/04/2015 : X3SUIVI105605 (début)
  If dim([M:SIH4]ECCVALMAJ) >= 0 Then
    Raz [M:SIH4]ECCVALMAJ(NOL)
  Endif
  If dim([M:SIH4]ECCVALMIN) >= 0 Then
    Raz [M:SIH4]ECCVALMIN(NOL)
  Endif
# FGR 23/04/2015 : X3SUIVI105605 (fin)
# --------------------------------------

If [M]BETFCY=2 & [M]ORIFCY="" [M]ORIFCY=[F:SDH]ORIFCY : Endif

If dim([M:SIH4]LOT)>0 Raz [M:SIH4]LOT(NOL) Endif
If dim([M:SIH4]LOC)>0 Raz [M:SIH4]LOC(NOL) Endif
If dim([M:SIH4]STA)>0 Raz [M:SIH4]STA(NOL) Endif

# Bug 46937
# Si livraisons de prêt, on facture ce qui n'est pas retourné
# Si livraisons normales et pas de facturation qté retournée (GDLVRTNCNO=1), on ne facture que ce qui n'est pas retourné
# Si livraisons normales et facturation qté retournée (GDLVRTNCNO=2), on facture tout
# Dde 71811 : Si livraisons pour sous-traitance, on facture ce qui n'est pas retourné (Lors d'une proforma)
# Dde 71811 : Si livraisons inter-site, on facture ce qui n'est pas retourné (Lors d'une proforma)
If [F:SDH]LND=2 | (GDLVRTNCNO=1 & (dim([M:SDH0]SCO)<0 | [M:SDH0]SCO=1) & ([M]BETFCY=1 | [M]BETCPY=2)) | (dim([M:SDH0]SCO)>0 & [M:SDH0]SCO=2) |
&  ([M]BETFCY=2 & [M]BETCPY<=1)
    # Pas de création d'avoir pour le retour : Qté facturée=Qté livrée-Qté retournée
    [M:SIH4]QTY(NOL)     = [F:SDD]QTY    - [F:SDD]RTNQTY
    [M:SIH4]QTYSTU(NOL)  = [F:SDD]QTYSTU - [F:SDD]RTNQTYSTU
Else
    # Création d'un avoir pour le retour : Qté facturée=Qté livrée
    [M:SIH4]QTY(NOL)     = [F:SDD]QTY
    [M:SIH4]QTYSTU(NOL)  = [F:SDD]QTYSTU
Endif

[M:SIH4]ALLTYP(NOL)  = 2
[M:SIH4]DSTOFCY(NOL) = [F:SDD]STOFCY

[M:SIH4]DPJT(NOL)    = [F:SDD]PJT  # FGR 24/11/2011 X3SUIVI71065

[M:SIH4]VACITM1(NOL) = [F:SDD]VACITM(0)
[M:SIH4]VACITM2(NOL) = [F:SDD]VACITM(1)
[M:SIH4]VACITM3(NOL) = [F:SDD]VACITM(2)
[M:SIH4]VAT1(NOL)    = [F:SDD]VAT(0)
[M:SIH4]VAT2(NOL)    = [F:SDD]VAT(1)
[M:SIH4]VAT3(NOL)    = [F:SDD]VAT(2)

If dim([M:SIH4]TSICOD1(NOL))>0 [M:SIH4]TSICOD1(NOL)=[F:SDD]TSICOD(0) Endif
If dim([M:SIH4]TSICOD2(NOL))>0 [M:SIH4]TSICOD2(NOL)=[F:SDD]TSICOD(1) Endif
If dim([M:SIH4]TSICOD3(NOL))>0 [M:SIH4]TSICOD3(NOL)=[F:SDD]TSICOD(2) Endif
If dim([M:SIH4]TSICOD4(NOL))>0 [M:SIH4]TSICOD4(NOL)=[F:SDD]TSICOD(3) Endif
If dim([M:SIH4]TSICOD5(NOL))>0 [M:SIH4]TSICOD5(NOL)=[F:SDD]TSICOD(4) Endif

[M:SIH4]XSERMGTCOD(NOL) = [F:ITM]SERMGTCOD

# ---   Suivi texte détail liv sur fac : Duplication
Local Integer WRET
If find (GSALTEXLIN,4,5)
    [M:SIH4]SIDTEX(NOL) = [F:SDD]SDDTEX
    If left$([F:SDD]SDDTEX,3)="SDD"
       Call DUP_CLOB("SID",[M:SIH4]SIDTEX(NOL),WRET) From TRTX3TEX
       If WRET<1 Raz [M:SIH4]SIDTEX(NOL) Endif
    Endif
Endif
# ---   Suivi texte sur fac : Recherche texte article et duplication
If find (GSALTEXLIN,3)
   [M:SIH4]SIDTEX(NOL) = [F:ITU]ITSTEX
   If [M:SIH4]SIDTEX(NOL)=""
      [M:SIH4]SIDTEX(NOL) = [F:ITS]ITSTEX
   Endif
Endif

Raz [M:SIH4]SIDLIN(NOL), [M:SIH4]ORILIN(NOL)

# CPO 31/07/2008 Pour la DEB
If dim([M:SIH4]EECFLOPHY)>0
    [M:SIH4]EECFLOPHY(NOL) = func INIT_EECFLOPHY([F:ITM]EECGES,[M:SIH1]STOMVTFLG)
Endif
# fin CPO

GPOINT="ALISDDSIH" : Gosub ENTREE From EXEFNC

[M:SIH4]YQTY(NOL)       = [M:SIH4]QTY(NOL)
[M:SIH4]YQTYSTU(NOL)    = [M:SIH4]QTYSTU(NOL)
# Chargement de la quantité pour calcul de qté en nomenclature
[M:SIH4]CQTY(NOL)       = [M:SIH4]QTY(NOL)
# Positionnement flag stock maj
[M:SIH4]RTNSTOUPD(NOL)  = 1

# Chargement sections analytiques
Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                    "SDD",0,[F:SDD]SDHNUM,[F:SDD]SDDLIN,0,"") From TRTX3CPT
# Initialisation des sections analytiques vides
Local Integer I
Local Char    SECTION
For I=1 To GNBDIE
    If evalue("dim([M:SIH4]CCE"+num$(I)+"(NOL))") >0 & evalue("[M:SIH4]CCE"+num$(I)+"(NOL)")=""
        Call INISEC(SECTION, "SID", I) From TRTX3CPT
        Assign "[M:SIH4]CCE"+num$(I)+"(NOL)" With SECTION
    Endif
Next

# Bug 95337 : Date utilisée pour le calcul des taxes (prix HT/TTC)
## Si on a une base de calcul de taxe, c'est qu'il y a une formule
#If [M:SIH4]CLCAMT1(NOL)<>0 | [M:SIH4]CLCAMT2(NOL)<>0
#   # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
#   Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
#   WANC_CLCAMT1=[M:SIH4]CLCAMT1(NOL) : WANC_CLCAMT2=[M:SIH4]CLCAMT2(NOL)
#   Call ALICLCAMT([M:SIH4]ITMREF(NOL), [M:SIH4]QTY(NOL), NOL, "SIH4", [M:SIH4]CLCAMT1(NOL), [M:SIH4]CLCAMT2(NOL)) From TRTX3
#   # Recalcul des taxes ssi les montants de base ont évolués
#   If [M:SIH4]QTY(NOL)=0 |
#&     [M:SIH4]CLCAMT1(NOL)/[M:SIH4]QTY(NOL)<>WANC_CLCAMT1/[F:SDD]QTY |
#&     [M:SIH4]CLCAMT2(NOL)/[M:SIH4]QTY(NOL)<>WANC_CLCAMT2/[F:SDD]QTY
#      If [M:SIH1]PRITYP=1
#         [M:SIH4]NETPRINOT(NOL) = [M:SIH4]NETPRI(NOL)
#         Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SDD]VAT,[M:SIH1]PRITYP,GSOCIETE,[M:SIH0]INVDAT,
#&                        [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRIATI(NOL)) From TRTX3
#      Else
#         [M:SIH4]NETPRIATI(NOL) = [M:SIH4]NETPRI(NOL)
#         Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SDD]VAT,[M:SIH1]PRITYP,GSOCIETE,[M:SIH0]INVDAT,
#&                        [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRINOT(NOL)) From TRTX3
#      Endif
#   Endif
#Endif
Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
WANC_CLCAMT1=[M:SIH4]CLCAMT1(NOL) : WANC_CLCAMT2=[M:SIH4]CLCAMT2(NOL)
# Si on a une base de calcul de taxe, c'est qu'il y a une formule
If [M:SIH4]CLCAMT1(NOL)<>0 | [M:SIH4]CLCAMT2(NOL)<>0
   # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
   Call ALICLCAMT([M:SIH4]ITMREF(NOL), [M:SIH4]QTY(NOL), NOL, "SIH4", [M:SIH4]CLCAMT1(NOL), [M:SIH4]CLCAMT2(NOL)) From TRTX3
Endif
# Utiliser [M]VATDAT si le champ est renseigné sinon utiliser [M]INVDAT
Local Date WDATCONVPRI
If dim([M:SIH2]VATDAT)>0 & [M:SIH2]VATDAT<>[0/0/0]
    WDATCONVPRI=[M:SIH2]VATDAT
Else
    WDATCONVPRI=[M:SIH0]INVDAT
Endif
If [M:SIH1]PRITYP=1
   [M:SIH4]NETPRINOT(NOL) = [M:SIH4]NETPRI(NOL)
   Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SDD]VAT,[M:SIH1]PRITYP,GSOCIETE,WDATCONVPRI,
&                   [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRIATI(NOL)) From TRTX3
Else
   [M:SIH4]NETPRIATI(NOL) = [M:SIH4]NETPRI(NOL)
   Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SDD]VAT,[M:SIH1]PRITYP,GSOCIETE,WDATCONVPRI,
&                   [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRINOT(NOL)) From TRTX3
Endif
# Bug 95337

End
#########################################################################

#------------------------------------------------------------
# Alimentation des masques SIH à partir de la 1ère commande
#------------------------------------------------------------
Subprog ALISOHSIH ()

Local  Integer  I, NBPOSTE
Local  Char     SECTION, WALI(3)
Local  Char     CODCPT(GLONCAC)
Local  Char     SMESSAGE(80)  # FGR 14/12/2011 : X3SUIVI71065

nolign=1
Local Char EXCLI : EXCLI=[M:SIH0]BPCINV
Local Char EXCUR : EXCUR=[M:SIH0]CUR
[M:SIH0] = [F:SOH]
#--CPO 79550 Nouvelle règle de transfert : Contrat services -> Factures
#--Il faut déplacer le Raz et l'appel à NEW_SFIT après le transclass [M:SIH0]=[F:CON]
##--CPO 62810 - Pb découvert lors du ttt de cette fiche
##--Le transclasse va initialiser les champs DSPTOTQTY/DSPTOTWEI/DSPTOTVOL avec les valeurs inscrite dans le SQH
##--On doit les Raz car ces champs sont mis à jour dans les ss-pros appelés par les avant et après lignes
#Raz [M:SIH0]DSPTOTQTY ,[M:SIH0]DSPTOTVOL, [M:SIH0]DSPTOTWEI
##---fin 62810
#If EXCLI<>[M:SIH0]BPCINV or EXCUR<>[M:SIH0]CUR
#    Call NEW_SFIT ("M","SIH2",[M:SIH0]CUR,[M:SIH0]BPCINV,[F:SOH]BPCORD,[M:SIH0]INVDAT) From SUBSFIT
#Endif
#--/
[M:SIH1] = [F:SOH]
[M:SIH2] = [F:SOH]

GBPCNUM  = [F:SOH]BPCORD

If currbox = GBOXCO1
   [M:SIH0] = [F:CON]
   [M:SIH1] = [F:CON]
   [M:SIH2] = [F:CON]
Endif
#-CPO 79550 Nouvelle règle de transfert : Contrat services -> Factures
#-Il faut déplacer le Raz et l'appel à NEW_SFIT après le transclass [M:SIH0]=[F:CON]
#--CPO 62810 - Pb découvert lors du ttt de cette fiche
#--Le transclasse va initialiser les champs DSPTOTQTY/DSPTOTWEI/DSPTOTVOL avec les valeurs inscrite dans le SQH
#--On doit les Raz car ces champs sont mis à jour dans les ss-pros appelés par les avant et après lignes
Raz [M:SIH0]DSPTOTQTY ,[M:SIH0]DSPTOTVOL, [M:SIH0]DSPTOTWEI
#---fin 62810
If EXCLI<>[M:SIH0]BPCINV or EXCUR<>[M:SIH0]CUR
    Call NEW_SFIT ("M","SIH2",[M:SIH0]CUR,[M:SIH0]BPCINV,[F:SOH]BPCORD,[M:SIH0]INVDAT) From SUBSFIT
Endif
#-/
[M:SIH1]STOFCY    = [F:SOQ]STOFCY
[M:SIH1]BPAADD    = [F:SOQ]BPAADD

# FGR 24/11/2011 X3SUIVI71065 (début)
If func TRTPJT.IS_PJT_AVAILABLE([M:SIH1]PJT, "[M:SIH1]PJT", SMESSAGE) = G_NON Then
  Call PJT_ADD_MSG([M:SIH1]PJT, SMESSAGE) From TRTPJT
  Raz [M:SIH1]PJT
Endif
# FGR 24/11/2011 X3SUIVI71065 (fin)

#----------------------------------------------------#
# Chargement libellés et formats colonnes tarif      #
#----------------------------------------------------#
#If GACTMUL=2
# Alimentation concernant les colonnes frais/remises en fonction de la structure tarif de la société
Call ALICOLREM (1,5,GFLAG,"SIH4",[M:SIH2]CUR,0,[M:SIH0]PLISTC) From TRTPRICE
#Endif
# Positionnement sur client facture de la facture
If [M:SIH0]BPCINV<>[F:BPC]BPCNUM
   Read [BPC]BPC0=[M:SIH0]BPCINV
Endif

# 102423 : Belgium Early discounts
# Early discount rate determination
If find(GDEPMGTMOD, 1,5)
    Call ALIDISVAT (5, [M:SIH2]DEP, GBIDI1, [M:SIH2]DEPRAT) From SUBTDA
Endif
#  102423

# Alimentation adresse facture
Raz [M:SIH0]BPAINV
# Si client cde <> client en ligne (client fac de la facture)
If GBPCNUM<>[F:BPC]BPCNUM
   Read [BPC]BPC0=GBPCNUM
   # Si client fac de la facture = client fac du client cde de la facture
   If !fstat
      If [M:SIH0]BPCINV=[F:BPC]BPCINV
         [M:SIH0]BPAINV = [F:BPC]BPAINV
      Endif
   Endif
   # Repositionnement sur client facture de la facture
   Read [BPC]BPC0=[M:SIH0]BPCINV
Endif

Call ALI_PRTMOD("SIH0",5) From TRTX3
If [M:SIH0]COPNBR=0
   [M:SIH0]COPNBR=1
Endif

# ---   Suivi texte facture du client sur entete facture
If GSALTEXINV = 1 & [F:BPC]INVTEX <> ""
   [M:SIH0]SIHTEX1 = [F:BPC]INVTEX
Elsif GSALTEXINV = 2 & [F:BPC]INVTEX <> ""
# ---   Suivi texte facture du client sur pied facture
   [M:SIH0]SIHTEX2 = [F:BPC]INVTEX
Endif

# X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)
Read [F:BPR]BPR0=[M:SIH0]BPCINV
If fstat:  Raz [F:BPR]: Endif
[M:SIH0]CRN=[F:BPR]CRN
# End X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)



If [M:SIH0]BPAINV=""
   # Si client fac de la facture = client fac du client fac de la facture
   If [M:SIH0]BPCINV=[F:BPC]BPCINV
      [M:SIH0]BPAINV    = [F:BPC]BPAINV
   Else
      [M:SIH0]BPAINV    = [F:BPC]BPAADD
   Endif
Endif

Read [TMD]TMD0 = [F:SOH]MDL
If  fstat : Raz [F:TMD] : Endif

If dim([M:SIH0]EECNAT)>0 & [M:SIH0]INVTYP<>5
#   [M:SIH0]EECNAT    = "011"
#   If GDEBGBR=1 [M:SIH0]EECNAT="10" Endif
#   [M:SIH0]EECSCH    = "21"
#   [M:SIH0]EECLOC    = [F:BPD]EECLOC
   [M:SIH0]EECTRN    = [F:TMD]EECTRN
Endif
#If dim([M:SIH0]EECICT)>0 [M:SIH0]EECICT=[F:BPD]EECICT Endif
#If dim([M:SIH0]ICTCTY)>0 [M:SIH0]ICTCTY=[F:BPD]ICTCTY Endif
#If dim([M:SIH0]FFWNUM)>0 [M:SIH0]FFWNUM=[F:BPD]FFWNUM Endif
#If dim([M:SIH0]FFWADD)>0 [M:SIH0]FFWADD=[F:BPD]FFWADD Endif

If [M:SIH0]INVTYP<>5
    [M:SIH1]STOMVTFLG = 2
Else
    [M:SIH1]STOMVTFLG = 1
Endif
[M:SIH1]INVSTA    = 1 : [M:SIH1]STARPT = 1

If currbox = GBOXCO1
   [M:SIH0]BPCINV    = [F:CON]CONBPCINV
   [M:SIH1]BPCORD    = [F:CON]CONBPC
   [M:SIH1]SIHORI    = 7
   [M:SIH1]SIHORINUM = [F:CON]CONNUM
   [M:SIH1]SIHORIDAT = [F:CON]NEXINVDAT
Else
   [M:SIH1]SIHORI    = 2
   [M:SIH1]SIHORINUM = [F:SOH]SOHNUM
   [M:SIH1]SIHORIDAT = [F:SOH]ORDDAT
   [M:SIH0]INVREF    = [F:SOH]CUSORDREF
Endif

[M:SIH1]BPRPAY    = [F:SOH]BPCPYR

[M:SIH2]STRDUDDAT = [M:SIH0]INVDAT
#[M:SIH2]RATCUR    = [F:SOH]CHGRAT
[M:SIH2]CURTYP    = [F:SOH]CHGTYP
If dim([M:SIH2]BPRFCT) > 0 [M:SIH2]BPRFCT = [F:BPC]FCTNUM Endif

# Initialisation du collectif
Call INIT_COMPTE([F:BPC]BPCNUM,GSOCIETE,"C",CODCPT) From CPTSUB
Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
If [F:CAC]ACC(0)<>""
   Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
   If !fstat & [F:GAC]SAC=2
       [M:SIH2]BPRSAC = [F:GAC]ACCSHO
   Else
       [M:SIH2]BPRSAC = ""
   Endif
Endif

# --> Chargement du cours devise et du cours reporting
#Call COURSITE([M:SIH0]CUR,GFCY,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATCUR,I)   From TRTDEV
#Call COURDEV([M:SIH0]CUR,GSYSCUR,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATRPT,I) From TRTDIV
#If dim([M:SIH2]LABEL)>0
#  Call SET_FLGDEV([M:SIH0]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#  Gosub CHARG_ZONES_DEV From SUBSIHB
#  Gosub INIT_COURS      From SUBSIHB
#Endif
#----- Chargement zones devises et cours -----#
Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS


For I= 0 To dim([M:SIH2]INVDTAAMT) - 1
    Raz [M:SIH2]INVDTAAMT(I)
    Raz [M:SIH2]INVDTA(I)
    Raz [M:SIH2]INVDTATYP(I)
Next
# Si picking de contrat, on n'alimente pas les montants de facturation
If currbox = GBOXCO1
   WALI = "NON"
Else
   WALI = "OUI"
Endif
# Init. du tableau des éléments de facturation
NBPOSTE = dim([M:SIH2]INVDTA)
Call STRUFOOT (7,"SIH2",NBPOSTE,[M:SIH2]CURTYP,[F:SOH]CUR,[M:SIH2]CUR,WALI) From SUBSFIT
# If currbox = GBOXSO3
#    Call SAISFOOT2(7,"SIH2",NBPOSTE,[M:SIH2]CURTYP,[F:SOH]CUR,[M:SIH2]CUR,WALI) From TRTVENELT
# Endif
[M:SIH2]NBFAC = NBPOSTE

# --- adresse client facture
[M:ADB3]BPAADD       = [F:SOH]BPAINV
[M:ADB3]ADBBPR       = [F:SOH]BPCINV
[M:ADB3]BPRNAM(0)    = [F:SOH]BPINAM(0)
[M:ADB3]BPRNAM(1)    = [F:SOH]BPINAM(1)
[M:ADB3]BPAADDLIG(0) = [F:SOH]BPIADDLIG(0)
[M:ADB3]BPAADDLIG(1) = [F:SOH]BPIADDLIG(1)
[M:ADB3]BPAADDLIG(2) = [F:SOH]BPIADDLIG(2)
[M:ADB3]POSCOD       = [F:SOH]BPIPOSCOD
[M:ADB3]CTY          = [F:SOH]BPICTY
[M:ADB3]SAT          = [F:SOH]BPISAT
[M:ADB3]CRY          = [F:SOH]BPICRY
[M:ADB3]CRYNAM       = [F:SOH]BPICRYNAM
[M:ADB3]CNTNAM       = [F:SOH]CNINAM
#If dim([M:ADB3]EECNUM)>0 [M:ADB3]EECNUM = [F:SOH]BPIEECNUM Endif

If [M:ADB3]BPRNAM <> "" |  [M:ADB3]BPAADDLIG <> "" |
&  [M:ADB3]POSCOD <> "" |  [M:ADB3]CTY <> ""      |
&  [M:ADB3]SAT    <> "" |
&  [M:ADB3]CRY    <> "" |  [M:ADB3]CRYNAM <> ""
    [M:ADB3]ADBFLG = 3
Else
    [M:ADB3]ADBFLG = 0
Endif

# --- adresse livraison
# Alimentation code adresse (client livré) dans [M:ADB2] pour saisie adresse libre
If dim([M:ADB2]BPAADD) > 0
    [M:ADB2]BPAADD   = [F:SOH]BPAADD
Endif
[M:ADB2]ADBBPR       = [F:SOH]BPCORD
[M:ADB2]BPRNAM(0)    = [F:SOH]BPDNAM(0)
[M:ADB2]BPRNAM(1)    = [F:SOH]BPDNAM(1)
[M:ADB2]BPAADDLIG(0) = [F:SOH]BPDADDLIG(0)
[M:ADB2]BPAADDLIG(1) = [F:SOH]BPDADDLIG(1)
[M:ADB2]BPAADDLIG(2) = [F:SOH]BPDADDLIG(2)
[M:ADB2]POSCOD       = [F:SOH]BPDPOSCOD
[M:ADB2]CTY          = [F:SOH]BPDCTY
[M:ADB2]SAT          = [F:SOH]BPDSAT
[M:ADB2]CRY          = [F:SOH]BPDCRY
[M:ADB2]CRYNAM       = [F:SOH]BPDCRYNAM
[M:ADB2]CNTNAM       = [F:SOH]CNDNAM
#If [F:SOH]BPCORD = [F:SOH]BPCINV & dim([M:ADB2]EECNUM)>0
#   [M:ADB2]EECNUM = [F:SOH]BPIEECNUM
#Endif

If [M:ADB2]BPRNAM <> "" | [M:ADB2]BPAADDLIG <> "" |
&  [M:ADB2]POSCOD <> "" | [M:ADB2]CTY <> ""      |
&  [M:ADB2]SAT    <> "" |
&  [M:ADB2]CRY    <> "" | [M:ADB2]CRYNAM <> ""
    [M:ADB2]ADBFLG = 3
Else
    [M:ADB2]ADBFLG = 0
Endif
If func AFNC.ACTIV("LTA") and dim([M:ADB2]ADRVAL) > 0 #LTA.sn
  [M:ADB2]ADRVAL = [F:SOH]ADRVAL
Endif                                                 #LTA.en

# Chargement des sections analytiques entête facture à partir de l'entête commande ou contrat
If currbox = GBOXCO1
    Call CHARG_CCEH("SIH2","NBAXE","SOH") From TRTX3CPT
Else
    Call CHARG_CCEH("SIH2","NBAXE","CON") From TRTX3CPT
Endif
# On complète les sections vides
If dim([M:SIH2]NBAXE)>0
  [M:SIH2]NBAXE=GNBDIE
  For I=1 To GNBDIE
    If [M:SIH2]CCE(I-1)=""
      [M:SIH2]DIE(I-1)=GDIE(I)
      Call INISEC(SECTION,"SIH",GDIE(I)) From SUBCDE
      [M:SIH2]CCE(I-1)=SECTION
    Endif
  Next I
Endif

End

#########################################################################

#----------------------------------------------------------------
# Alimentation des masques SIH à partir d'une ligne de commande
#----------------------------------------------------------------
Subprog ALISOQSIH (NOL,WQTAFAC,WQTAFACSTU)
Value Integer NOL
Value Decimal WQTAFAC
Value Decimal WQTAFACSTU

Local Integer I

[M:SIH4] = [F:SOQ]
[M:SIH4] = [F:SOP]

# --------------------------------------
# FGR 21/04/2015 : X3SUIVI105605 (début) ici pour ne le faire que sur les proforma
If [M:SIH0]INVTYP = 5 Then
  If dim([M:SIH4]ECCVALMAJ) >= 0 Then
    Raz [M:SIH4]ECCVALMAJ(NOL)
  Endif
  If dim([M:SIH4]ECCVALMIN) >= 0 Then
    Raz [M:SIH4]ECCVALMIN(NOL)
  Endif
Endif
# FGR 21/04/2015 : X3SUIVI105605 (fin)
# --------------------------------------

# Bug 60925
If dim([M:SIH4]STRDAT)>0 Raz [M:SIH4]STRDAT(NOL) Endif
If dim([M:SIH4]ENDDAT)>0 Raz [M:SIH4]ENDDAT(NOL) Endif
# Bug 60925

If [M]BETFCY=2 & [M]ORIFCY="" [M]ORIFCY=[F:SOH]ORIFCY : Endif

If dim([M:SIH4]LOT)>0 Raz [M:SIH4]LOT(NOL) Endif
If dim([M:SIH4]LOC)>0 Raz [M:SIH4]LOC(NOL) Endif
If dim([M:SIH4]STA)>0 Raz [M:SIH4]STA(NOL) Endif

[M:SIH4]ALLTYP(NOL)  = 2
[M:SIH4]DSTOFCY(NOL) = [F:SOQ]STOFCY

[M:SIH4]DPJT(NOL)    = [F:SOQ]PJT  # FGR 24/11/2011 X3SUIVI71065

[M:SIH4]LOTFIL(NOL)  = [F:SOQ]LOT
[M:SIH4]STAFIL(NOL)  = [F:SOQ]STA
[M:SIH4]LOCFIL(NOL)  = [F:SOQ]LOC

[M:SIH4]VACITM1(NOL) = [F:SOP]VACITM(0)
[M:SIH4]VACITM2(NOL) = [F:SOP]VACITM(1)
[M:SIH4]VACITM3(NOL) = [F:SOP]VACITM(2)
[M:SIH4]VAT1(NOL)    = [F:SOP]VAT(0)
[M:SIH4]VAT2(NOL)    = [F:SOP]VAT(1)
[M:SIH4]VAT3(NOL)    = [F:SOP]VAT(2)
If dim([M:SIH4]TSICOD1(NOL))>0 [M:SIH4]TSICOD1(NOL)=[F:SOP]TSICOD(0) Endif
If dim([M:SIH4]TSICOD2(NOL))>0 [M:SIH4]TSICOD2(NOL)=[F:SOP]TSICOD(1) Endif
If dim([M:SIH4]TSICOD3(NOL))>0 [M:SIH4]TSICOD3(NOL)=[F:SOP]TSICOD(2) Endif
If dim([M:SIH4]TSICOD4(NOL))>0 [M:SIH4]TSICOD4(NOL)=[F:SOP]TSICOD(3) Endif
If dim([M:SIH4]TSICOD5(NOL))>0 [M:SIH4]TSICOD5(NOL)=[F:SOP]TSICOD(4) Endif

Raz [M:SIH4]SIDLIN(NOL), [M:SIH4]ORILIN(NOL)

[M:SIH4]XSERMGTCOD(NOL) = [F:ITM]SERMGTCOD

# ---   Suivi texte détail cde sur fac : Duplication
Local Integer WRET
If find (GSALTEXLIN,5)
    [M:SIH4]SIDTEX(NOL) = [F:SOQ]SOQTEX
    If left$([F:SOQ]SOQTEX,3)="SOQ"
       Call DUP_CLOB("SID",[M:SIH4]SIDTEX(NOL),WRET) From TRTX3TEX
       If WRET<1 Raz [M:SIH4]SIDTEX(NOL) Endif
    Endif
Endif
# ---   Suivi texte sur fac : Recherche texte article et duplication
If find (GSALTEXLIN,3)
   [M:SIH4]SIDTEX(NOL) = [F:ITU]ITSTEX
   If [M:SIH4]SIDTEX(NOL)=""
      [M:SIH4]SIDTEX(NOL) = [F:ITS]ITSTEX
   Endif
Endif

[M:SIH4]QTY(NOL)     = WQTAFAC
[M:SIH4]QTYSTU(NOL)  = WQTAFACSTU

[M:SIH4]YQTY(NOL)    = [M:SIH4]QTY(NOL)
[M:SIH4]YQTYSTU(NOL) = [M:SIH4]QTYSTU(NOL)
# Chargement de la quantité pour calcul de qté en nomenclature
[M:SIH4]CQTY(NOL)    = [M:SIH4]QTY(NOL)

# Si picking de contrat, on récupère les montants à facturer du contrat
If currbox = GBOXCO1
   Raz [M:SIH4]SOHNUM(NOL), [M:SIH4]SOPLIN(NOL), [M:SIH4]SOQSEQ(NOL)
   [M:SIH4]CONNUM(NOL) = [F:CON]CONNUM
   Local Decimal WPRIX
   Call SETSIHPRICE(WPRIX) From SUBCONB2
   [M:SIH4]GROPRI(NOL) = WPRIX
   [M:SIH4]NETPRI(NOL) = WPRIX
   [M:SIH4]PRIREN(NOL) = GDACMANSAL
   For I=1 To 9
      If evalue ("dim([M:SIH4]DISCRGVAL"+num$(I)+"(NOL))") > 0
         Assign "[M:SIH4]DISCRGVAL"+num$(I)+"(NOL)" With 0
         Assign "[M:SIH4]DISCRGREN"+num$(I)+"(NOL)" With GDACMANSAL
      Endif
   Next
   # --> Calcul des montants de base calcul de taxe
   Call ALICLCAMT([M]ITMREF(NOL), [M]QTY(NOL), NOL, "SIH4", [M]CLCAMT1(NOL), [M]CLCAMT2(NOL)) From TRTX3
   # --> Calcul marge, prix de revient et prix net HT et TTC
   Call CLCPFM([M:SIH4]DSTOFCY(NOL),[M:SIH1]PRITYP,[M:SIH0]CHGTYP,[M:SIH0]INVDAT,[M:SIH2]CUR, NOL, 2)
&              From TRTVENPRI
Else
# Bug 95337 : Date utilisée pour le calcul des taxes (prix HT/TTC)
#   # Si on a une base de calcul de taxe, c'est qu'il y a une formule
#   If [M:SIH4]CLCAMT1(NOL)<>0 | [M:SIH4]CLCAMT2(NOL)<>0
#      # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
#      Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
#      WANC_CLCAMT1=[M:SIH4]CLCAMT1(NOL) : WANC_CLCAMT2=[M:SIH4]CLCAMT2(NOL)
#      Call ALICLCAMT([M:SIH4]ITMREF(NOL), [M:SIH4]QTY(NOL), NOL, "SIH4", [M:SIH4]CLCAMT1(NOL), [M:SIH4]CLCAMT2(NOL)) From TRTX3
#      # Recalcul des taxes ssi les montants de base ont évolués
#      If [M:SIH4]QTY(NOL)=0 |
#&        [M:SIH4]CLCAMT1(NOL)/[M:SIH4]QTY(NOL)<>WANC_CLCAMT1/[F:SOQ]QTY |
#&        [M:SIH4]CLCAMT2(NOL)/[M:SIH4]QTY(NOL)<>WANC_CLCAMT2/[F:SOQ]QTY
#         If [M:SIH1]PRITYP=1
#            [M:SIH4]NETPRINOT(NOL) = [M:SIH4]NETPRI(NOL)
#            Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SOP]VAT,[M:SIH1]PRITYP,GSOCIETE,[M:SIH0]INVDAT,
#&                           [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRIATI(NOL)) From TRTX3
#         Else
#            [M:SIH4]NETPRIATI(NOL) = [M:SIH4]NETPRI(NOL)
#            Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SOP]VAT,[M:SIH1]PRITYP,GSOCIETE,[M:SIH0]INVDAT,
#&                           [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRINOT(NOL)) From TRTX3
#         Endif
#      Endif
#   Endif
   # Si on a une base de calcul de taxe, c'est qu'il y a une formule
   Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
   WANC_CLCAMT1=[M:SIH4]CLCAMT1(NOL) : WANC_CLCAMT2=[M:SIH4]CLCAMT2(NOL)
   If [M:SIH4]CLCAMT1(NOL)<>0 | [M:SIH4]CLCAMT2(NOL)<>0
      # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
      Call ALICLCAMT([M:SIH4]ITMREF(NOL), [M:SIH4]QTY(NOL), NOL, "SIH4", [M:SIH4]CLCAMT1(NOL), [M:SIH4]CLCAMT2(NOL)) From TRTX3
   Endif
   # Recalcul des taxes systématique avec [M]INVDAT (au cas où le taux ait changé entre date cde et date facture)
   Local Date WDATCONVPRI
   WDATCONVPRI=[M:SIH0]INVDAT
   If [M:SIH1]PRITYP=1
      [M:SIH4]NETPRINOT(NOL) = [M:SIH4]NETPRI(NOL)
      Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SOP]VAT,[M:SIH1]PRITYP,GSOCIETE,WDATCONVPRI,
&                      [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRIATI(NOL)) From TRTX3
   Else
      [M:SIH4]NETPRIATI(NOL) = [M:SIH4]NETPRI(NOL)
      Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SOP]VAT,[M:SIH1]PRITYP,GSOCIETE,WDATCONVPRI,
&                      [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRINOT(NOL)) From TRTX3
   Endif
   # Bug 95337
Endif
# Positionnement flag stock maj
[M:SIH4]RTNSTOUPD(NOL)  = 1

# Chargement sections analytiques
Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                    "SOP",0,[F:SOP]SOHNUM,[F:SOP]SOPLIN,[F:SOP]SOPSEQ,"") From TRTX3CPT
# Initialisation des sections analytiques vides
Local Integer I
Local Char    SECTION
For I=1 To GNBDIE
    If evalue("dim([M:SIH4]CCE"+num$(I)+"(NOL))") >0 & evalue("[M:SIH4]CCE"+num$(I)+"(NOL)")=""
        Call INISEC(SECTION, "SID", I) From TRTX3CPT
        Assign "[M:SIH4]CCE"+num$(I)+"(NOL)" With SECTION
    Endif
Next

# CPO 31/07/2008 Pour la DEB
If dim([M:SIH4]EECFLOPHY)>0
    [M:SIH4]EECFLOPHY(NOL) = func INIT_EECFLOPHY([F:ITM]EECGES,[M:SIH1]STOMVTFLG)
Endif
# fin CPO

End

#########################################################################

#------------------------------------------------------------
# Alimentation des masques SIH à partir du 1er devis
#------------------------------------------------------------
Subprog ALISQHSIH ()

Local  Integer  I, NBPOSTE
Local  Char     SECTION, WALI(3)
Local  Char     CODCPT(GLONCAC)
Local  Char     SMESSAGE(80)   # FGR 14/12/2011 : X3SUIVI71065
# Issue 134073 - 2019-04-24 by SR : Load BPAADD if needed
Local Char    WBPAADD : WBPAADD= [M:SIH1]BPAADD

nolign=1

GBPCNUM        = [F:SQH]BPCORD

# Positionnement sur client du devis
If [F:SQH]BPCORD <>[F:BPC]BPCNUM
   Read [BPC]BPC0=[F:SQH]BPCORD
Endif

# Positionnement sur client livré
If [F:SQH]BPCORD<>[F:BPD]BPCNUM | [F:SQH]BPAADD<>[F:BPD]BPAADD
   Read [BPD]BPD0=[F:SQH]BPCORD;[F:SQH]BPAADD
   If fstat Raz [F:BPD] Endif
Endif

Local Char EXCLI : EXCLI=[M:SIH0]BPCINV
Local Char EXCUR : EXCUR=[M:SIH0]CUR
[M:SIH0] = [F:BPC]
[M:SIH0] = [F:SQH]
[M:SIH1] = [F:SQH]
[M:SIH2] = [F:SQH]
#-
# Issue X3-134073 - 2019-04-24 by SR : After Transclass : Load BPAADD if needed
If [M:SIH1]BPAADD <> ""
   Read [BPD]BPD0 = [M:SIH1]BPCORD;[M:SIH1]BPAADD
   If fstat  | [F:BPD]ENAFLG <> 2 : Raz [M:SIH1]BPAADD : Endif
Endif
# WBPAADD(old value of BPAADD before Transclass) and [M:SIH1]BPAADD(value after Transclass)
# are OK if not empty
# If both are empty, we need to search an available BPAADD
If [M:SIH1]BPAADD = "" & WBPAADD = ""
    Filter [BPD] Where [BPD]BPCNUM = [M:SIH1]BPCORD & ENAFLG=2
    Read [BPD]BPD0 = [M:SIH1]BPCORD;[F:BPC]BPDADD
    If fstat = 0
       [M:SIH1]BPAADD = [F:BPD]BPAADD
    Else
       Read [BPD]BPD0 First
       If fstat = 0
          [M:SIH1]BPAADD = [F:BPD]BPAADD
       Endif
    Endif
    Filter [BPD]
Elsif WBPAADD <> "" & [M:SIH1]BPAADD=""
    [M:SIH1]BPAADD = WBPAADD
Endif
# End issue X3-134073
#-
#---CPO 62810 - Pb découvert lors du ttt de cette fiche
#--Le transclasse va initialiser les champs DSPTOTQTY/DSPTOTWEI/DSPTOTVOL avec les valeurs inscrite dans le SQH
#--On doit les Raz car ces champs sont mis à jour dans les ss-pros appelés par les avant et après lignes
Raz [M:SIH0]DSPTOTQTY ,[M:SIH0]DSPTOTVOL, [M:SIH0]DSPTOTWEI
#---fin 62810
[M:SIH0]BPCINV = [F:SQH]BPCORD

#--CPO 87446
# ---   Suivi texte facture du client sur entete facture
If GSALTEXINV = 1 & [F:BPC]INVTEX <> ""
   [M:SIH0]SIHTEX1 = [F:BPC]INVTEX
Elsif GSALTEXINV = 2 & [F:BPC]INVTEX <> ""
# ---   Suivi texte facture du client sur pied facture
   [M:SIH0]SIHTEX2 = [F:BPC]INVTEX
Endif
#--/
#X3-85540 (LCC-11/04/18) invoice text is not refreshed
If [F:BPC]INVTEX=""
  Raz [M:SIH0]SIHTEX1,[M:SIH0]SIHTEX2
Endif
#End X3-85540 (LCC-11/04/18) invoice text is not refreshed

# FGR 02/12/2011 : X3SUIVI71065 (début)
If func TRTPJT.IS_PJT_AVAILABLE([M:SIH1]PJT, "[M:SIH1]PJT", SMESSAGE) = G_NON Then
  Call PJT_ADD_MSG([M:SIH1]PJT, SMESSAGE) From TRTPJT
  Raz [M:SIH1]PJT
Endif
# FGR 02/12/2011 : X3SUIVI71065 (fin)

If EXCLI<>[M:SIH0]BPCINV or EXCUR<>[M:SIH0]CUR
    Call NEW_SFIT ("M","SIH2",[M:SIH0]CUR,[M:SIH0]BPCINV,[M:SIH1]BPCORD,[M:SIH0]INVDAT) From SUBSFIT
Endif

# 102423 : Belgium Early discounts
# Early discount rate determination
If find(GDEPMGTMOD, 1,5)
    Call ALIDISVAT (5, [M:SIH2]DEP, GBIDI1, [M:SIH2]DEPRAT) From SUBTDA
Endif
#  102423

#[M:SIH0]BPINAM = [F:BPC]BPCNAM
If [F:SQH]BPCNAM(0) <> ""
    [M:SIH0]BPINAM = [F:SQH]BPCNAM(0)
Else
    [M:SIH0]BPINAM = [F:BPC]BPCNAM
Endif

If [F:BPC]BPCTYP<>4
   [M:SIH1]BPCGRU = [F:BPC]BPCNUM
   [M:SIH1]BPRPAY = [F:BPC]BPCPYR
Else
# Cas particulier des prospects
# Pas d'alimentation du client groupe qui n'est pas obligatoire
# Le tiers payeur étant à blanc, on peut forcer le tiers clt commande
   [M:SIH1]BPRPAY = [F:BPC]BPCNUM
Endif

#[M:SIH1]BPDNAM    = [F:BPD]BPDNAM
If [F:SQH]BPAADD <> "" & [F:BPC]BPCTYP = 1
    If [F:SQH]BPDNAM(0) <> ""
        [M:SIH1]BPDNAM = [F:SQH]BPDNAM(0)
    Else
        [M:SIH1]BPDNAM = [F:BPD]BPDNAM
    Endif
Elsif [F:SQH]BPAADD <> "" & [F:BPC]BPCTYP = 4
# Cas particulier des prospects
# il n'y a pas forcément de client livré
    If [F:SQH]BPDNAM(0) <> ""
        [M:SIH1]BPDNAM = [F:SQH]BPDNAM(0)
    Else
        [M:SIH1]BPDNAM = [F:BPC]BPCNAM
    Endif
Endif

#VPO 26/05/09 55362
# Alimentation à partir du modèle d'édition
Call ALI_PRTMOD("SIH0",5) From TRTX3
If [M:SIH0]COPNBR=0 [M:SIH0]COPNBR=1 Endif

[M:SIH0]INVDAT    = date$
[M:SIH0]INVREF    = [F:SQH]CUSQUOREF
[M:SIH1]SIHORI    = 5
[M:SIH1]SIHORINUM = [F:SQH]SQHNUM
[M:SIH1]SIHORIDAT = [F:SQH]QUODAT

[M:SIH1]STOMVTFLG = 1
[M:SIH1]INVSTA    = 1 : [M:SIH1]STARPT = 1

[M:SIH2]STRDUDDAT = [M:SIH0]INVDAT
#[M:SIH2]RATCUR    = [F:SQH]CHGRAT
[M:SIH2]CURTYP    = [F:SQH]CHGTYP

If dim([M:SIH2]BPRFCT) > 0 [M:SIH2]BPRFCT = [F:BPC]FCTNUM Endif

# Initialisation du collectif
Call INIT_COMPTE([F:BPC]BPCNUM,GSOCIETE,"C",CODCPT) From CPTSUB
Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
If [F:CAC]ACC(0)<>""
   Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
   If !fstat & [F:GAC]SAC=2
       [M:SIH2]BPRSAC = [F:GAC]ACCSHO
   Else
       [M:SIH2]BPRSAC = ""
   Endif
Endif

# alimentation des codes statistiques
If dim([M:SIH0]TSCCOD) <> -1
   For I = 1 To dim([M:SIH0]TSCCOD)
      [M:SIH0]TSCCOD(I-1) = [F:BPC]TSCCOD(I-1)
   Next I
Endif

## --> Chargement du cours devise et du cours reporting
#Call COURSITE([M:SIH0]CUR,GFCY,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATCUR,I)   From TRTDEV
#Call COURDEV([M:SIH0]CUR,GSYSCUR,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATRPT,I) From TRTDIV
#If dim([M:SIH2]LABEL)>0
#  Call SET_FLGDEV([M:SIH0]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#  Gosub CHARG_ZONES_DEV From SUBSIHB
#  Gosub INIT_COURS      From SUBSIHB
#Endif
#----- Chargement zones devises et cours -----#
Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS

For I= 0 To dim([M:SIH2]INVDTAAMT) - 1
    Raz [M:SIH2]INVDTAAMT(I)
    Raz [M:SIH2]INVDTA(I)
    Raz [M:SIH2]INVDTATYP(I)
Next

WALI = "OUI"
# Init. du tableau des éléments de facturation
NBPOSTE = dim([M:SIH2]INVDTA)
Call SAISFOOT (6,"SIH2",NBPOSTE,[M:SIH2]CURTYP,[F:SQH]CUR,[M:SIH2]CUR,WALI) From SUBSFIT
# Call SAISFOOT2(9,"SIH2",NBPOSTE,[M:SIH2]CURTYP,[F:SQH]CUR,[M:SIH2]CUR,WALI) From TRTVENELT
[M:SIH2]NBFAC = NBPOSTE

# Issue X3-136101 - 2019-05-09 by MUARN : Billing address
## --- adresse client facture
##ACA 51913
##--CPO 80783 Adresse de facturation d'une Proforma d'un prospect
##Read [BPA]BPA0=1;[F:BPC]BPCINV;[F:BPC]BPAINV
#If [F:BPC]BPCINV<> "" | [F:BPC]BPCTYP <>4
#  Read [BPA]BPA0=1;[F:BPC]BPCINV;[F:BPC]BPAINV
#Else #--cela veut dire que [F:BPC]BPCINV="" & [F:BPC]BPCTYP = 4
#  # Cas particulier des prospects
#  # il n'y a pas forcément de client facture (on lit sur client en-tête : le prospect)
#  Read [BPA]BPA0=1;[M:SIH0]BPCINV;[M:SIH1]BPAADD
#Endif
##--/CPO
#If fstat : Raz [F:BPA] : Endif
#
#[M:ADB3]BPAADD       = [F:SQH]BPAORD
#[M:ADB3]ADBBPR       = [F:BPC]BPCINV
#[M:ADB3]BPRNAM(0)    = [F:SQH]BPCNAM(0)
#[M:ADB3]BPRNAM(1)    = [F:SQH]BPCNAM(1)
#[M:ADB3]BPAADDLIG(0) = [F:BPA]BPAADDLIG(0)
#[M:ADB3]BPAADDLIG(1) = [F:BPA]BPAADDLIG(1)
#[M:ADB3]BPAADDLIG(2) = [F:BPA]BPAADDLIG(2)
#[M:ADB3]POSCOD       = [F:BPA]POSCOD
#[M:ADB3]CTY          = [F:BPA]CTY
#[M:ADB3]SAT          = [F:BPA]SAT
#[M:ADB3]CRY          = [F:BPA]CRY
#[M:ADB3]CRYNAM       = [F:BPA]CRYNAM
#[M:ADB3]CNTNAM       = [F:SQH]CNCNAM

If [F:BPC]BPCNUM=[F:BPC]BPCINV & [F:BPC]BPAINV=[F:SQH]BPAORD
  [M:ADB3]BPAADD       = [F:SQH]BPAORD
  [M:ADB3]ADBBPR       = [F:SQH]BPCORD
  [M:ADB3]BPRNAM(0)    = [F:SQH]BPCNAM(0)
  [M:ADB3]BPRNAM(1)    = [F:SQH]BPCNAM(1)
  [M:ADB3]BPAADDLIG(0) = [F:SQH]BPCADDLIG(0)
  [M:ADB3]BPAADDLIG(1) = [F:SQH]BPCADDLIG(1)
  [M:ADB3]BPAADDLIG(2) = [F:SQH]BPCADDLIG(2)
  [M:ADB3]POSCOD       = [F:SQH]BPCPOSCOD
  [M:ADB3]CTY          = [F:SQH]BPCCTY
  [M:ADB3]SAT          = [F:SQH]BPCSAT
  [M:ADB3]CRY          = [F:SQH]BPCCRY
  [M:ADB3]CRYNAM       = [F:SQH]BPCCRYNAM
  [M:ADB3]CNTNAM       = [F:SQH]CNCNAM
Else
  If [F:BPC]BPCINV<> "" | [F:BPC]BPCTYP <>4
    Read [BPA]BPA0=1;[F:BPC]BPCINV;[F:BPC]BPAINV
  Else #--cela veut dire que [F:BPC]BPCINV="" & [F:BPC]BPCTYP = 4
    # Cas particulier des prospects
    # il n'y a pas forcément de client facture (on lit sur client en-tête : le prospect)
    Read [BPA]BPA0=1;[M:SIH0]BPCINV;[M:SIH1]BPAADD
  Endif
  If fstat : Raz [F:BPA] : Endif
  [M:ADB3]BPAADD       = [F:BPC]BPAINV
  [M:ADB3]ADBBPR       = [F:BPC]BPCINV
  [M:ADB3]BPRNAM(0)    = [F:SQH]BPCNAM(0)
  [M:ADB3]BPRNAM(1)    = [F:SQH]BPCNAM(1)
  [M:ADB3]BPAADDLIG(0) = [F:BPA]BPAADDLIG(0)
  [M:ADB3]BPAADDLIG(1) = [F:BPA]BPAADDLIG(1)
  [M:ADB3]BPAADDLIG(2) = [F:BPA]BPAADDLIG(2)
  [M:ADB3]POSCOD       = [F:BPA]POSCOD
  [M:ADB3]CTY          = [F:BPA]CTY
  [M:ADB3]SAT          = [F:BPA]SAT
  [M:ADB3]CRY          = [F:BPA]CRY
  [M:ADB3]CRYNAM       = [F:BPA]CRYNAM
  [M:ADB3]CNTNAM       = [F:SQH]CNCNAM
Endif
# End issue X3-136101

If [M:ADB3]BPRNAM <> "" |  [M:ADB3]BPAADDLIG <> "" |
&  [M:ADB3]POSCOD <> "" |  [M:ADB3]CTY <> ""      |
&  [M:ADB3]SAT    <> "" |
&  [M:ADB3]CRY    <> "" |  [M:ADB3]CRYNAM <> ""
    [M:ADB3]ADBFLG = 3
Else
    [M:ADB3]ADBFLG = 0
Endif

# --- adresse livraison
# Alimentation code adresse (client livré) dans [M:ADB2] pour saisie adresse libre
If dim([M:ADB2]BPAADD) > 0
    [M:ADB2]BPAADD   = [F:SQH]BPAADD
Endif
[M:ADB2]ADBBPR       = [F:SQH]BPCORD
[M:ADB2]BPRNAM(0)    = [F:SQH]BPDNAM(0)
[M:ADB2]BPRNAM(1)    = [F:SQH]BPDNAM(1)
[M:ADB2]BPAADDLIG(0) = [F:SQH]BPDADDLIG(0)
[M:ADB2]BPAADDLIG(1) = [F:SQH]BPDADDLIG(1)
[M:ADB2]BPAADDLIG(2) = [F:SQH]BPDADDLIG(2)
[M:ADB2]POSCOD       = [F:SQH]BPDPOSCOD
[M:ADB2]CTY          = [F:SQH]BPDCTY
[M:ADB2]SAT          = [F:SQH]BPDSAT
[M:ADB2]CRY          = [F:SQH]BPDCRY
[M:ADB2]CRYNAM       = [F:SQH]BPDCRYNAM
[M:ADB2]CNTNAM       = [F:SQH]CNDNAM

If [M:ADB2]BPRNAM <> "" | [M:ADB2]BPAADDLIG <> "" |
&  [M:ADB2]POSCOD <> "" | [M:ADB2]CTY <> ""       |
&  [M:ADB2]SAT    <> "" |
&  [M:ADB2]CRY    <> "" | [M:ADB2]CRYNAM <> ""
    [M:ADB2]ADBFLG = 3
Else
    [M:ADB2]ADBFLG = 0
Endif

# ACA - Positionnement sur le Tiers Payeur
Read [BPR]BPR0=[M:SIH1]BPRPAY
# Adresse facture - Init à l'adresse par défaut du tiers
Read [BPA]BPA0=1;[M:SIH1]BPRPAY;[F:BPC]BPAPYR
If fstat : Raz [F:BPA] : Endif
[M:ADI4]BPAADD       = [F:BPA]BPAADD
[M:ADI4]ADBBPR       = [F:BPA]BPANUM
[M:ADI4]BPRNAM(0)    = [F:BPR]BPRNAM(0)
[M:ADI4]BPRNAM(1)    = [F:BPR]BPRNAM(1)
[M:ADI4]BPAADDLIG(0) = [F:BPA]BPAADDLIG(0)
[M:ADI4]BPAADDLIG(1) = [F:BPA]BPAADDLIG(1)
[M:ADI4]BPAADDLIG(2) = [F:BPA]BPAADDLIG(2)
[M:ADI4]POSCOD       = [F:BPA]POSCOD
[M:ADI4]CTY          = [F:BPA]CTY
[M:ADI4]SAT          = [F:BPA]SAT
[M:ADI4]CRY          = [F:BPA]CRY
[M:ADI4]CRYNAM       = [F:BPA]CRYNAM
[M:ADI4]CNTNAM       = [F:BPR]CNTNAM

# Initialisation sections analytiques
#For I=1 To GOPTCANA
#    Call INISEC(SECTION,"SIH",num$(I)) From SUBCDE
#    [M:SIH2]CCE(I-1) = SECTION
#Next I
#If dim([M:SIH2]NBAXE) > 0 [M:SIH2]NBAXE = GOPTCANA Endif

# Alimenter des champs de l'entête facture
GPOINT="ALISQHSIH" : Gosub ENTREE From EXEFNC   : # Dde 74518

End

#########################################################################

#----------------------------------------------------------------
# Alimentation des masques SIH à partir d'une ligne de devis
#----------------------------------------------------------------
Subprog ALISQDSIH (NOL)
Value Integer NOL

Local Integer I

[M:SIH4] = [F:SQD]

# --------------------------------------
# FGR 21/04/2015 : X3SUIVI105605 (début)
If dim([M:SIH4]ECCVALMAJ) >= 0 Then
  Raz [M:SIH4]ECCVALMAJ(NOL)
Endif
If dim([M:SIH4]ECCVALMIN) >= 0 Then
  Raz [M:SIH4]ECCVALMIN(NOL)
Endif
# FGR 21/04/2015 : X3SUIVI105605 (fin)
# --------------------------------------

[M:SIH4]VAT1(NOL)    = [F:SQD]VAT(0)
[M:SIH4]VAT2(NOL)    = [F:SQD]VAT(1)
[M:SIH4]VAT3(NOL)    = [F:SQD]VAT(2)
[M:SIH4]VACITM1(NOL) = [F:SQD]VACITM(0)
[M:SIH4]VACITM2(NOL) = [F:SQD]VACITM(1)
[M:SIH4]VACITM3(NOL) = [F:SQD]VACITM(2)
[M:SIH4]DSTOFCY(NOL) = [F:SQD]STOFCY

[M:SIH4]DPJT(NOL)    = [F:SQD]PJT  # FGR 24/11/2011 X3SUIVI71065

Call CNVQTY([F:SQD]QTY,[F:SQD]SAUSTUCOE,[F:SQD]STU,[M:SIH4]QTYSTU(NOL))
&    From TRTVENQTE
[M:SIH4]YQTY(NOL)    = [M:SIH4]QTY(NOL)
[M:SIH4]YQTYSTU(NOL) = [M:SIH4]QTYSTU(NOL)
[M:SIH4]CQTY(NOL)    = [M:SIH4]QTY(NOL)


Raz [M:SIH4]SIDLIN(NOL), [M:SIH4]ORILIN(NOL)

[M:SIH4]RTNSTOUPD(NOL)  = 1
[M:SIH4]ALLTYP(NOL)     = 2
[M:SIH4]XSERMGTCOD(NOL) = [F:ITM]SERMGTCOD

If dim([M:SIH4]TSICOD1(NOL))>0 [M:SIH4]TSICOD1(NOL)=[F:ITM]TSICOD(0) Endif
If dim([M:SIH4]TSICOD2(NOL))>0 [M:SIH4]TSICOD2(NOL)=[F:ITM]TSICOD(1) Endif
If dim([M:SIH4]TSICOD3(NOL))>0 [M:SIH4]TSICOD3(NOL)=[F:ITM]TSICOD(2) Endif
If dim([M:SIH4]TSICOD4(NOL))>0 [M:SIH4]TSICOD4(NOL)=[F:ITM]TSICOD(3) Endif
If dim([M:SIH4]TSICOD5(NOL))>0 [M:SIH4]TSICOD5(NOL)=[F:ITM]TSICOD(4) Endif

# Chargement sections analytiques
Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                    "SQD",0,[F:SQD]SQHNUM,[F:SQD]SQDLIN,0,"") From TRTX3CPT
# Initialisation des sections analytiques vides
Local Integer I
Local Char    SECTION(GLONCCE)         # FGR 21/04/2015 : X3SUIVI105605 : ajout (GLONCCE)
For I=1 To GNBDIE
    If evalue("dim([M:SIH4]CCE"+num$(I)+"(NOL))") >0 & evalue("[M:SIH4]CCE"+num$(I)+"(NOL)")=""
        Call INISEC(SECTION, "SID", I) From TRTX3CPT
        Assign "[M:SIH4]CCE"+num$(I)+"(NOL)" With SECTION
    Endif
Next

# Bug 57701
# ---   Suivi texte détail devis sur fac : Duplication
Local Integer WRET
If find (GSALTEXLIN,5)
    [M:SIH4]SIDTEX(NOL) = [F:SQD]SQDTEX
    If left$([F:SQD]SQDTEX,3)="SQD"
       Call DUP_CLOB("SID",[M:SIH4]SIDTEX(NOL),WRET) From TRTX3TEX
       If WRET<1 Raz [M:SIH4]SIDTEX(NOL) Endif
    Endif
Endif
# ---   Suivi texte sur fac : Recherche texte article et duplication
If find (GSALTEXLIN,3)
   [M:SIH4]SIDTEX(NOL) = [F:ITU]ITSTEX
   If [M:SIH4]SIDTEX(NOL)=""
      [M:SIH4]SIDTEX(NOL) = [F:ITS]ITSTEX
   Endif
Endif

# Bug 95337 : Date utilisée pour le calcul des taxes (prix HT/TTC)
# Si on a une base de calcul de taxe, c'est qu'il y a une formule
Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
WANC_CLCAMT1=[M:SIH4]CLCAMT1(NOL) : WANC_CLCAMT2=[M:SIH4]CLCAMT2(NOL)
If [M:SIH4]CLCAMT1(NOL)<>0 | [M:SIH4]CLCAMT2(NOL)<>0
    # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
    Call ALICLCAMT([M:SIH4]ITMREF(NOL), [M:SIH4]QTY(NOL), NOL, "SIH4", [M:SIH4]CLCAMT1(NOL), [M:SIH4]CLCAMT2(NOL)) From TRTX3
Endif
# Recalcul des taxes systématique avec [M]INVDAT (au cas où le taux ait changé entre date cde et date facture)
Local Date WDATCONVPRI
WDATCONVPRI=[M:SIH0]INVDAT
If [M:SIH1]PRITYP=1
    [M:SIH4]NETPRINOT(NOL) = [M:SIH4]NETPRI(NOL)
    Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SQD]VAT,[M:SIH1]PRITYP,GSOCIETE,WDATCONVPRI,
&                    [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRIATI(NOL)) From TRTX3
Else
    [M:SIH4]NETPRIATI(NOL) = [M:SIH4]NETPRI(NOL)
    Call CLCTAXEPRIV([M:SIH4]NETPRI(NOL),[F:SQD]VAT,[M:SIH1]PRITYP,GSOCIETE,WDATCONVPRI,
&                    [M:SIH4]QTY(NOL),[M:SIH1]VACBPR,[M:SIH4]CLCAMT1(NOL),[M:SIH4]CLCAMT2(NOL),[M:SIH4]NETPRINOT(NOL)) From TRTX3
Endif
# Bug 95337

End

#########################################################################
#-----------------------------------------------------------------------
# Alimentation des masques SIH à partir de la 1ère facture pour un avoir
#-----------------------------------------------------------------------
Subprog ALISIHSIH (WINVORI)
Value Integer WINVORI  :    # Origine avoir (4 = Facture , 6 = retour)

Local  Integer  I, NBPOSTE
Local  Char     SECTION, WSVGTRSFAM(GLONADI) : # 99654
Local  Char     WSVGNUM(GLONVCR), WSVGSIVTYP(GLONTSV), WSVGGTE(GLONGTE), WSVGJOU(GLONJOU), WSVGCUR(GLONCUR)
Local Char      WSVGCNOREN (GLONADI), WSVGENTCOD(GLONGAU)
Local  Date     WSVGINVDAT, WSVGVATDAT                                : # bug 15093
Local  Char     SMESSAGE(80)  # FGR 14/12/2011 : X3SUIVI71065
Local Char      WSVGCRN(GLONCRN) # X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)

#   ---> S'il a saisi un n° avoir il faut le sauvegarder
If [M:SIH0]NUM <> "" WSVGNUM = [M:SIH0]NUM : Endif
WSVGINVDAT = [M:SIH0]INVDAT
WSVGSIVTYP = [M:SIH0]SIVTYP
WSVGGTE    = [M:SIH0]GTE
WSVGJOU    = [M:SIH0]JOU
WSVGTRSFAM = [M:SIH1]TRSFAM
WSVGCUR    = [M:SIH0]CUR
WSVGCNOREN = [M:SIH1]CNOREN
WSVGENTCOD = [M:SIH0]ENTCOD
WSVGCRN    = [M:SIH0]CRN # X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)

If dim([M:SIH2]VATDAT)>0 : WSVGVATDAT=[M:SIH2]VATDAT : Endif          : # bug 15093

nolign=1

Local Char EXCLI : EXCLI=[M:SIH0]BPCINV
Local Char EXCUR : EXCUR=[M:SIH0]CUR

[M:SIH0] = [F:SIV]
[M:SIH1] = [F:SIV]
[M:SIH2] = [F:SIV]

Call RAZ_TRANSPORT_FIELDS  # FGR 17/07/2014 : X3SUIVI91606

[M:SIH0] = [F:SIH]
[M:SIH0]CHGTYP = [F:SIH]CURTYP
[M:SIH0]IME = [F:BPC]IME
[M:SIH1] = [F:SIH]
[M:SIH1]VACBPR = [F:SIH]VAC
[M:SIH2] = [F:SIH]
#---CPO 62810 - Pb découvert lors du ttt de cette fiche
#--Le transclasse va initialiser les champs DSPTOTQTY/DSPTOTWEI/DSPTOTVOL avec les valeurs inscrite dans le SQH
#--On doit les Raz car ces champs sont mis à jour dans les ss-pros appelés par les avant et après lignes
Raz [M:SIH0]DSPTOTQTY ,[M:SIH0]DSPTOTVOL, [M:SIH0]DSPTOTWEI
#---fin 62810
If EXCLI<>[M:SIH0]BPCINV or EXCUR<>[M:SIH0]CUR
    Call NEW_SFIT ("M","SIH2",[M:SIH0]CUR,[M:SIH0]BPCINV,[M:SIH1]BPCORD,[M:SIH0]INVDAT) From SUBSFIT
Endif

#--CPO 71065 Code affaire avoir sur retour
If WINVORI=6
  [M:SIH1]PJT = [F:SRH]PJT
Endif
#--/CPO

# FGR 02/11/2011 : X3SUIVI71065 (début)
If func TRTPJT.IS_PJT_AVAILABLE([M:SIH1]PJT, "[M:SIH1]PJT", SMESSAGE) = G_NON Then
  Call PJT_ADD_MSG([M:SIH1]PJT, SMESSAGE) From TRTPJT
  Raz [M:SIH1]PJT
Endif
# FGR 02/11/2011 : X3SUIVI71065 (fin)

#   Réinitialisation des zones
[M:SIH0]NUM    = WSVGNUM
[M:SIH0]INVDAT = WSVGINVDAT
[M:SIH0]SIVTYP = WSVGSIVTYP
[M:SIH0]GTE    = WSVGGTE
[M:SIH0]JOU    = WSVGJOU
[M:SIH1]TRSFAM = WSVGTRSFAM
[M:SIH0]CUR    = WSVGCUR
[M:SIH2]CUR    = WSVGCUR
[M:SIH1]CNOREN = WSVGCNOREN
[M:SIH0]ENTCOD = WSVGENTCOD
If dim([M:SIH2]VATDAT)>0 : [M:SIH2]VATDAT=WSVGVATDAT : Endif          : # bug 15093
# X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)
If [M:SIH0]CRN=""
   [M:SIH0]CRN= WSVGCRN
Endif
# End X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85133 (LCC 18/04/18)

[M:SIH0]INVTYP    = 2

Call ALI_PRTMOD("SIH0",6) From TRTX3
If [M:SIH0]COPNBE=0 [M:SIH0]COPNBE=1 Endif

#   Alimentation du nom client facture
If [F:SIV]BPINAM(0) <> "" [M:SIH0]BPINAM = [F:SIV]BPINAM(0)
                     Else [M:SIH0]BPINAM = [F:BPC]BPCNAM    : Endif
#   Alimentation du nom client commande
If [F:SIV]BPCORD <> [F:SIV]BPCINV
    If [F:BPC]BPCNUM <> [F:SIV]BPCORD
       Read [BPC]BPC0 = [F:SIV]BPCORD
       If fstat
          Raz [F:BPC] : Call RSTA("BPC",[F:SIV]BPCORD) From GLOCK
       Endif
    Endif
    [M:SIH1]BPCNAM = [F:BPC]BPCNAM
Else
    [M:SIH1]BPCNAM = [M:SIH0]BPINAM
Endif
#   Alimentation du nom client livré
If [F:BPD]BPCNUM <> [F:SIV]BPCORD | [F:BPD]BPAADD <> [F:SIV]BPAADD
   Read [BPD]BPD0 = [F:SIV]BPCORD;[F:SIV]BPAADD
   If fstat Raz [F:BPD] : Call RSTA("BPD",[F:SIV]BPCORD) From GLOCK
            Endif
Endif
If [F:SIV]BPDNAM(0) <> "" [M:SIH1]BPDNAM = [F:SIV]BPDNAM(0)
                     Else [M:SIH1]BPDNAM = [F:BPD]BPDNAM    : Endif
GBPCNUM = [F:SIV]BPCORD

Raz [M:SIH1]PIHNUM
[M:SIH1]SIHORI    = WINVORI
If WINVORI=4
    # Origine facture
    [M:SIH1]SIHORINUM = [F:SIV]NUM
    If [F:SIV]STOMVTFLG=2
        # Avec mvt de stock : Avoir avec ou sans mvt de stock : on rend le flag modifiable
        Actzo [M:SIH1]STOMVTFLG, TRSFAM
        If dim ([M:SIH1]SRGLOCDEF)>0 Actzo [M:SIH1]SRGLOCDEF : Endif
    Else
        # Sans mvt de stock : Avoir est forcément sans mvt de stock
        Diszo [M:SIH1]STOMVTFLG, TRSFAM
        If dim ([M:SIH1]SRGLOCDEF)>0 Diszo [M:SIH1]SRGLOCDEF : Endif
    Endif
Else
    # Origine retour
    [M:SIH1]SIHORINUM = [F:SRH]SRHNUM
    [M:SIH1]STOMVTFLG = 2
    Diszo [M:SIH1]STOMVTFLG
    Actzo [M:SIH1]TRSFAM
    If dim ([M:SIH1]SRGLOCDEF)>0 Actzo [M:SIH1]SRGLOCDEF : Endif
Endif
[M:SIH1]SIHORIDAT = [F:SIV]INVDAT
[M:SIH1]INVSTA    = 1 : [M:SIH1]STARPT = 1
[M:SIH2]STRDUDDAT = [M:SIH0]INVDAT
#Raz [M:SIH2]PTE

#   Alimentation régime et nature CEE
#If dim([M]EECSCH)>0
#   If [M:SIH1]STOMVTFLG = 1
#      [M]EECSCH = "25"
#   Elsif find([M]EECNAT,"041","042","043","051","052","053","40","50")
#      [M]EECSCH = "19"
#   Else
#      [M]EECSCH = "11"
#   Endif
#Endif

# init. du tableau des éléments de facturation
# Determination type facture : Directe, Cde, Livraison
NBPOSTE=dim([M:SIH2]INVDTA)
Call SAISFOOT (8,"SIH2",NBPOSTE,[M:SIH0]CHGTYP,[M:SIH2]CUR,
&              [M:SIH2]CUR,"NON") From SUBSFIT
[M:SIH2]NBFAC = NBPOSTE

If [F:SIH]CUR <> [M:SIH0]CUR & [M:SIH2]NBFAC <> 0
    # --> Recalcul de l'en-cours et de l'en-cours autorise et des montants de facturation
    Call CONVERT_MONTANT ([M:SIH0]CUR,[F:SIH]CUR, [M:SIH2]CURTYP) From SUBSIHB
#    # --> Chargement du cours devise et du cours reporting
#    Call COURSITE([M]CUR,GFCY,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATCUR,I)   From TRTDEV
#    Call COURDEV([M]CUR,GSYSCUR,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATRPT,I) From TRTDIV
#    # --> Chargement zones devises
#    Call SET_FLGDEV([M]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#    Gosub CHARG_ZONES_DEV From SUBSIHB
#    Gosub INIT_COURS      From SUBSIHB
    #----- Chargement zones devises et cours -----#
    Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS
Else
#    # --> Chargement des zones cours devise
#    Call SET_FLGDEV([M]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#    Gosub CHARG_ZONES_DEV From SUBSIHB
    #----- Chargement des zones cours devise -----#
    Call CHARG_RATCUR("SIH2","SIH") From TRTX3CPT
Endif

# --- adresse client facture
[M:ADB3]BPAADD       = [F:SIH]BPAINV
[M:ADB3]ADBBPR       = [F:SIH]BPR
[M:ADB3]BPRNAM(0)    = [F:SIH]BPRNAM(0)
[M:ADB3]BPRNAM(1)    = [F:SIH]BPRNAM(1)
[M:ADB3]BPAADDLIG(0) = [F:SIH]BPAADDLIG(0)
[M:ADB3]BPAADDLIG(1) = [F:SIH]BPAADDLIG(1)
[M:ADB3]BPAADDLIG(2) = [F:SIH]BPAADDLIG(2)
[M:ADB3]POSCOD       = [F:SIH]POSCOD
[M:ADB3]CTY          = [F:SIH]CTY
[M:ADB3]SAT          = [F:SIH]SAT
[M:ADB3]CRY          = [F:SIH]CRY
[M:ADB3]CRYNAM       = [F:SIH]CRYNAM
[M:ADB3]CNTNAM       = [F:SIV]CNINAM
#If dim([M:ADB3]EECNUM)>0 [M:ADB3]EECNUM = [F:SIV]BPIEECNUM Endif

If [M:ADB3]BPRNAM <> "" |  [M:ADB3]BPAADDLIG <> "" |
&  [M:ADB3]POSCOD <> "" |  [M:ADB3]CTY <> "" |
&  [M:ADB3]SAT    <> "" |
&  [M:ADB3]CRY    <> "" |  [M:ADB3]CRYNAM <> ""
    [M:ADB3]ADBFLG = 3
Else
    [M:ADB3]ADBFLG = 0
Endif

# --- adresse livraison
[M:ADB2]ADBBPR       = [F:SIV]BPCORD
[M:ADB2]BPRNAM(0)    = [F:SIV]BPDNAM(0)
[M:ADB2]BPRNAM(1)    = [F:SIV]BPDNAM(1)
[M:ADB2]BPAADDLIG(0) = [F:SIV]BPDADDLIG(0)
[M:ADB2]BPAADDLIG(1) = [F:SIV]BPDADDLIG(1)
[M:ADB2]BPAADDLIG(2) = [F:SIV]BPDADDLIG(2)
[M:ADB2]POSCOD       = [F:SIV]BPDPOSCOD
[M:ADB2]CTY          = [F:SIV]BPDCTY
[M:ADB2]SAT          = [F:SIV]BPDSAT
[M:ADB2]CRY          = [F:SIV]BPDCRY
[M:ADB2]CRYNAM       = [F:SIV]BPDCRYNAM
[M:ADB2]CNTNAM       = [F:SIV]CNDNAM

If [M:ADB2]BPRNAM <> "" |  [M:ADB2]BPAADDLIG <> "" |
&  [M:ADB2]POSCOD <> "" |  [M:ADB2]CTY <> "" |
&  [M:ADB2]SAT    <> "" |
&  [M:ADB2]CRY    <> "" |  [M:ADB2]CRYNAM <> ""
    [M:ADB2]ADBFLG = 3
Else
    [M:ADB2]ADBFLG = 0
Endif

If func AFNC.ACTIV("LTA") and dim([M:ADB2]ADRVAL) > 0 #LTA.sn
  [M:ADB2]ADRVAL = [F:SIV]ADRVAL
Endif                                                 #LTA.en

# Le client facturé a t'il un no d'identification CEE
GETATCEE=2
If [F:BPR]BPRNUM <> [F:SIV]BPCINV
    Read [BPR]BPR0=[F:SIV]BPCINV
    If fstat GETATCEE=1 Endif
Endif
If [F:BPR]EECNUM="" GETATCEE=1 Endif

# Duplication des textes de la facture
#Local Integer WRET

# X3-97895 Invoice text in credit memo. (LCC- 03/07/18)
# Repositioning on invoice customer of the credit memo
If [F:BPC]BPCNUM<>[M:SIH0]BPCINV
  Read [BPC]BPC0=[M:SIH0]BPCINV
  If fstat
    Raz [F:BPC] : Call RSTA("BPC",[M:SIH0]BPCINV) From GLOCK
  Endif
Endif
# End X3-97895 Invoice text in credit memo. (LCC- 03/07/18)

Raz [M]SIHTEX1, [M]SIHTEX2
#If WINVORI = 4 & [F:SIV]SIHTEX1 <> ""
#   If left$([F:SIV]SIHTEX1,3)="SIV"
#       [M:SIH0]SIHTEX1=[F:SIV]SIHTEX1
#       Call DUP_CLOB("SIV",[M:SIH0]SIHTEX1,WRET) From TRTX3TEX
#       If WRET<1 Raz [M:SIH0]SIHTEX1 Endif
#   Endif
#Endif
#If WINVORI = 4 & [F:SIV]SIHTEX2 <> ""
#   If left$([F:SIV]SIHTEX2,3)="SIV"
#       [M:SIH0]SIHTEX2=[F:SIV]SIHTEX2
#       Call DUP_CLOB("SIV",[M:SIH0]SIHTEX2,WRET) From TRTX3TEX
#       If WRET<1 Raz [M:SIH0]SIHTEX2 Endif
#   Endif
#Endif
#If WINVORI = 4 : # 100156 : Suivi texte client pour les avoirs sur facture et sur retour
    # ---   Suivi texte facture du client sur entete facture
    If GSALTEXINV = 1 & [F:BPC]INVTEX <> ""
       [M:SIH0]SIHTEX1 = [F:BPC]INVTEX
    Elsif GSALTEXINV = 2 & [F:BPC]INVTEX <> ""
    # ---   Suivi texte facture du client sur pied facture
       [M:SIH0]SIHTEX2 = [F:BPC]INVTEX
    Endif
#Endif          : # 100156
#X3-85540 (LCC-11/04/18) invoice text is not refreshed
If [F:BPC]INVTEX=""
  Raz [M:SIH0]SIHTEX1,[M:SIH0]SIHTEX2
Endif
#End X3-85540 (LCC-11/04/18) invoice text is not refreshed

# Chargement des sections analytiques entête de l'avoir à partir de l'entête de la facture
Call CHARG_CCEH("SIH2","NBAXE","SIH") From TRTX3CPT
# On complète les sections vides
If dim([M:SIH2]NBAXE)>0
  [M:SIH2]NBAXE=GNBDIE
  For I=1 To GNBDIE
    If [M:SIH2]CCE(I-1)=""
      [M:SIH2]DIE(I-1)=GDIE(I)
      Call INISEC(SECTION,"SIH",GDIE(I)) From SUBCDE
      [M:SIH2]CCE(I-1)=SECTION
    Endif
  Next I
Endif

End
#########################################################################
#----------------------------------------------------------------
# Alimentation des masques SIH à partir d'une ligne de facture
#----------------------------------------------------------------
Subprog ALISIDSIH (WINVORI, NOL)
Value Integer WINVORI  :    # Origine avoir (4 = Facture , 6 = retour)
Value Integer NOL

[M:SIH4] = [F:SID]

[M:SIH4]DPJT(NOL)    = [F:SID]PJT  # FGR 24/11/2011 X3SUIVI71065

If WINVORI=6
    [M:SIH4] = [F:SRD]
    [M:SIH4]DPJT(NOL)    = [F:SRD]PJT  #--CPO 71065 Code affaire avoirs sur retours
Endif

If [M]BETFCY=2 & [M]ORIFCY="" [M]ORIFCY=[F:SIV]ORIFCY : Endif

[M:SIH4]ALLTYP(NOL)  = 2
[M:SIH4]DSTOFCY(NOL) = [F:SID]STOFCY

[M:SIH4]VACITM1(NOL) = [F:SID]VACITM(0)
[M:SIH4]VACITM2(NOL) = [F:SID]VACITM(1)
[M:SIH4]VACITM3(NOL) = [F:SID]VACITM(2)
[M:SIH4]VAT1(NOL)    = [F:SID]VAT(0)
[M:SIH4]VAT2(NOL)    = [F:SID]VAT(1)
[M:SIH4]VAT3(NOL)    = [F:SID]VAT(2)

If dim([M:SIH4]TSICOD1(NOL))>0 [M:SIH4]TSICOD1(NOL)=[F:SID]TSICOD(0) Endif
If dim([M:SIH4]TSICOD2(NOL))>0 [M:SIH4]TSICOD2(NOL)=[F:SID]TSICOD(1) Endif
If dim([M:SIH4]TSICOD3(NOL))>0 [M:SIH4]TSICOD3(NOL)=[F:SID]TSICOD(2) Endif
If dim([M:SIH4]TSICOD4(NOL))>0 [M:SIH4]TSICOD4(NOL)=[F:SID]TSICOD(3) Endif
If dim([M:SIH4]TSICOD5(NOL))>0 [M:SIH4]TSICOD5(NOL)=[F:SID]TSICOD(4) Endif

[M:SIH4]XSERMGTCOD(NOL) = [F:ITM]SERMGTCOD

[M:SIH4]XSIHORINUM(NOL) = [F:SID]NUM
[M:SIH4]SIDORILIN(NOL)  = [F:SID]SIDLIN
Raz [M:SIH4]SIDLIN(NOL), [M:SIH4]ORILIN(NOL)

[M:SIH4]YQTY(NOL)       = [M:SIH4]QTY(NOL)
[M:SIH4]YQTYSTU(NOL)    = [M:SIH4]QTYSTU(NOL)
# Chargement de la quantité pour calcul de qté en nomenclature
[M:SIH4]CQTY(NOL)       = [M:SIH4]QTY(NOL)

# Positionnement flag stock maj
#If WINVORI=4
#    If [M:SIH1]STOMVTFLG=2 & [M:SIH4]STOMGTCOD(NOL)<>1
#       [M:SIH4]RTNSTOUPD(NOL) = 1
#    Else
#       [M:SIH4]RTNSTOUPD(NOL) = 2
#    Endif
#Else
#    [M:SIH4]RTNSTOUPD(NOL) = 2
#Endif

If WINVORI=4         : # Avoir sur Facture
    If [M:SIH1]STOMVTFLG=2 & [M:SIH4]STOMGTCOD(NOL)<>1 &
&      (find([F:SIV]SIHORI,1,2) | ([F:SIV]SIHORI=3 & [F:SID]SDHNUM=""))
        # Avec mise à jour des stocks
        # Facture directe ou Facture de commande ou Facture de livraison et ligne directe
       [M:SIH4]WSTOFLG(NOL)   = 0
       [M:SIH4]RTNSTOUPD(NOL) = 2
    Else
        # Sinon Sans mise à jour des stocks
       [M:SIH4]WSTOFLG(NOL)   = 2 : # Article non géré en stock
       [M:SIH4]RTNSTOUPD(NOL) = 1
    Endif
Else                 : # Avoir sur retour : Sans mise à jour des stocks
    [M:SIH4]WSTOFLG(NOL)   = 2 : # Article non géré en stock
    [M:SIH4]RTNSTOUPD(NOL) = 1
Endif

Raz [M:SIH4]SOHNUM(NOL), [M:SIH4]SOPLIN(NOL), [M:SIH4]SOQSEQ(NOL)
Raz [M:SIH4]SDHNUM(NOL), [M:SIH4]SDDLIN(NOL)
Raz [M:SIH4]YINVQTY(NOL)
Raz [M:SIH4]YALLQTY(NOL)
Raz [M:SIH4]CREFLG(NOL)
Raz [M:SIH4]SIDLIN(NOL)

# Chargement sections analytiques
If WINVORI=4
    Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                        "SID",0,[F:SID]NUM,[F:SID]SIDLIN,0,"") From TRTX3CPT
Else
    Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                        "SRD",0,[F:SRD]SRHNUM,[F:SRD]SRDLIN,0,"") From TRTX3CPT
Endif
# Initialisation des sections analytiques vides
Local Integer I
Local Char    SECTION
For I=1 To GNBDIE
    If evalue("dim([M:SIH4]CCE"+num$(I)+"(NOL))") >0 & evalue("[M:SIH4]CCE"+num$(I)+"(NOL)")=""
        Call INISEC(SECTION, "SID", I) From TRTX3CPT
        Assign "[M:SIH4]CCE"+num$(I)+"(NOL)" With SECTION
    Endif
Next

# Récupération des prix de la facture et non du retour (qui viennent de la livraison)
# car le prix a pu être modifié sur la facture
[M:SIH4]NETPRI(NOL)     = [F:SID]NETPRI
[M:SIH4]NETPRINOT(NOL)  = [F:SID]NETPRINOT
[M:SIH4]NETPRIATI(NOL)  = [F:SID]NETPRIATI

If WINVORI=6 & ([F:SRD]SAU<>[F:SID]SAU | [F:SRD]SAUSTUCOE<>[F:SID]SAUSTUCOE)
    # -------------------------------------------------------- #
    # Convertion des prix si l'unité ou le coef sont différent #
    # -------------------------------------------------------- #
    Local Decimal WGROPRI
    # --> Calcul des montants de base calcul de taxe
    Call ALICLCAMT([M:SIH4]ITMREF(NOL), [M:SIH4]QTY(NOL), NOL, "SIH4", [M:SIH4]CLCAMT1(NOL), [M:SIH4]CLCAMT2(NOL)) From TRTX3
    # --> Conversion du prix brut
    WGROPRI=([M:SIH4]GROPRI(NOL)/[F:SID]SAUSTUCOE)*[M:SIH4]SAUSTUCOE(NOL)
    WGROPRI=arr(WGROPRI,10^-GDECPRI)
    [M:SIH4]GROPRI(NOL)=WGROPRI
    # --> Conversion des frais/remises
    Local Integer I
    Local Decimal MAJREM(0..8), NETPRI, QTY

    For I=1 To 9
       If evalue("dim([M:SIH4]DISCRGVAL"+num$(I)+"(NOL))")>0
          MAJREM(I-1)=evalue("[M:SIH4]DISCRGVAL"+num$(I)+"(NOL)")
       Endif
    Next I
    Call CNVREM(1,"", MAJREM,[M:SIH2]CUR,[F:SID]SAUSTUCOE,[M:SIH4]SAUSTUCOE(NOL))
    Raz GMESSAGE
    For I=1 To 9
       If evalue("dim([M:SIH4]DISCRGVAL"+num$(I)+"(NOL))")>0
          Assign ("[M:SIH4]DISCRGVAL"+num$(I)+"(NOL)") With MAJREM(I-1)
       Endif
    Next I

    # --> Calcul du prix net
    Call CLCNETPRI([M:SIH4]QTY(NOL), [M:SIH2]CUR, NOL) From TRTVENPRI
    # --> Recalcul du prix de revient et de la marge
    Call CLCPFM([M:SIH4]DSTOFCY(NOL), [M:SIH1]PRITYP,[M:SIH0]CHGTYP, [M:SIH0]INVDAT, [M:SIH2]CUR, NOL,2) From TRTVENPRI
    [M:SIH4]AMTNOTLIN(NOL)=[M:SIH4]QTY(NOL)*[M:SIH4]NETPRINOT(NOL)
    [M:SIH4]AMTATILIN(NOL)=[M:SIH4]QTY(NOL)*[M:SIH4]NETPRIATI(NOL)
Elsif WINVORI=6
    #   --> Calcul des montants de base calcul de taxe
    Call ALICLCAMT([M]ITMREF(NOL), [M]QTY(NOL), NOL, "SIH4", [M]CLCAMT1(NOL), [M]CLCAMT2(NOL)) From TRTX3
    #   --> Calcul de la marge
    # 03/09 : Pas de recalcul du prix de revient, on garde celui de la livraison
    Call CLCPFM([M]DSTOFCY(NOL), [M]PRITYP, [M]CHGTYP, [M:SIH0]INVDAT, [M:SIH2]CUR, NOL, 0) From TRTVENPRI
Endif

If WINVORI=4
# --- Il y a un texte sur la facture = Duplication
# A SUPPRIMER
#    Local Integer WRETOUR
#    Local Char    WNUMTEX (12)
#    If [M:SIH4]SIDTEX (NOL) <> ""
#        WRETOUR = 0
#        WNUMTEX = [M:SIH4]SIDTEX (NOL)
#        #--- dupli texte ligne ---#
#        Call TEX(5,"SID1","","","",WNUMTEX,"X",WRETOUR) From TRTX3TEX
#        If WRETOUR <> 99  [M:SIH4]SIDTEX (NOL) = WNUMTEX : Endif
#    Endif
    Local Integer WRET
    If left$([M:SIH4]SIDTEX(NOL),3)="SID"
        Call DUP_CLOB("SID",[M:SIH4]SIDTEX(NOL),WRET) From TRTX3TEX
        If WRET<1 Raz [M:SIH4]SIDTEX(NOL) Endif
    Endif
#VPO 17/04/09 45668 ne pas recup le texte de la ligne de facture sur la creation d'un avoir
Elsif WINVORI=6
    If left$([M:SIH4]SIDTEX(NOL),3)="SID"
        Raz [M:SIH4]SIDTEX(NOL)
    Endif
Endif

# CPO 31/07/2008 Pour la DEB
If dim([M:SIH4]EECFLOPHY)>0
    [M:SIH4]EECFLOPHY(NOL) = func INIT_EECFLOPHY([F:ITM]EECGES,[M:SIH1]STOMVTFLG)
Endif
# fin CPO

GPOINT="ALISIDSIH" : Gosub ENTREE From EXEFNC

End
#############################################################################
# Subprog CNVREM (PARTNER,STRUCTURE,MAJREM,CUR,ANCCOEF,NVXCOEF)             #
#---------------------------------------------------------------------------#
# Conversion frais/remises d'une unité vers une autre en fct d'un coef      #
#---------------------------------------------------------------------------#
#  PARTNER   = 1 (client) / 2 (fournisseur)                                 #
#  STRUCTURE = Code structure de PRICSTRUCT                                 #
#  MAJREM    = Majoration/Remises (en % ou montant/en cumul ou cascade      #
#  CUR       = Devise pour arrondir le prix calcule  (pas besoin)           #
#              tant pis on la passe quand même                              #
#  ANCCOEF   = Ancien  coefficient de Conversion                            #
#  NVXCOEF   = Nouveau coefficient de Conversion                            #
#---------------------------------------------------------------------------#
# Utilisé en gestion des avoirs si conversion d'une ligne de l'UV vers l'US #
#                               ou modification du coef conversion UV-US    #
# Dans ce cas : Frais/rem en montants :                                     #
#               - Si base calcul=unité             : On fait la conversion  #
#               - Si base calcul=Ligne ou Document : On remet à 0           #
#               Frais/rem en %        :                                     #
#               - Si base calcul=unité             : On conserve le %       #
#############################################################################
Subprog CNVREM (PARTNER,STRUCTURE,MAJREM,CUR,ANCCOEF,NVXCOEF)
Value    Integer PARTNER
Value    Char    STRUCTURE
Variable Decimal MAJREM(0..8)
Value    Char    CUR
Value    Decimal ANCCOEF, NVXCOEF
#
Local    Decimal WREM(0..8) : Raz WREM
Local    Integer I
Local    Char    WFMT (50)  : # Arrondi : Format sous forme 12.4#
Local    Decimal WRND       : # Arrondi : Code arrondi pour instruction arr

If clalev ([F:PRS])<=0 : Local File PRICSTRUCT [PRS] : Endif
Read [PRS]PRS0=PARTNER;STRUCTURE
If fstat End Endif
#-----------------------------------------------------------
# Constitution de l'arrondi en fonction d'un format
#-----------------------------------------------------------
# WFMT = Format sous la forme 12.4#
# WRND = Arrondi sous la forme 0.0001 (pour instruction arr)
#-----------------------------------------------------------
If clalev([F:TCU])<=0 : Local File TABCUR [TCU] : Endif
If CUR<>[F:TCU]CUR
    Read [TCU]TCU0=CUR
    If fstat Raz [F:TCU] Endif
Endif
WFMT=[F:TCU]CURFMT2
WRND=min([F:TCU]CURRND,10^-(mod(val(WFMT),1)*10))

# Conversion des frais/rem en montant
For I = 0 To 8
   #Fq74566-Gbn-Suppresion de la condition prix net.
   #If [F:PRS]NPRNOTFLG(I) = 2       : # Prise en compte pour le prix net
        If [F:PRS]VALTYP(I) = 1      : # Montant
            If [F:PRS]CLCRUL(I) = 1  : # Par unité
                MAJREM(I)=(MAJREM(I)/ANCCOEF)*NVXCOEF
                MAJREM(I)=arr(MAJREM(I),WRND)
            Else                     : # Par ligne ou par document
                If MAJREM(I)<>0 GMESSAGE=mess(160,191,1) : Endif
                Raz MAJREM(I)
            Endif
        Else                         : # % (c'est forcément par unité donc on garde)
            MAJREM(I)=MAJREM(I)
        Endif
   #Endif
Next I
End
#########################################################################
#------------------------------------------------------------
# Alimentation des masques SIH à partir du 1èr retour direct
#------------------------------------------------------------
Subprog ALISRHSIH (WBPCINV)
Value Char WBPCINV

Local  Integer  WOK, NBPOSTE, CDTSTA, I
Local  Char     SECTION
Local  Char     WSALFCY(GLONFCY), WSVGTRSFAM(GLONADI), WSVGENTCOD(GLONGAU) : # 99654
Local  Char     CODCPT(GLONCAC)
Local  Char     SMESSAGE(80)      :#--CPO 71065 Code affaire avoirs sur retours
Local Char      WBPAPYR (GLONBPA) :#--CPO 79024 Init adresses sur picking retour direct

If clalev([F:BPA]) = 0 Local File BPADDRESS  [BPA] : Endif :#--CPO 79024
Local File BPCUSTOMER  [BPCC] :#--CPO 84018
# ---------------------------------------------------------------------------- #
# Retour direct : On alimente tout depuis le client facture de la fiche client #
# ---------------------------------------------------------------------------- #

WSALFCY    = [M:SIH0]SALFCY
WSVGTRSFAM = [M:SIH1]TRSFAM
WSVGENTCOD = [M:SIH0]ENTCOD

[M:SIH0] = [F:SRH]
[M:SIH1] = [F:SRH]
[M:SIH2] = [F:SRH]
#---CPO 62810 - Pb découvert lors du ttt de cette fiche
#--Le transclasse va initialiser les champs DSPTOTQTY/DSPTOTWEI/DSPTOTVOL avec les valeurs inscrite dans le SQH
#--On doit les Raz car ces champs sont mis à jour dans les ss-pros appelés par les avant et après lignes
Raz [M:SIH0]DSPTOTQTY ,[M:SIH0]DSPTOTVOL, [M:SIH0]DSPTOTWEI
#---fin 62810
GBPCNUM  = [F:SRH]BPCORD

If [M:SIH0]SALFCY = "" [M:SIH0]SALFCY=WSALFCY : Endif

#--CPO 71065 Code affaire à la ligne
If func TRTPJT.IS_PJT_AVAILABLE([M:SIH1]PJT, "[M:SIH1]PJT", SMESSAGE) = G_NON Then
  Call PJT_ADD_MSG([M:SIH1]PJT, SMESSAGE) From TRTPJT
  Raz [M:SIH1]PJT
Endif
#--/CPO

[M:SIH0]BPCINV=WBPCINV

[M:SIH1]TRSFAM = WSVGTRSFAM
[M:SIH0]ENTCOD = WSVGENTCOD

[M:SIH1]SIHORI    = 6
[M:SIH1]SIHORINUM = [F:SRH]SRHNUM

[M:SIH1]STOMVTFLG = 2
Diszo [M:SIH1]STOMVTFLG
[M:SIH1]INVSTA    = 1 : [M:SIH1]STARPT = 1
[M:SIH2]STRDUDDAT = [M:SIH0]INVDAT

Call ALI_PRTMOD("SIH0",6) From TRTX3
If [M:SIH0]COPNBE=0 [M:SIH0]COPNBE=1 Endif

[M:SIH0]BPINAM = [F:BPC]BPCNAM(0)
[M:SIH0]CHGTYP = [F:BPC]CHGTYP

[M:SIH2]CURTYP = [M:SIH0]CHGTYP

[M:SIH1]PRITYP = [F:BPC]PRITYP
[M:SIH1]BPCNAM = [F:BPC]BPCNAM(0)
[M:SIH1]BPRPAY = [F:BPC]BPCPYR
[M:SIH1]BPCGRU = [F:BPC]BPCGRU
[M:SIH0]IME    = [F:BPC]IME
#[M:SIH0]BPAINV = [F:BPC]BPAINV

# Initialisation des escomptes et agios
Call INIT_ESCOMPTE([F:BPC]BPCNUM, GSOCIETE, "C", [M:SIH2]DEP) From CPTSUB

# Initialisation du code condition de paiement
Call INIPTE ([F:BPC]BPCPYR, [F:BPC]BPCNUM, "C", [M]PTE) From TRTX3

Local Char WREP(GLONREP)(0..1) : WREP(0)=[F:BPC]REP(0) : WREP(1)=[F:BPC]REP(1)
# Alimentation adresse facture
Raz [M:SIH0]BPAINV
# Lecture du client cde
# Si client cde <> client en ligne (client fac de l'avoir)
If GBPCNUM<>[F:BPC]BPCNUM
   Read [BPC]BPC0=GBPCNUM
   If !fstat
       WREP(0)=[F:BPC]REP(0) : WREP(1)=[F:BPC]REP(1)
       #-- CPO 79024 Alimentation du tiers payeur et cl groupe aussi
       #-- On alimente ces valeurs depuis le paramétrage du client commande
       [M:SIH1]BPRPAY = [F:BPC]BPCPYR : [L]WBPAPYR = [F:BPC]BPAPYR
       [M:SIH1]BPCGRU = [F:BPC]BPCGRU
       #[M:SIH2]BPRFCT = [F:BPC]FCTNUM                                 : # 85199
       If dim([M:SIH2]BPRFCT) > 0 [M:SIH2]BPRFCT = [F:BPC]FCTNUM Endif : # 85199
       #--/CPO
       # Si client fac de l'avoir = client fac du client cde de l'avoir
       If [M:SIH0]BPCINV=[F:BPC]BPCINV
          [M:SIH0]BPAINV = [F:BPC]BPAINV
          #--CPO 79024 Si la condition n'est pas remplie on risque de ne pas entrer dans le if
          #--et du coup ne pas repositionner le [BPC] sur le client fact de l'avoir) !!
          #-- Déplacé en dehors du if
          ## Repositionnement sur client facture de l'avoir
          #Read [BPC]BPC0=[M:SIH0]BPCINV
          #--/CPO
       Endif
       #-- CPO 79024 Déplacé içi
       # Repositionnement sur client facture de l'avoir
       Read [BPC]BPC0=[M:SIH0]BPCINV
       #--/CPO
   Endif
Else
  [L]WBPAPYR = [F:BPC]BPAPYR  # FGR 07/02/2013 : X3SUIVI87255 : ça manque un peu quand tout est sur le même
Endif

If [M:SIH0]BPAINV=""
   # Si client fac de l'avoir = client fac du client fac de l'avoir
   If [M:SIH0]BPCINV = [F:BPC]BPCINV
      [M:SIH0]BPAINV = [F:BPC]BPAINV
   Else
      If [F:BPR]BPRNUM <> [M:SIH0]BPCINV Read [BPR]BPR0 = [M:SIH0]BPCINV Endif
      [M:SIH0]BPAINV    = [F:BPR]BPAADD
   Endif
Endif
#  Alimentation code adresse client facture dans [M:ADB3]
If dim([M:ADB3]BPAADD) > 0
    Raz [M:ADB3]
    [M:ADB3]BPAADD    = [M:SIH0]BPAINV
Endif

# alimentation des réprésentants avec les représentants du client cde
# alimentation du 1er réprésentant
If dim([M:SIH1]REP) > 0
   [M:SIH1]REP(0) = WREP(0)
Endif
# alimentation du 2eme réprésentant
If dim([M:SIH1]REP) > 1
   If [M:SIH1]REP(0) <> ""
        [M:SIH1]REP(1) = WREP(1)
   Endif
Endif
# alimentation des réprésentants avec les représentants du client livré
#  Alimentation du 1er représentant
If dim([M:SIH1]REP) > 0 & WREP(0) = ""
   [M:SIH1]REP(0) = [F:BPD]REP(0)
Endif
#  Alimentation du 2eme représentant
If dim([M:SIH1]REP) > 1
   If [M:SIH1]REP(0) <> "" & WREP(1) = ""
        [M:SIH1]REP(1) = [F:BPD]REP(1)
   Endif
Endif

If dim([M:SIH2]BPRFCT) > 0 [M:SIH2]BPRFCT = [F:BPC]FCTNUM : Endif

# ---   Suivi texte facture du client sur entete facture
If GSALTEXINV = 1 & [F:BPC]INVTEX <> ""
   [M:SIH0]SIHTEX1 = [F:BPC]INVTEX
Elsif GSALTEXINV = 2 & [F:BPC]INVTEX <> ""
# ---   Suivi texte facture du client sur pied facture
   [M:SIH0]SIHTEX2 = [F:BPC]INVTEX
Endif
#X3-85540 (LCC-11/04/18) invoice text is not refreshed
If [F:BPC]INVTEX=""
  Raz [M:SIH0]SIHTEX1,[M:SIH0]SIHTEX2
Endif
#End X3-85540 (LCC-11/04/18) invoice text is not refreshed

# JPGA : 16/06/2008 - Recherche Régime taxe s'il est renseigné dans le tiers société
Call INIT_REGIME([M:SIH0]BPCINV, GSOCIETE, "C", [M:SIH1]VACBPR) From CPTSUB

# Issue X3-129360 - 2019-03-25 by MUARN : tax rule from the return delivery address is fed
If [F:BPD]VACBPR<>"" [M:SIH1]VACBPR = [F:BPD]VACBPR Endif

[M:SIH0]LAN = GLANGUE
If [M:SIH2]CUR = "" [M:SIH2]CUR = GLOCALDEV : Endif

# Initialisation du collectif
Call INIT_COMPTE([F:BPC]BPCNUM,GSOCIETE,"C",CODCPT) From CPTSUB
Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
If [F:CAC]ACC(0)<>""
   Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
   If !fstat & [F:GAC]SAC=2
       [M:SIH2]BPRSAC = [F:GAC]ACCSHO
   Else
       [M:SIH2]BPRSAC = ""
   Endif
Endif

# Le client facturé a t'il un no d'identification CEE
GETATCEE=2
Read [BPR]BPR0 = [M:SIH0]BPCINV
If fstat = 0
   [M:SIH0]LAN = [F:BPR]LAN
#   If dim([M:ADB3]EECNUM)>0 [M:ADB3]EECNUM=[F:BPR]EECNUM Endif
Endif
If fstat | [F:BPR]EECNUM="" GETATCEE=1 Endif

[M:SIH0]CUR = [F:BPC]CUR
[M:SIH2]CUR = [M:SIH0]CUR
If dim([M:ADB3]CNTNAM)>0 Call RECH_CNTNAM([M:SIH0]BPCINV, [M:SIH0]BPAINV, [M:ADB3]CNTNAM) From TRTVENDIV : Endif

#---------------------------#
# Alimentation des adresses #
#---------------------------#
[M:ADB2]ADBBPR       = [F:SRH]BPCORD
[M:ADB2]BPAADD       = [F:SRH]BPAADD
[M:ADB2]BPRNAM(0)    = [F:SRH]BPDNAM(0)
[M:ADB2]BPRNAM(1)    = [F:SRH]BPDNAM(1)
[M:ADB2]BPAADDLIG(0) = [F:SRH]BPDADDLIG(0)
[M:ADB2]BPAADDLIG(1) = [F:SRH]BPDADDLIG(1)
[M:ADB2]BPAADDLIG(2) = [F:SRH]BPDADDLIG(2)
[M:ADB2]POSCOD       = [F:SRH]BPDPOSCOD
[M:ADB2]CTY          = [F:SRH]BPDCTY
[M:ADB2]SAT          = [F:SRH]BPDSAT
[M:ADB2]CRY          = [F:SRH]BPDCRY
[M:ADB2]CRYNAM       = [F:SRH]BPDCRYNAM
[M:ADB2]CNTNAM       = [F:SRH]CNDNAM

If [M:ADB2]BPRNAM <> "" | [M:ADB2]BPAADDLIG <> "" |
&  [M:ADB2]POSCOD <> "" | [M:ADB2]CTY <> "" |
&  [M:ADB2]SAT    <> "" |
&  [M:ADB2]CRY    <> "" | [M:ADB2]CRYNAM <> ""
    [M:ADB2]ADBFLG = 3
Else
    [M:ADB2]ADBFLG = 0
Endif

#--CPO 79024 Pas la même adresse partout
## ACA - Même adresse partout - CH07/01/2008
#[M:ADB3]=[M:ADB2]
#[M:ADI4]=[M:ADB2]
#-- Adresse de facturation
Read [BPA] BPA0=1;[M:SIH0]BPCINV;[M:SIH0]BPAINV
If fstat Raz [F:BPA] : Endif
#--CPO 84018
If [F:BPR]BPRNUM<>[M:SIH0]BPCINV
  Read [F:BPR]BPR0 = [M:SIH0]BPCINV
  If fstat : Raz [F:BPR] Endif
Endif
#--/CPO
  [M:ADB3]ADBBPR       = [M:SIH0]BPCINV
  [M:ADB3]BPAADD       = [F:BPA]BPAADD
 #[M:ADB3]BPRNAM(0)    = [F:BPC]BPCNAM    :#--CPO 84018
  [M:ADB3]BPRNAM(0)    = [F:BPR]BPRNAM(0) :# FGR 06/02/2013 : X3SUIVI87255
  [M:ADB3]BPRNAM(1)    = [F:BPR]BPRNAM(1) :#--CPO 84018 La deuxième partie de la raison se trouve sur BPARTNER
  [M:ADB3]BPAADDLIG(0) = [F:BPA]BPAADDLIG(0)
  [M:ADB3]BPAADDLIG(1) = [F:BPA]BPAADDLIG(1)
  [M:ADB3]BPAADDLIG(2) = [F:BPA]BPAADDLIG(2)
  [M:ADB3]POSCOD       = [F:BPA]POSCOD
  [M:ADB3]CTY          = [F:BPA]CTY
  [M:ADB3]SAT          = [F:BPA]SAT
  [M:ADB3]CRY          = [F:BPA]CRY
  [M:ADB3]CRYNAM       = [F:BPA]CRYNAM    # FGR 06/02/2013 : X3SUIVI87255
  Call RECH_CNTNAM([M:ADB3]ADBBPR, [M:ADB3]BPAADD, [M:ADB3]CNTNAM) From TRTVENDIV # FGR 06/02/2013 : X3SUIVI87255
If [M:ADB3]BPRNAM <> "" | [M:ADB3]BPAADDLIG <> "" |
&  [M:ADB3]POSCOD <> "" | [M:ADB3]CTY <> "" |
&  [M:ADB3]SAT    <> "" |
&  [M:ADB3]CRY    <> "" | [M:ADB3]CRYNAM <> ""
    [M:ADB3]ADBFLG = 3
Else
    [M:ADB3]ADBFLG = 0
Endif
#-- Adresse du tiers payeur
#-- CPO Init a l'adresse du tiers payeur du client commande
Local Char BPA(GLONBPA)
If [F:BPC]BPCTYP=2
  # Mais si client divers, on prend l'adresse de facturation - CH 07/01/2009
  [M:ADI4]=[M:ADB3]
Else
  Read [BPA]BPA0=1;[M:SIH1]BPRPAY;WBPAPYR
  If fstat : Raz [F:BPA] : Endif
  #--CPO 84018 Pour la raison sociale du tiers payeur
  Read [BPCC]BPC0=[M:SIH1]BPRPAY
  If fstat : Raz [F:BPCC] Endif
If [F:BPR]BPRNUM<>[M:SIH1]BPRPAY
  Read [F:BPR]BPR0 = [M:SIH1]BPRPAY
  If fstat : Raz [F:BPR] Endif
Endif
  #--/CPO
  [M:ADI4]ADBBPR       = [M:SIH1]BPRPAY
  [M:ADI4]BPAADD       = [F:BPA]BPAADD
 #[M:ADI4]BPRNAM(0)    = [F:BPCC]BPCNAM   :#--CPO 84018
  [M:ADI4]BPRNAM(0)    = [F:BPR]BPRNAM(0) :# FGR 06/02/2013 : X3SUIVI87255
  [M:ADI4]BPRNAM(1)    = [F:BPR]BPRNAM(1) :#--CPO 84018 La deuxième partie de la raison se trouve sur BPARTNER
  [M:ADI4]ADBBPR       = [F:BPA]BPANUM
  [M:ADI4]BPAADDLIG(0) = [F:BPA]BPAADDLIG(0)
  [M:ADI4]BPAADDLIG(1) = [F:BPA]BPAADDLIG(1)
  [M:ADI4]BPAADDLIG(2) = [F:BPA]BPAADDLIG(2)
  [M:ADI4]POSCOD       = [F:BPA]POSCOD
  [M:ADI4]CTY          = [F:BPA]CTY
  [M:ADI4]SAT          = [F:BPA]SAT
  [M:ADI4]CRY          = [F:BPA]CRY
  [M:ADI4]CRYNAM       = [F:BPA]CRYNAM    # FGR 06/02/2013 : X3SUIVI87255
  Call RECH_CNTNAM([M:ADI4]ADBBPR, [M:ADI4]BPAADD, [M:ADI4]CNTNAM) From TRTVENDIV # FGR 06/02/2013 : X3SUIVI87255
  #--CPO 84018
  If [F:BPR]BPRNUM<>[M:SIH0]BPCINV
    Read [F:BPR]BPR0 = [M:SIH0]BPCINV
    If fstat : Raz [F:BPR] Endif
  Endif
#--/CPO
Endif
#--/CPO

# init. du tableau des éléments de facturation
NBPOSTE = dim([M]INVDTA)
Raz [M]INVDTAAMT
# Determination type facture : Directe, Cde, Livraison
Call SAISFOOT (8,"SIH2",NBPOSTE,[M:SIH0]CHGTYP,[M:SIH2]CUR,
&              [M:SIH2]CUR,"OUI") From SUBSFIT
[M:SIH2]NBFAC = NBPOSTE
## --> Chargement du cours devise et du cours reporting
#Call COURSITE([M:SIH2]CUR,GFCY,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATCUR,I)   From TRTDEV
#Call COURDEV([M:SIH2]CUR,GSYSCUR,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATRPT,I) From TRTDIV
#Call SET_FLGDEV([M:SIH2]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#Gosub CHARG_ZONES_DEV From SUBSIHB
#Gosub INIT_COURS From SUBSIHB
#----- Chargement zones devises et cours -----#
Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS

# alimentation des codes statistiques
If dim([M]TSCCOD) <> -1
   For I = 1 To dim([M]TSCCOD)
      [M]TSCCOD(I-1) = [F:BPC]TSCCOD(I-1)
   Next I
Endif

# initialisation sections analytiques
#If dim([M]NBAXE)>0
#   For nolign=1 To GNBDIE
#       [M]DIE(nolign-1)=GDIE(nolign)
#       Call INISEC(SECTION,"SIH",GDIE(nolign)) From SUBCDE
#       [M]CCE(nolign-1) = SECTION
#   Next nolign
#Endif

Gosub NEW_REGIME  From TRTVENFACC

# Chargement des sections analytiques entête du document
Call CHARG_CCEH("SIH2","NBAXE","SRH") From TRTX3CPT
# On complète les sections vides
If dim([M:SIH2]NBAXE)>0
  [M:SIH2]NBAXE=GNBDIE
  For I=1 To GNBDIE
    If [M:SIH2]CCE(I-1)=""
      [M:SIH2]DIE(I-1)=GDIE(I)
      Call INISEC(SECTION,"SIH",GDIE(I)) From SUBCDE
      [M:SIH2]CCE(I-1)=SECTION
    Endif
  Next I
Endif

End
#########################################################################
#----------------------------------------------------------------
# Alimentation des masques SIH à partir d'une ligne de retour
#----------------------------------------------------------------
Subprog ALISRDSIH (NOL)
Value Integer NOL

Local Char    VAT(GLONVAT)(3)
Local Integer I

#   La ligne de retour est directe : il faut tout initialiser
[M:SIH4] = [F:SRD]

[M:SIH4]DPJT(NOL)    = [F:SRD]PJT  #--CPO 71065 Code affaire avoirs sur retours

If [M]BETFCY=2 & [M]ORIFCY="" [M]ORIFCY=[F:SRH]ORIFCY : Endif

Call INIT_SIH(NOL,1) From SUBSIHB
[M]LINTYP(NOL)=1
[M]FOCFLG(NOL)=1

#Call INIT_ITM(NOL,[F:SRD]ITMREF) From SUBSIHB

[M:SIH4]XSERMGTCOD(NOL) = [F:ITM]SERMGTCOD
[M:SIH4]VACITM1(NOL)  = [F:ITM]VACITM(0)
[M:SIH4]VACITM2(NOL)  = [F:ITM]VACITM(1)
[M:SIH4]VACITM3(NOL)  = [F:ITM]VACITM(2)
#Call ALITAXEV([M]VACBPR,[F:ITM]VACITM,VAT) From TRTX3
Call RECHVATCOD(1,1,[M:SIH1]BPCORD,[M:SIH4]ITMREF(NOL),"SIH4",NOL,VAT) From TRTX3
[M]VAT1(NOL)  = VAT(0)
[M]VAT2(NOL)  = VAT(1)
[M]VAT3(NOL)  = VAT(2)

If dim([M]TSICOD1(NOL))>0: [M]TSICOD1(NOL) = [F:ITM]TSICOD(0):Endif
If dim([M]TSICOD2(NOL))>0: [M]TSICOD2(NOL) = [F:ITM]TSICOD(1):Endif
If dim([M]TSICOD3(NOL))>0: [M]TSICOD3(NOL) = [F:ITM]TSICOD(2):Endif
If dim([M]TSICOD4(NOL))>0: [M]TSICOD4(NOL) = [F:ITM]TSICOD(3):Endif
If dim([M]TSICOD5(NOL))>0: [M]TSICOD5(NOL) = [F:ITM]TSICOD(4):Endif

[M]STOMGTCOD(NOL) = [F:ITM]STOMGTCOD
If [F:ITM]STOMGTCOD>1
    If [F:ITF]ITMREF<>[M:SIH4]ITMREF(NOL) | [F:ITF]STOFCY<>[M:SIH4]DSTOFCY(NOL)
        Read [ITF] ITF0=[M:SIH4]ITMREF(NOL);[M:SIH4]DSTOFCY(NOL)
        If fstat Raz [F:ITF] : Endif
    Endif
    [M]STOMGTCOD(NOL) = [F:ITF]STOMGTCOD
Endif

[M:SIH4]ALLTYP(NOL)  = 2
[M:SIH4]DSTOFCY(NOL) = [F:SRD]STOFCY

# FGR 24/11/2011 X3SUIVI71065 (début)
If dim([F:SRD]PJT) >= 0 Then
  [M:SIH4]DPJT(NOL) = [F:SRD]PJT   # FGR 24/11/2011 : X3SUIVI71065 (prévu en avance)
Endif
# FGR 24/11/2011 X3SUIVI71065 (fin)

#   --> Calcul des montants de base calcul de taxe
Call ALICLCAMT([M]ITMREF(NOL), [M]QTY(NOL), NOL, "SIH4", [M]CLCAMT1(NOL), [M]CLCAMT2(NOL)) From TRTX3
#   --> Recherche tarif
Call RECH_TARIF(1,[M]ITMREF(NOL),NOL,[M]QTY(NOL),"SIH",[M]GROPRI(NOL)) From TRTVENTAR
#   --> CALCUL du prix net
Call CLCNETPRI([M]QTY(NOL), [M:SIH2]CUR, NOL) From TRTVENPRI
#   --> Calcul de la marge
Call CLCPFM([M]DSTOFCY(NOL), [M]PRITYP, [M]CHGTYP, [M:SIH0]INVDAT, [M:SIH2]CUR, NOL, 2) From TRTVENPRI

Local Char      SECTION
Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                        "SRD",0,[F:SRD]SRHNUM,[F:SRD]SRDLIN,0,"") From TRTX3CPT
# Initialisation des sections analytiques vides
For I = 1 To GNBDIE
    If evalue("dim([M:SIH4]CCE"+num$(I)+"(NOL))") >0 & evalue("[M:SIH4]CCE"+num$(I)+"(NOL)")=""
        Call INISEC(SECTION, "SID", I) From TRTX3CPT
        Assign "[M]CCE"+num$(I)+"(NOL)" With SECTION
    Endif
    Next

[M:SIH4]XSERMGTCOD(NOL) = [F:ITM]SERMGTCOD

Raz [M:SIH4]SIDLIN(NOL), [M:SIH4]ORILIN(NOL)

[M:SIH4]YQTY(NOL)       = [M:SIH4]QTY(NOL)
[M:SIH4]YQTYSTU(NOL)    = [M:SIH4]QTYSTU(NOL)
# Chargement de la quantité pour calcul de qté en nomenclature
[M:SIH4]CQTY(NOL)       = [M:SIH4]QTY(NOL)
# Positionnement flag stock maj
[M:SIH4]RTNSTOUPD(NOL)  = 1

[M]WSTOFLG(NOL)=2 : # Article non géré en stock (tout a a été géré au niveau du retour)

Raz [M]SIDTEX(NOL)
If find(GSALTEXLIN,3,4,5)
   [M:SIH4]SIDTEX(NOL) = [F:ITU]ITSTEX
   If [M:SIH4]SIDTEX(NOL)=""
      [M:SIH4]SIDTEX(NOL) = [F:ITS]ITSTEX
   Endif
Endif

# CPO 31/07/2008 Pour la DEB
If dim([M:SIH4]EECFLOPHY)>0
    [M:SIH4]EECFLOPHY(NOL) = func INIT_EECFLOPHY([F:ITM]EECGES,[M:SIH1]STOMVTFLG)
Endif
# fin CPO

If dim([M:SIH4]SSTCOD)>0 : [M:SIH4]SSTCOD(NOL)=[F:ITM]SSTCOD : Endif #X3-49798 - JOBRO

GPOINT="ALISRDSIH" : Gosub ENTREE From EXEFNC

End
#########################################################################

# ----------------------------------------------------------------------------- #
# Alimentation de l'entête facture SIV                                          #
#                                                                               #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes   #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraison   #
# ----------------------------------------------------------------------------- #
Subprog ALISIV(INVORI, WINVDAT)
Value Integer INVORI  :    # Origine facture (1=Devis, 2=Commande, 3=Livraison, 7=Contrat)
Value Date    WINVDAT

Local Integer  WTRAIT,WTRAIT2, WCHGTYP, NBPOSTE
Local Shortint WACVREP, I, SORTIR
Local Char     WALI(3)
Local Char     SMESSAGE(80)  # FGR 14/12/2011 : X3SUIVI71065

Local Integer  WRETCTL #--CPO 71937 T757 Contrôle de cohérence

If clalev ([F:TSV]) <= 0 Local File TABSIVTYP [TSV] : Endif
If clalev ([F:FGR]) <= 0 Local File FACGROUP  [FGR] : Endif

Raz [F:SIV]
Case INVORI
 When 1 : [F:SIV] = [F:SQH]
          WCHGTYP = [F:SQH]CHGTYP
          WTRAIT  = 6
          WTRAIT2 = 9
#          [F:SIV]SIHTEX    = [F:SQH]SQHTEX
          [F:SIV]SIHORI    = 5
          [F:SIV]SIHORINUM = [F:SQH]SQHNUM
          [F:SIV]SIHORIDAT = [F:SQH]QUODAT
          [F:SIV]BPCORD    = [F:SQH]BPCORD
          [F:SIV]BPCINV    = [F:SQH]BPCORD
          [F:SIV]BPINAM(0) = [F:SQH]BPCNAM(0)
          [F:SIV]BPINAM(1) = [F:SQH]BPCNAM(1)
          If [F:BPC]BPCTYP <> 4
            [F:SIV]BPCGRU = [F:SQH]BPCORD
            [F:SIV]BPRPAY = [F:BPC]BPCPYR
          Else
          # Cas particulier des prospects
          # Pas d'alimentation du client groupe qui n'est pas obligatoire
          # Le tiers payeur étant à blanc, on peut forcer le tiers clt commande
            [F:SIV]BPRPAY = [F:SQH]BPCORD
          Endif
          [F:SIV]INVREF    = [F:SQH]CUSQUOREF
          WALI="OUI"
 When 2 : [F:SIV] = [F:SOH]
          WCHGTYP = [F:SOH]CHGTYP
          WTRAIT  = 7
          WTRAIT2 = 7
          If GINVTYP = 5 & [F:SOH]SOHCAT <> 3 WTRAIT = 6 Endif
#          [F:SIV]SIHTEX = [F:SOH]SOHTEX
#          [F:SIV]EECNAT = "011"
#          If GDEBGBR=1 [F:SIV]EECNAT="10" Endif
#          [F:SIV]EECSCH = "21"
          [F:SIV]BPAADD = [F:BPD]BPAADD
          [F:SIV]EECTRN = [F:TMD]EECTRN
#          [F:SIV]EECLOC = [F:BPD]EECLOC
#          [F:SIV]EECICT = [F:BPD]EECICT
#          [F:SIV]ICTCTY = [F:BPD]ICTCTY
#          [F:SIV]FFWNUM = [F:BPD]FFWNUM
#          [F:SIV]FFWADD = [F:BPD]FFWADD
          [F:SIV]SIHORI    = INVORI
          [F:SIV]SIHORINUM = [F:SOH]SOHNUM
          [F:SIV]SIHORIDAT = [F:SOH]ORDDAT
          [F:SIV]BPRPAY    = [F:SOH]BPCPYR
          [F:SIV]INVREF    = [F:SOH]CUSORDREF
          WALI="OUI"
 When 3 : [F:SIV] = [F:SDH]
          WCHGTYP = [F:SDH]CHGTYP
          WTRAIT  = 6
          WTRAIT2 = 6
#          [F:SIV]SIHTEX    = [F:SDH]SDHTEX
          [F:SIV]SIHORI    = INVORI
          [F:SIV]SIHORINUM = [F:SDH]SDHNUM
          [F:SIV]SIHORIDAT = [F:SDH]DLVDAT
          [F:SIV]BPRPAY    = [F:SDH]BPCPYR
          If [F:SDH]SOHNUM <> ""
              If [F:SDH]SOHNUM <> [F:SOH]SOHNUM
                  Read [SOH]SOH0 = [F:SDH]SOHNUM
                  If fstat Raz [F:SOH] Endif
              Endif
              [F:SIV]INVREF = [F:SOH]CUSORDREF
          Endif
          WALI="OUI"
 When 7 : [F:SIV] = [F:SOH]
          [F:SIV] = [F:CON]
          WCHGTYP = [F:SOH]CHGTYP
          WTRAIT  = 7
          WTRAIT2 = 7
          [F:SIV]BPCORD    = [F:CON]CONBPC
          [F:SIV]BPCINV    = [F:CON]CONBPCINV
#          [F:SIV]EECNAT = "011"
#          If GDEBGBR=1 [F:SIV]EECNAT="10" Endif
#          [F:SIV]EECSCH = "21"
          [F:SIV]EECTRN = [F:TMD]EECTRN
#          [F:SIV]EECLOC = [F:BPD]EECLOC
#          [F:SIV]EECICT = [F:BPD]EECICT
#          [F:SIV]ICTCTY = [F:BPD]ICTCTY
#          [F:SIV]FFWNUM = [F:BPD]FFWNUM
#          [F:SIV]FFWADD = [F:BPD]FFWADD
          [F:SIV]SIHORI    = INVORI
          [F:SIV]SIHORINUM = [F:CON]CONNUM
          [F:SIV]SIHORIDAT = [F:CON]NEXINVDAT
          [F:SIV]BPRPAY    = [F:SOH]BPCPYR
          [F:SIV]INVREF    = [F:SOH]CUSORDREF
          WALI="NON"
Endcase

# FGR 06/11/2011 : X3SUIVI71065 (début)
If func TRTPJT.IS_PJT_AVAILABLE([F:SIV]PJT, "[M:SIH1]PJT", SMESSAGE) = G_NON Then
  Call PJT_ADD_MSG([F:SIV]PJT, SMESSAGE) From TRTPJT
  Raz [F:SIV]PJT
Endif
# FGR 06/11/2011 : X3SUIVI71065 (fin)

Raz [F:SIV]LINNBR

If GINVTYP <> 5
   [F:SIV]INVTYP    = 1          : # facture
   [F:SIV]STOMVTFLG = 2
   If dim(GSIVTYP)<>0
     [F:SIV]SIVTYP=GSIVTYP
     #--CPO 71937 T757 Contrôle de cohérence
     #--Pour l'instant je le mets mais en commentaire
     #--Car il vaut mieux gérer la cohérence de GISVTYP depuis le [M:DIA]
     #Call LEC_TSV_LEG(GCURLEG,GSIVTYP,WRETCTL) From TRTLECLEG
     #If WRETCTL Raz [F:TSV] : Endif
     #Call CTL_ML_CONSISTENCY("TSV", "NON",[F:TSV]SIVTYP,[F:TSV]LEG,AVOID.ACHAR,GCURFCY,GCURLEG,WRETCTL,AVOID.ACHAR) From TRTVENCTL
     #If WRETCTL<>0 [F:SIV]SIVTYP="" : Endif
     #--/
   Endif
   If [F:SIV]SIVTYP=""
#      Filter [TSV] Where INVTYP=[F:SIV]INVTYP
#      Read [TSV]TSV0 First
      Link [TSV] With [FGR]FGR0=[F:TSV]GFY;GCURFCY As [KTSV]
      #-- X3suivi 71937 - T249 : Multi-Leg--#
      Filter [KTSV] Where [TSV]INVTYP = [F:SIV]INVTYP & ([TSV]GFY="" | [FGR]FCY=GCURFCY) & ([TSV]LEG="" | [TSV]LEG=GCURLEG)
&      Order By Key CLE=[F:TSV]SIVTYP Asc; [F:TSV]LEG Desc
      #--CPO 71937 T757 Contrôle de cohérence
#      Read [KTSV]TSV0 First
#      If fstat=0
#        [F:SIV]SIVTYP = [F:TSV]SIVTYP
#      Endif
      For [KTSV]CLE
        Call CTL_ML_CONSISTENCY("TSV", "NON",[F:KTSV]SIVTYP,[F:KTSV]LEG,AVOID.ACHAR,GCURFCY,GCURLEG,WRETCTL,AVOID.ACHAR) From TRTVENCTL
        If WRETCTL=0
          [F:SIV]SIVTYP = [F:TSV]SIVTYP
          Break
        Endif
      Next
      Filter [KTSV] #Filter [TSV]
      #--/
   Endif
Else
   [F:SIV]INVTYP    = 5          : # proforma
   [F:SIV]STOMVTFLG = 1
#   Filter [TSV] Where INVTYP=[F:SIV]INVTYP
#   Read [TSV]TSV0 First
   Link [TSV] With [FGR]FGR0=[F:TSV]GFY;GCURFCY As [KTSV]
   #-- X3suivi 71937 - T249 : Multi-Leg--#
   Filter [KTSV] Where [TSV]INVTYP = [F:SIV]INVTYP & ([TSV]GFY="" | [FGR]FCY=GCURFCY) & ([TSV]LEG="" | [TSV]LEG=GCURLEG)
&      Order By Key CLE=[F:TSV]SIVTYP Asc; [F:TSV]LEG Desc
   #--CPO 71937 T757 Contrôle de cohérence
#    Read [KTSV]TSV0 First
#    If fstat=0
#      [F:SIV]SIVTYP = [F:TSV]SIVTYP
#    Endif
    For [KTSV]CLE
      Call CTL_ML_CONSISTENCY("TSV", "NON",[F:KTSV]SIVTYP,[F:KTSV]LEG,AVOID.ACHAR,GCURFCY,GCURLEG,WRETCTL,AVOID.ACHAR) From TRTVENCTL
      If WRETCTL=0
        [F:SIV]SIVTYP = [F:TSV]SIVTYP
        Break
      Endif
    Next
    Filter [KTSV] #Filter [TSV]
    #--/
Endif

#--CPO 81179 On peut avoir une adresse stockée mais sans raison sociale
#--Rajout du test sur lignes adresses vides pour afiner
#If GACTSAD=2 & [F:SIV]BPDNAM(0)=""
If GACTSAD=2 & [F:SIV]BPDNAM(0)="" & [F:SIV]BPDADDLIG(0)=""
    # Stockage des adresses et pas d'adresse de livraison sur le document origine
    If [F:BPA]BPATYP<>1 | [F:BPA]BPANUM<>[F:SIV]BPCORD | [F:BPA]BPAADD<>[F:SIV]BPAADD
        Read [BPA]BPA0=1;[F:SIV]BPCORD;[F:SIV]BPAADD
        If fstat Raz [F:BPA] Endif
    Endif
    # Bug 77597
    If [F:BPD]BPCNUM<>[F:SIV]BPCORD | [F:BPD]BPAADD<>[F:SIV]BPAADD
        Read [BPD]BPD0=[F:SIV]BPCORD;[F:SIV]BPAADD
        If fstat Raz [F:BPD] Endif
    Endif
    # Bug 77597

    [F:SIV]BPDNAM(0)=[F:BPD]BPDNAM(0)
    [F:SIV]BPDNAM(1)=[F:BPD]BPDNAM(1)

    For I=0 To 2
        Assign ("[F:SIV]BPDADDLIG("+num$(I)+")") With evalue("[F:BPA]BPAADDLIG("+num$(I)+")")
    Next

    [F:SIV]BPDCRY    =[F:BPA]CRY
    [F:SIV]BPDCRYNAM =[F:BPA]CRYNAM
    [F:SIV]BPDSAT    =[F:BPA]SAT
    [F:SIV]BPDPOSCOD =[F:BPA]POSCOD
    [F:SIV]BPDCTY    =[F:BPA]CTY
Endif

[F:SIV]INVDAT    = WINVDAT
[F:SIV]INVSTA    = 1 : [F:SIV]STARPT = 1
[F:SIV]INVCNOSTA = 1
[F:SIV]LAN       = [F:BPR]LAN
[F:SIV]BPRFCT    = [F:BPC]FCTNUM

If !clalev([F:TPM]) : Local  File TABPRTMOD : Endif #Fq73266-Gbn
# Alimentation à partir du modèle d'édition
Call ALI2_PRTMOD("SIV",5) From TRTX3
#Fq73266-Gbn
If GFONCTION="FUNAUTINVO" |
&  GFONCTION="FUNAUTINVD"
 If dim([M:DIA]PRNDEN)>0 & [M:DIA]PRNDEN<>"" & [F:TPM]TPMCOD="" : [F:SIV]COPNBR=[M:DIA]PRTCOP : Endif
Endif
If [F:SIV]COPNBR=0 [F:SIV]COPNBR=1 Endif

For I= 0 To dim([F:SIV]INVDTAAMT) - 1
    Raz [F:SIV]INVDTAAMT(I)
    Raz [F:SIV]INVDTA(I)
    Raz [F:SIV]INVDTATYP(I)
Next

# -------------------> Alimentation des elements de facturation

NBPOSTE = dim([F:SIV]INVDTA)
# --> Initialisation des montants avec les valeurs par défaut et les valeurs clients
Call ALIMFOOT  (WTRAIT,NBPOSTE, WCHGTYP,[F:BPC]CUR,[F:SIV]CUR, WALI) From SUBSFIT
If INVORI <> 7
    # --> Initialisation des montants avec les commandes ou livraison
#    Call ALIMFOOT2 (WTRAIT2,NBPOSTE, WCHGTYP,[F:SIV]CUR,[F:SIV]CUR,"NON") From TRTVENELT
    Call ALIMFOOT2 (WTRAIT2,NBPOSTE, WCHGTYP,[F:SIV]CUR,[F:SIV]CUR,WALI) From SUBSFIT
Endif

Gosub CHARGETXTSIV

Raz [F:SIV]UPDDAT
Raz [F:SIV]UPDUSR
If evalue ("dim([F:SIV]CREDAT)")>0 [F:SIV]CREDAT = date$:Endif
If evalue ("dim([F:SIV]CREUSR)")>0 [F:SIV]CREUSR = GUSER:Endif
If evalue ("dim([F:SIV]EXPNUM)")>0 [F:SIV]EXPNUM = [C]EXPORT:Endif

# Initialisation Nature et Régime CEE  (test du "" si import)
#If dim([F:SIV]EECNAT)>0 : # Bug 73295
If GACTDEB=2             : # Bug 73295
   If sum([F:SIV]EECNAT,[F:SIV]EECSCH)="" and sum([F:SIV]EECNATR,[F:SIV]EECSCHR)=""
      Call INICRE_EEC("SIV",GBIDI2,[F:SIV]EECNAT,[F:SIV]EECSCH,GBIDI3,[F:SIV]EECNATR,[F:SIV]EECSCHR) From FUNDEBA
   Endif
Endif

# ACA (2009-09-15) S03 : Chargement des sections des éléments de facturation
# INUTILE car fait dans ALISIH
#If dim([F:SOH]SOHNUM)>0
#  [M:SIHX]NUM = [F:SOH]SOHNUM : [M:SIHX]VCRTYP=20
#Elsif dim([F:SQH]SQHNUM)>0
#  [M:SIHX]NUM = [F:SQH]SQHNUM : [M:SIHX]VCRTYP=1
#Elsif dim([F:SDH]SDHNUM)>0
#  [M:SIHX]NUM = [F:SDH]SDHNUM : [M:SIHX]VCRTYP=2
#Endif
#If clalev([F:CAL])=0 : Local File CPTANALIN [CAL] : Endif
#Local Integer ISJ0
#For ISJ0=0 To dim([M:SIHX]XFNUM)-1
#    If [M:SIHX]XFNUM(ISJ0)=0 : Break : Endif
#    Call CHARG_ACCCCE (ISJ0,"[M:SIHX]SFIACC","[M:SIHX]DSP","[M:SIHX]SFICCE","SVF",[M:SIHX]VCRTYP,[M:SIHX]NUM,0,[M:SIHX]XFNUM(ISJ0),"")
#&                     From TRTX3CPT
#Next ISJ0

GPOINT="ALISIV" : Gosub ENTREE From EXEFNC   : # demande 14091 du 02/05/02

End

#--------------------------------------------#
# Charge des textes entete et pied facture   #
#--------------------------------------------#
$CHARGETXTSIV
#Local Integer WRETOUR
#Local Char    WNUMTEX (12)

# ---   Suivi texte facture du client sur entete fac  : Duplication
If GSALTEXINV = 1 & [F:BPC]INVTEX <> ""
   [F:SIV]SIHTEX1 = [F:BPC]INVTEX
Elsif GSALTEXINV = 2 & [F:BPC]INVTEX <> ""
# ---   Suivi texte facture du client sur pied fac    : Duplication
   [F:SIV]SIHTEX2 = [F:BPC]INVTEX
Endif
#X3-85540 (LCC-11/04/18) invoice text is not refreshed
If [F:BPC]INVTEX=""
  Raz [M:SIH0]SIHTEX1,[M:SIH0]SIHTEX2
Endif
#End X3-85540 (LCC-11/04/18) invoice text is not refreshed
Return

# ----------------------------------------------------------------------------- #
# Alimentation de l'entête facture SIH                                          #
#                                                                               #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes   #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraison   #
# ----------------------------------------------------------------------------- #
Subprog ALISIH(INVORI,WGTE, WRET)
Value    Integer INVORI  :    # Origine facture (1=Devis, 2=Commande, 3=Livraison, 7=Contrat)
Value    Char    WGTE
Variable Integer WRET    : WRET = 0

Local Integer  I, SPSTAT
Local Char     WABR(7), SECTION
Local Decimal  COURS
Local Char     WBPCORD(GLONBPC)

Local Integer WVCRTYP                          : # 96708 : Transfert des sections analytiques des éléments de facturation
Local Char    WVCRNUM(GLONVCR)                 : # 96708
Raz [F:SIH]

Case INVORI
 When 1 : [F:SIH] = [F:SQH]
          If [F:BPC]BPCTYP <> 4
            [F:SIV]BPRPAY = [F:BPC]BPCPYR
          Else
          # Cas particulier des prospects
          # Pas d'alimentation du client groupe qui n'est pas obligatoire
          # Le tiers payeur étant à blanc, on peut forcer le tiers clt commande
            [F:SIV]BPRPAY = [F:SQH]BPCORD
          Endif
          WBPCORD = [F:SQH]BPCORD
          WABR = "[F:SQH]"
          WVCRTYP=1  : WVCRNUM=[F:SQH]SQHNUM   : # 96708 : Transfert des sections analytiques des éléments de facturation
 When 2 : [F:SIH] = [F:SOH]
          # 71214 - le SIH sera chargé par le transclasse plus bas, sinon le SIV reste vide
          #[F:SIH]BPRPAY = [F:SOH]BPCPYR
          [F:SIV]BPRPAY = [F:SOH]BPCPYR
          WBPCORD = [F:SOH]BPCORD
          WABR = "[F:SOH]"
          WVCRTYP=20 : WVCRNUM=[F:SOH]SOHNUM   : # 96708 : Transfert des sections analytiques des éléments de facturation
 When 3 : [F:SIH] = [F:SDH]
          # 71214 - le SIH sera chargé par le transclasse plus bas, sinon le SIV reste vide
          #[F:SIH]BPRPAY = [F:SDH]BPCPYR
          [F:SIV]BPRPAY = [F:SDH]BPCPYR
          WBPCORD = [F:SDH]BPCORD
          WABR = "[F:SDH]"
          WVCRTYP=2  : WVCRNUM=[F:SDH]SDHNUM   : # 96708 : Transfert des sections analytiques des éléments de facturation
 When 7 : [F:SIH] = [F:SOH]
          # 71214 - le SIH sera chargé par le transclasse plus bas, sinon le SIV reste vide
          #[F:SIH]BPRPAY = [F:SOH]BPCPYR
          [F:SIV]BPRPAY = [F:SOH]BPCPYR
          [F:SIH] = [F:CON]
          WBPCORD = [F:SOH]BPCORD
          WABR = "[F:SOH]"
Endcase

[F:SIH]=[F:SIV]
# X3-108671 (LCC 24/09/18) Field PJTH ine table SINVOICE not populated by sales invoices
If dim([F:SIH]PJTH)>0: [F:SIH]PJTH=[F:SIV]PJT: Endif
# End X3-108671

# --> Alimentation [F:SIH]
If GINVTYP <> 5
   [F:SIH]INVTYP = 1
Else
   [F:SIH]INVTYP = 5
Endif
[F:SIH]ORIMOD = 5
[F:SIH]BPR = [F:SIV]BPCINV

# 102423 : Belgium Early discounts
# Early discount rate determination
If find(GDEPMGTMOD, 1,5)
    Call ALIDISVAT (5, [F:SIH]DEP, GBIDI1, [F:SIH]DEPRAT) From SUBTDA
Endif
#  102423

$TRT_BPRSAC
# Initialisation du collectif
Local Char CODCPT(GLONCAC)
Call INIT_COMPTE([F:BPC]BPCNUM,GSOCIETE,"C",CODCPT) From CPTSUB
# 89978 : Ctrl BPRSAC mandatory (necessary for payments)
#Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
#If [F:CAC]ACC(0)<>""
#   Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
#   If !fstat & [F:GAC]SAC=2
#       [F:SIH]BPRSAC = [F:GAC]ACCSHO
#       Read [F:GAC]GAC1 = GCOA(GTYPGEN);[F:SIH]BPRSAC
#       If !fstat
#           If [F:GAC]AUZBPR(0)<>2
#               WRET=1
#               #  GMESSAGE = mess(45,106,1) : # MSG=tiers incompatible avec le collectif
#           Endif
#       Endif
#   Endif
#Endif
Call LECTURE("CAC",[L]CODCPT,"2~"+GCOA(GTYPGEN)) From CONTOBJ
If !fstat & [F:CAC]ACC(0)<>""
   #Call LECTURE("GAC",[F:CAC]ACC(0),GCOA(GTYPGEN)) From CONTOBJ
   Read [F:GAC]GAC0 = GCOA(GTYPGEN);[F:CAC]ACC(0)
   If !fstat & [F:GAC]SAC=2
       [F:SIH]BPRSAC = [F:GAC]ACCSHO
   Endif
Endif
Read [F:GAC]GAC1 = GCOA(GTYPGEN);[F:SIH]BPRSAC
If !fstat
    If [F:GAC]AUZBPR(0)<>2
         WRET=1
         #  GMESSAGE = mess(45,106,1) : # MSG=tiers incompatible avec le collectif
     Endif
Endif
# 89978
If WRET=1 End : Endif

[F:SIH]CPY = GSOCIETE
[F:SIH]FCY = [F:SIV]SALFCY
[F:SIH]GTE = WGTE
[F:SIH]ACCDAT = [F:SIV]INVDAT
[F:SIH]BPRDAT = [F:SIV]INVDAT
[F:SIH]CURTYP = evalue (WABR+"CHGTYP")

#If INVORI = 3 & [F:BPC]DUDCLC = 2 & [F:BPC]IME = 1
If INVORI = 3 & [F:BPC]DUDCLC = 2
    [F:SIH]STRDUDDAT = [F:SDH]DLVDAT
Else
    [F:SIH]STRDUDDAT = [F:SIV]INVDAT
Endif

[F:SIH]VAC = evalue (WABR+"VACBPR")

[F:SIH]DIRINVFLG = 1
[F:SIH]STA = [F:SIV]INVSTA : [F:SIH]STARPT = 1
[F:SIH]SNS = 1

# Alimentation adresse facture
Raz [F:SIH]BPAINV
# Si client cde <> client en ligne (client fac de la facture)
If WBPCORD<>[F:BPC]BPCNUM
   Read [BPC]BPC0=WBPCORD
   # Si client fac de la facture = client fac du client cde de la facture
   If !fstat
      If [F:SIH]BPR=[F:BPC]BPCINV
         [F:SIH]BPAINV = [F:BPC]BPAINV
         # Repositionnement sur client facture de la facture
         Read [BPC]BPC0=[F:SIH]BPR
      Endif
   Endif
Endif

If [F:SIH]BPAINV=""
   # Si client fac de la facture = client fac du client fac de la facture
   If [F:SIH]BPR=[F:BPC]BPCINV
      [F:SIH]BPAINV    = [F:BPC]BPAINV
   Else
      [F:SIH]BPAINV    = [F:BPC]BPAADD
   Endif
Endif

# FGR 04/02/2015 : X3SUIVI105806 (début)
  #  #--CPO 81179 On peut avoir une adresse stockée mais sans raison sociale
  #  #--Rajout du test sur lignes adresses vides pour afiner
  #  #If GACTSAD=2 & [F:SIV]BPINAM(0)=""
  #  If GACTSAD=2 & [F:SIV]BPINAM(0)="" & [F:SIH]BPAADDLIG(0)=""
  #      # Stockage des adresses et pas d'adresse de facturation sur le document d'origine
  #      If [F:BPR]BPRNUM<>[F:SIV]BPCINV
  #          Read [BPR]BPR0=[F:SIV]BPCINV
  #          If fstat Raz [F:BPR] Endif
  #      Endif
  #      [F:SIV]BPINAM(0)=[F:BPR]BPRNAM(0)
  #      [F:SIV]BPINAM(1)=[F:BPR]BPRNAM(1)
  #  #    If dim([F:SIV]BPIEECNUM)>0 [F:SIV]BPIEECNUM=[F:BPR]EECNUM : Endif
  #
  #      If [F:BPA]BPATYP<>1 | [F:BPA]BPANUM<>[F:SIV]BPCINV | [F:BPA]BPAADD<>[F:SIH]BPAINV
  #          Read [BPA]BPA0=1;[F:SIV]BPCINV;[F:SIH]BPAINV
  #          If fstat Raz [F:BPA] Endif
  #      Endif
  #
  #      For I=0 To 2
  #          Assign ("[F:SIH]BPAADDLIG("+num$(I)+")") With evalue("[F:BPA]BPAADDLIG("+num$(I)+")")
  #      Next
  #
  #      [F:SIH]POSCOD = [F:BPA]POSCOD
  #      [F:SIH]CTY    = [F:BPA]CTY
  #      [F:SIH]SAT    = [F:BPA]SAT
  #      [F:SIH]CRY    = [F:BPA]CRY
  #      [F:SIH]CRYNAM = [F:BPA]CRYNAM
  #  Elsif INVORI = 1 : # DEVIS
  #      [F:SIH]BPAINV        = evalue (WABR+"BPAORD")
  #      [F:SIH]BPAADDLIG(0)  = evalue (WABR+"BPCADDLIG(0)")
  #      [F:SIH]BPAADDLIG(1)  = evalue (WABR+"BPCADDLIG(1)")
  #      [F:SIH]BPAADDLIG(2)  = evalue (WABR+"BPCADDLIG(2)")
  #      [F:SIH]POSCOD        = evalue (WABR+"BPCPOSCOD")
  #      [F:SIH]CTY           = evalue (WABR+"BPCCTY")
  #      [F:SIH]SAT           = evalue (WABR+"BPCSAT")
  #      [F:SIH]CRY           = evalue (WABR+"BPCCRY")
  #      [F:SIH]CRYNAM        = evalue (WABR+"BPCCRYNAM")
  #  Else
  #      [F:SIH]BPAINV        = evalue (WABR+"BPAINV")
  #      [F:SIH]BPAADDLIG(0)  = evalue (WABR+"BPIADDLIG(0)")
  #      [F:SIH]BPAADDLIG(1)  = evalue (WABR+"BPIADDLIG(1)")
  #      [F:SIH]BPAADDLIG(2)  = evalue (WABR+"BPIADDLIG(2)")
  #      [F:SIH]POSCOD        = evalue (WABR+"BPIPOSCOD")
  #      [F:SIH]CTY           = evalue (WABR+"BPICTY")
  #      [F:SIH]SAT           = evalue (WABR+"BPISAT")
  #      [F:SIH]CRY           = evalue (WABR+"BPICRY")
  #      [F:SIH]CRYNAM        = evalue (WABR+"BPICRYNAM")
  #  Endif
  # note FGR : Ce qui est susceptible d'arriver des pièces d'origine est prioritaire.
  If INVORI = 1 : # DEVIS
    [F:SIH]BPAINV        = evalue (WABR+"BPAORD")
    [F:SIH]BPAADDLIG(0)  = evalue (WABR+"BPCADDLIG(0)")
    [F:SIH]BPAADDLIG(1)  = evalue (WABR+"BPCADDLIG(1)")
    [F:SIH]BPAADDLIG(2)  = evalue (WABR+"BPCADDLIG(2)")
    [F:SIH]POSCOD        = evalue (WABR+"BPCPOSCOD")
    [F:SIH]CTY           = evalue (WABR+"BPCCTY")
    [F:SIH]SAT           = evalue (WABR+"BPCSAT")
    [F:SIH]CRY           = evalue (WABR+"BPCCRY")
    [F:SIH]CRYNAM        = evalue (WABR+"BPCCRYNAM")
  Else
    [F:SIH]BPAINV        = evalue (WABR+"BPAINV")
    [F:SIH]BPAADDLIG(0)  = evalue (WABR+"BPIADDLIG(0)")
    [F:SIH]BPAADDLIG(1)  = evalue (WABR+"BPIADDLIG(1)")
    [F:SIH]BPAADDLIG(2)  = evalue (WABR+"BPIADDLIG(2)")
    [F:SIH]POSCOD        = evalue (WABR+"BPIPOSCOD")
    [F:SIH]CTY           = evalue (WABR+"BPICTY")
    [F:SIH]SAT           = evalue (WABR+"BPISAT")
    [F:SIH]CRY           = evalue (WABR+"BPICRY")
    [F:SIH]CRYNAM        = evalue (WABR+"BPICRYNAM")
  Endif
  If GACTSAD=2 & [F:SIV]BPINAM(0)="" & [F:SIH]BPAADDLIG(0)=""
    # Stockage des adresses et pas d'adresse de facturation sur le document d'origine
    If [F:BPR]BPRNUM<>[F:SIV]BPCINV
      Read [BPR]BPR0=[F:SIV]BPCINV
      If fstat Raz [F:BPR] Endif
    Endif
    [F:SIV]BPINAM(0)=[F:BPR]BPRNAM(0)
    [F:SIV]BPINAM(1)=[F:BPR]BPRNAM(1)
    If [F:BPA]BPATYP<>1 | [F:BPA]BPANUM<>[F:SIV]BPCINV | [F:BPA]BPAADD<>[F:SIH]BPAINV
      Read [BPA]BPA0=1;[F:SIV]BPCINV;[F:SIH]BPAINV
      If fstat Raz [F:BPA] Endif
    Endif
    For I=0 To 2
      Assign ("[F:SIH]BPAADDLIG("+num$(I)+")") With evalue("[F:BPA]BPAADDLIG("+num$(I)+")")
    Next
    [F:SIH]POSCOD = [F:BPA]POSCOD
    [F:SIH]CTY    = [F:BPA]CTY
    [F:SIH]SAT    = [F:BPA]SAT
    [F:SIH]CRY    = [F:BPA]CRY
    [F:SIH]CRYNAM = [F:BPA]CRYNAM
  Endif
# FGR 04/02/2015 : X3SUIVI105806 (fin)

[F:SIH]BPRNAM(0) = [F:SIV]BPINAM(0)
[F:SIH]BPRNAM(1) = [F:SIV]BPINAM(1)

# ACA - Adresse Tiers Payeur
# CH 13/01/2009 : On considère que si le client est divers, le tiers payeur est divers,
# et inversement, si le client est déterminé, le tiers payeur l'est également
# [f:bpc] déjà positionné correctement

Local Char BPA(GLONBPA)     :# CPO 71214
Local Char SAVEBPR(GLONBPR) :# CPO 71214

If [F:BPC]BPCTYP=2 # Si divers -> adresse fac
    [F:SIH]BPAPAY       = [F:SIH]BPAINV       :# 71214 L'adresse du tiers payeur = adresse cl facturé
    [F:SIH]BPYNAM(0)    = [F:SIH]BPRNAM(0)
    [F:SIH]BPYNAM(1)    = [F:SIH]BPRNAM(1)
    [F:SIH]BPYADDLIG(0) = [F:SIH]BPAADDLIG(0)
    [F:SIH]BPYADDLIG(1) = [F:SIH]BPAADDLIG(1)
    [F:SIH]BPYADDLIG(2) = [F:SIH]BPAADDLIG(2)
    [F:SIH]BPYPOSCOD    = [F:SIH]POSCOD
    [F:SIH]BPYCTY       = [F:SIH]CTY
    [F:SIH]BPYSAT       = [F:SIH]SAT
    [F:SIH]BPYCRY       = [F:SIH]CRY
    [F:SIH]BPYCRYNAM    = [F:SIH]CRYNAM
Else # Sinon (tiers normal)
    # CPO 71214   Au début de ALISIH on alimente le BPRPAY
    # CPO : Ici on doit alimenter l'adresse du tiers payeur par l'adresse de BPRPAY
    ##Adresse facture - Init à l'adresse par défaut du tiers
    #Read [BPA]BPA0=1;[BPR]BPRNUM;[F:BPR]BPAADD
    #If fstat : Raz [F:BPA] : Endif
    # CPO : dans le cas des commandes, l'adresse du tiers payeur y est stockée ([SOH]BPAPYR)
    SAVEBPR = "empty"                             # FGR 20/01/2015 : X3SUIVI105498
    If INVORI=2 :# Commandes
      BPA=[F:SOH]BPAPYR
    Else
      If [F:SIH]BPRPAY=[F:BPC]BPCPYR
        BPA=[F:BPC]BPAPYR
      Else
        SAVEBPR = [F:BPR]BPRNUM
        Read [BPR]BPR0=[F:SIH]BPRPAY
        If fstat Raz [F:BPR] Endif
        BPA=[F:BPR]BPAADD
        #Restauration d'avant la lecture
        # FGR 20/01/2015 : X3SUIVI105498 (début) trop tôt : on se sert des valeurs plus loins
        #Read [BPR]BPR0=SAVEBPR
        #If fstat Raz [F:BPR] Endif
        # FGR 20/01/2015 : X3SUIVI105498 (fin)
      Endif
    Endif
    Read [BPA]BPA0=1;[F:SIH]BPRPAY;BPA
    If fstat : Raz [F:BPA] : Endif
    [F:SIH]BPAPAY       = [F:BPA]BPAADD
    #fin CPO 71214

    #ISSUE X3-99350 - 2018-10-26 By USA : Begin
      Local Char BPRNUM_TEMP(GLONBPR) : BPRNUM_TEMP = [F:BPR]BPRNUM
      If [F:BPR]BPRNUM <> [F:SIH]BPRPAY
        Read [F:BPR]BPR0 = [F:SIH]BPRPAY
        If fstat Raz [F:BPR] Endif
      Endif
      [F:SIH]BPYNAM(0)  = [F:BPR]BPRNAM(0)
      [F:SIH]BPYNAM(1)  = [F:BPR]BPRNAM(1)
      If [F:BPR]BPRNUM <> BPRNUM_TEMP
        Read [F:BPR]BPR0 = BPRNUM_TEMP
        If fstat Raz [F:BPR] Endif
      Endif
    #ISSUE X3-99350 - 2018-10-26 By USA : End
    [F:SIH]BPYADDLIG(0) = [F:BPA]BPAADDLIG(0)
    [F:SIH]BPYADDLIG(1) = [F:BPA]BPAADDLIG(1)
    [F:SIH]BPYADDLIG(2) = [F:BPA]BPAADDLIG(2)
    [F:SIH]BPYPOSCOD    = [F:BPA]POSCOD
    [F:SIH]BPYCTY       = [F:BPA]CTY
    [F:SIH]BPYSAT       = [F:BPA]SAT
    [F:SIH]BPYCRY       = [F:BPA]CRY
    [F:SIH]BPYCRYNAM    = [F:BPA]CRYNAM
    # --------------------------------------
    # FGR 20/01/2015 : X3SUIVI105498 (début)
    If SAVEBPR <> "empty" Then
      #Restauration d'avant la lecture
      Read [BPR]BPR0=SAVEBPR
      If fstat Raz [F:BPR] Endif
    Endif
    # FGR 20/01/2015 : X3SUIVI105498 (fin)
    # --------------------------------------
Endif
# Repositionnement sur client facture de la facture
Read [BPC]BPC0=[F:SIH]BPR

# --> Récupération du compteur numéro interne
Call ACCNUM([F:SIH]ACCNUM) From SUBGAS

[M:SIH0] = [F:SIH] : [M:SIH0] = [F:SIV]
[M:SIH1] = [F:SIH] : [M:SIH1] = [F:SIV]
[M:SIH2] = [F:SIH] : [M:SIH2] = [F:SIV]
[M:SIH0]CHGTYP = [F:SIH]CURTYP
[M:SIH1]VACBPR = [F:SIH]VAC

# Bug 70183 et Dde 51781 : Init. de la date d'application de la taxe sur une facture de livraison
# Ssi la date d'application est saisissable dans l'écran facture et nulle
If INVORI = 3 & dim([M:SIH2]VATDAT)>0 & [M:SIH2]VATDAT=[0/0/0]
    If varmode([M:SIH2]VATDAT)= 0
        [F:SIH]VATDAT=[F:SDH]DLVDAT
        [M:SIH2]VATDAT=[F:SDH]DLVDAT    : # 93947
    Endif
Endif

## Alimentation cours en devise société
#Call COURSITE([F:SIH]CUR,[F:SIH]FCY,[F:SIH]CURTYP,[F:SIH]ACCDAT,COURS,SPSTAT) From TRTDEV
#[F:SIH]RATCUR=COURS
## --> Chargement du cours devise et du cours reporting
#Call COURSITE([M:SIH2]CUR,GFCY,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATCUR,I)   From TRTDEV
#Call COURDEV([M:SIH2]CUR,GSYSCUR,[M:SIH2]CURTYP,[M:SIH0]INVDAT,[M:SIH2]RATRPT,I) From TRTDIV
#If dim([M:SIH2]LABEL)>0
#  Call SET_FLGDEV([M:SIH2]CUR,GSOCIETE,[M:SIH0]INVDAT) From TRTX3
#  Gosub CHARG_ZONES_DEV From SUBSIHB
#  Gosub INIT_COURS      From SUBSIHB
#Endif
#[F:SIH]RATCUR=[M:SIH2]RATCUR
#[F:SIH]RATRPT=[M:SIH2]RATRPT
#----- Chargement zones devises et cours -----#
Call INI_COURS("SIH2",GSOCIETE,[M:SIH2]CUR,[M:SIH0]INVDAT,[M:SIH2]CURTYP) From SUBBICS
#Fq74450-Gbn-Ajout boucle sur les référentiels
Local Integer I_LED
For I_LED=1 To dim([M:SIH2]LED)
 [F:SIH]LED(I_LED-1)=[M:SIH2]LED(I_LED-1)
 [F:SIH]CURLED(I_LED-1)=[M:SIH2]CURLED(I_LED-1)
 [F:SIH]RATMLT(I_LED-1)=[M:SIH2]RATMLT(I_LED-1)
 [F:SIH]RATDIV(I_LED-1)=[M:SIH2]RATDIV(I_LED-1)
Next I_LED

# Chargement des sections analytiques entête facture
Case INVORI
 When 1 : #    Devis
    Call CHARG_CCEH("SIH2","NBAXE","SQH") From TRTX3CPT
 When 2 : #    Commande
    # Chargement des sections analytiques entête facture à partir de la commande
    Call CHARG_CCEH("SIH2","NBAXE","SOH") From TRTX3CPT
 When 3 : #    Livraison
    # Chargement des sections analytiques entête facture à partir de la livraison
    Call CHARG_CCEH("SIH2","NBAXE","SDH") From TRTX3CPT
 When 7 : #    Contrat
    # Chargement des sections analytiques entête facture à partir du contrat
    Call CHARG_CCEH("SIH2","NBAXE","CON") From TRTX3CPT
Endcase
# Initialisation sections analytiques vides
If dim([M:SIH2]NBAXE)>0
    For I=1 To GNBDIE
        If [F:SIH]CCE(I-1)=""
            [F:SIH]DIE(I-1)=GDIE(I)
            [M:SIH2]DIE(I-1)=GDIE(I)
            Call INISEC(SECTION,"SIH",GDIE(I)) From SUBCDE
            [F:SIH]CCE(I-1) = SECTION
            [M:SIH2]CCE(I-1) = SECTION
        Endif
    Next I
Endif

Gosub NEW_FACTURE From TRTVENFACC
Gosub NEW_REGIME  From TRTVENFACC

If INVORI<>7    : # 96708 : Transfert des sections analytiques des éléments de facturation
    # ACA (2009-09-15) S03 : Chargement des sections des éléments de facturation
    If clalev([F:CAL])=0 : Local File CPTANALIN [CAL] : Endif
    Local Integer ISJ0
    For ISJ0=0 To dim([M:SIHX]XFNUM)-1
        If [M:SIHX]XFNUM(ISJ0)=0 : Break : Endif
        # 96708 : Transfert des sections analytiques des éléments de facturation
#    Call CHARG_ACCCCE (ISJ0,"[M:SIHX]SFIACC","[M:SIHX]DSP","[M:SIHX]SFICCE","SVF",[M:SIHX]VCRTYP,[M:SIHX]NUM,0,[M:SIHX]XFNUM(ISJ0),"")
#&                     From TRTX3CPT
        Call CHARG_ACCCCE (ISJ0,"[M:SIHX]SFIACC","[M:SIHX]DSP","[M:SIHX]SFICCE","SVF",WVCRTYP,WVCRNUM,0,[M:SIHX]XFNUM(ISJ0),"")
&                          From TRTX3CPT
        # 96708
    Next ISJ0
Endif           : # 96708

#  90370 - Cash VAT
If func AFNC.ACTIV("KSP")
  Case GFONCTION
    When "FUNAUTINVO","FUNAUTINVD","FUNAUTINVC","FUNAUTINVT"
      Local Char VATSTA(1)
      Call PARAML([F:SIH]CPY,"SPACSHVAT",VATSTA) From ADOVAL
      If VATSTA="2": Call PARAML([F:SIH]CPY,"SPAVAT",VATSTA) From ADOVAL: Endif
      If VATSTA="2"
          Local Integer CSHVAT
          Call CSHVATBPC([F:SIH]ACCDAT,[F:SIH]BPYCRY,[F:SIH]VAC,[F:SIH]CPY,[F:SIH]TAX(),CSHVAT) From DCLVATSPA
          [F:SIH]CSHVAT=CSHVAT
      Endif
      #  Raz VALSTA  bug 97042
      Raz VATSTA
  Endcase

Endif
#  90370 - Cash VAT

# X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85300 (LCC 27/04/18)
If [F:BPR]BPRNUM<>[F:SIV]BPCINV
  Read [BPR]BPR0=[F:SIV]BPCINV
  If fstat Raz [F:BPR] Endif
Endif
[F:SIH]CRN=[F:BPR]CRN
# End X3-84945:Review mandatory mentions / Sales invoices (French law) X3-85300 (LCC 27/04/18)

GPOINT="ALISIH" : Gosub ENTREE From EXEFNC   : # demande 14091 du 02/05/02

End


#-------------------------------------------------------------------------------#
# Alimentation du détail SID                                                    #
#                                                                               #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes   #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons  #
#-------------------------------------------------------------------------------#
Subprog ALISID(INVORI,WLIN,WTRANSAC)
Value Integer INVORI     : # Origine facture (1=Devis, 2=Cde, 3=Liv, 7=Contrat)
Value Integer WLIN       : # Numero de ligne
Value Char    WTRANSAC   : # Pièce automatique

Local Decimal WANC_QTY, WSTUDIS
Local Char    WLOT(GLONLOT), WLOC(GLONLOC)
Local Integer J, WRET
Local Char    SECTION
Raz [F:SID]
Case INVORI
 When 1 : [F:SID]=[F:SQD]
          WANC_QTY = [F:SQD]QTY
          [F:SID]QTY    = [F:SQD]QTY
 When 2 : [F:SID]=[F:SOP]
          [F:SID]=[F:SOQ]
          If [F:SOQ]STOMGTCOD<>1 [F:SIV]STOFCY=[F:SID]STOFCY Endif
          WANC_QTY = [F:SOQ]QTY

          Raz [F:SID]QTYSTU
          Raz [F:SID]QTY
          Raz [F:SID]STRDAT : Raz [F:SID]ENDDAT : # Bug 60925

          # Si article géré en stock détermination de la quantité livrée
          If [F:SOQ]STOMGTCOD<>1
             # Si allocation détaillée
             If [F:SOQ]ALLTYP=2
                # Chargement STOSORW à partir des allocations
                [M:ALP]TRSTYP    = 4
                [M:ALP]TRSCOD    = [F:SIV]TRSCOD
                [M:ALP]VCRTYP    = 2
                [M:ALP]VCRNUM    = [F:SOQ]SOHNUM
                [M:ALP]VCRLIN    = [F:SOQ]SOPLIN
                [M:ALP]VCRSEQ    = [F:SOQ]SOQSEQ
                [M:ALP]STOFCY    = [F:SOQ]STOFCY
                [M:ALP]ITMREF    = [F:SOQ]ITMREF
                # --------------------------------------
                # FGR 21/04/2015 : X3SUIVI105605 (début)
                If func AFNC.ACTIV("ECC") Then
                  [M:ALP]ECCVALMAJ    = [F:SOQ]ECCVALMAJ
                Endif
                # FGR 21/04/2015 : X3SUIVI105605 (fin)
                # --------------------------------------
                [M:ALP]QTY       = [F:SWI]QTYSTU
                [M:ALP]TYPQTY    = 2
                [M:ALP]STA       = [F:SOQ]STA
                [M:ALP]PECSCOLOC = 1
                [M:ALP]BESDAT = [F:SOQ]SHIDAT
                [M:ALP]DLVDAT = [F:SOQ]DEMDLVDAT
                Raz [M:ALP]WRH
                #DLUBPC
                [M:ALP]BPRNUM = [F:SIV]BPCORD
                # Alimentation STOSORW à partir de la qté allouée cde sortable
                Call ALLSTOSORW("",1,0,0,1,0,WRET) From STKSOR
                # Si ligne normale ou de nomenclature
                If !find([F:SOP]LINTYP,2,3,4,5,10,11,12,13)
                   # Si erreur ou pas de qté facturée
                   If WRET<>0 | [M:ALP]ALLQTY=0
                     # Issue X3-156647 - 2019-08-27 by SR :
                     If [M:ALP]ALLQTY = 0
                      Call ECR_TRACE([F:SOH]SOHNUM-mess(27,159,1)-[F:SOQ]ITMREF-format$(GFMDAT,[F:SOQ]SHIDAT)-mess(81,191,1)-":"-num$([F:SOQ]ALLQTYSTU)-
&                     "\"-mess(126,192,1),1) From GESECRAN
                     Endif
                     # End issue X3-156647
                     Goto ALISID_FIN
                   Else
                      [F:SID]QTYSTU = [M:ALP]ALLQTY
                      [F:SID]QTY    = [F:SID]QTYSTU/[F:SID]SAUSTUCOE
                   Endif
                # Sinon si ligne de kit
                Else
                   # Si erreur ou qté à facturer <> qté facturée
                   If WRET<>0 | [M:ALP]QTY<>[M:ALP]ALLQTY
                      # Problème sur un kit, on force le rollback
                      Raz GOK
                      Goto ALISID_FIN
                   Else
                      [F:SID]QTYSTU = [M:ALP]ALLQTY
                      [F:SID]QTY    = [F:SID]QTYSTU/[F:SID]SAUSTUCOE
                   Endif
                Endif
             Else
                # Chargement STOSORW par éxécution de l'algorithme
                [M:ALP]TRSTYP    = 4
                [M:ALP]TRSCOD    = [F:SIV]TRSCOD
                [M:ALP]VCRTYP    = 5
#                [M:ALP]STOFCY    = [F:SIV]STOFCY
                [M:ALP]STOFCY    = [F:SOQ]STOFCY
                # --------------------------------------
                # FGR 21/04/2015 : X3SUIVI105605 (début)
                If func AFNC.ACTIV("ECC") Then
                  [M:ALP]ECCVALMAJ    = [F:SOQ]ECCVALMAJ
                Endif
                # FGR 21/04/2015 : X3SUIVI105605 (fin)
                # --------------------------------------
                [M:ALP]ITMREF    = [F:SOQ]ITMREF
                [M:ALP]QTY       = [F:SWI]QTYSTU
                [M:ALP]TYPQTY    = 2
                [M:ALP]BESDAT    = [F:SOQ]SHIDAT
                [M:ALP]DLVDAT    = [F:SOQ]DEMDLVDAT
                [M:ALP]ALLDAT    = [0/0/0]
                [M:ALP]STOLOC    = ""
                [M:ALP]PECINTLOC = 2
                [M:ALP]PECSCOLOC = 1
                [M:ALP]PECPLFLOC = 2
                [M:ALP]PECCUNLOK = 1
                [M:ALP]FILSTO    = ""
                [M:ALP]LOT       = [F:SOQ]LOT
                [M:ALP]LOC       = [F:SOQ]LOC
                [M:ALP]STA       = [F:SOQ]STA
                [M:ALP]PCU       = [F:SOP]SAU
                [M:ALP]PCUSTUCOE = [F:SOP]SAUSTUCOE
                Raz [M:ALP]ALLQTY
                Raz [M:ALP]WRH
                # Si allocation globale, on passe la qté déjà alloée en global
                If [F:SOQ]ALLTYP=1 [M:ALP]ALLQTY=[F:SOQ]ALLQTYSTU Endif
                Raz WRET
                # Alimentation STOSORW par éxécution de l'algorithme
                Call GENSTOSORW("",1,0,0,"C",WRET) From STKSOR
                # Si ligne normale ou de nomenclature
                If !find([F:SOP]LINTYP,2,3,4,5,10,11,12,13)
                   # Si erreur ou pas de qté facturée
                   If WRET<>0 | [M:ALP]ALLQTY=0
                     # Issue X3-156647 - 2019-08-27 by SR :
                     If [M:ALP]ALLQTY = 0
                      Call ECR_TRACE([F:SOH]SOHNUM-mess(27,159,1)-[F:SOQ]ITMREF-format$(GFMDAT,[F:SOQ]SHIDAT)-mess(81,191,1)-":"-num$([F:SOQ]ALLQTYSTU)-
&                     "\"-mess(126,192,1),1) From GESECRAN
                     Endif
                     # End issue X3-156647
                     Goto ALISID_FIN
                   Else
                      [F:SID]QTYSTU = [M:ALP]ALLQTY
                      [F:SID]QTY    = [F:SID]QTYSTU/[F:SID]SAUSTUCOE
                   Endif
                # Sinon si ligne de kit
                Else
                   # Si erreur ou qté à facturer <> qté facturée
                   If WRET<>0 | [M:ALP]QTY<>[M:ALP]ALLQTY
                      # Problème sur un kit, on force le rollback
                      Raz GOK
                      Goto ALISID_FIN
                   Else
                      [F:SID]QTYSTU = [M:ALP]ALLQTY
                      [F:SID]QTY    = [F:SID]QTYSTU/[F:SID]SAUSTUCOE
                   Endif
                Endif
             Endif
          Else
             [F:SID]QTYSTU = [F:SWI]QTYSTU
             [F:SID]QTY    = [F:SWI]QTY
          Endif
          # Ini SAM 119936 (JUCON 01/12/2016)
          [F:SID]DSPLINWEI = ([F:SOQ]DSPLINWEI*[F:SID]QTYSTU)/[F:SOQ]QTYSTU
          [F:SID]DSPLINVOL = ([F:SOQ]DSPLINVOL*[F:SID]QTYSTU)/[F:SOQ]QTYSTU
          # End SAM 119936 (JUCON 01/12/2016)

 When 3 : [F:SID]=[F:SDD]
          WANC_QTY = [F:SDD]QTY
          # Bug 46937
          # Si livraisons de prêt, on facture ce qui n'est pas retourné
          # Si livraisons normales et pas de facturation qté retournée (GDLVRTNCNO=1), on ne facture que ce qui n'est pas retourné
          # Si livraisons normales et facturation qté retournée (GDLVRTNCNO=2), on facture tout
          If [F:SDH]LND=2 | GDLVRTNCNO=1
              # Pas de création d'avoir pour le retour : Qté facturée=Qté livrée-Qté retournée
              [F:SID]QTY    = [F:SDD]QTY - [F:SDD]RTNQTY
              [F:SID]QTYSTU = [F:SDD]QTYSTU - [F:SDD]RTNQTYSTU
          Else
              # Création d'un avoir pour le retour : Qté facturée=Qté livrée
              [F:SID]QTY    = [F:SDD]QTY
              [F:SID]QTYSTU = [F:SDD]QTYSTU
          Endif
          # Ini SAM 119936 (JUCON 01/12/2016)
          [F:SID]DSPLINWEI = ([F:SDD]DSPLINWEI*[F:SID]QTYSTU)/[F:SDD]QTYSTU
          [F:SID]DSPLINVOL = ([F:SDD]DSPLINVOL*[F:SID]QTYSTU)/[F:SDD]QTYSTU
          # End SAM 119936 (JUCON 01/12/2016)
          [F:SID]ALLTYP = 2
          # --------------------------------------
          # FGR 21/04/2015 : X3SUIVI105605 (début)
          If func AFNC.ACTIV("ECC") Then
            Raz [F:SID]ECCVALMAJ
            Raz [F:SID]ECCVALMIN
          Endif
          # FGR 21/04/2015 : X3SUIVI105605 (fin)
          # --------------------------------------
 When 7 : [F:SID]=[F:SOP]
          [F:SID]=[F:SOQ]
          [F:SID]QTY=1
          Call CNVQTY([F:SID]QTY,[F:SID]SAUSTUCOE,[F:SID]STU,[F:SID]QTYSTU) From TRTVENQTE
          Raz [F:SID]SOHNUM, [F:SID]SOPLIN, [F:SID]SOQSEQ
Endcase

[F:SID]SALFCY = [F:SIV]SALFCY
[F:SID]INVDAT = [F:SIV]INVDAT
[F:SID]BPCINV = [F:SIV]BPCINV

If INVORI=7
#   contrat de service : récupérer les montants à facturer du contrat
    [F:SID]CONNUM = [F:CON]CONNUM
    Local Decimal WPRIX
    WPRIX  = arr([F:CON]NEXINVAMT,10^-GDECPRI)
    [F:SID]GROPRI = WPRIX
    [F:SID]NETPRI = WPRIX
    [F:SID]PRIREN = GDACMANSAL
    For I=1 To 9
       If evalue ("dim([F:SID]DISCRGVAL"+num$(I)+")") > 0
          Assign "[F:SID]DISCRGVAL"+num$(I) With 0
          Assign "[F:SID]DISCRGREN"+num$(I) With GDACMANSAL
       Endif
    Next
    # calcul des montants de base calcul de taxe
    Call ALICLCAMT([F:SID]ITMREF, [F:SID]QTY, -1, "SID", [F:SID]CLCAMT1, [F:SID]CLCAMT2) From TRTX3
    # Calcul des taxes
    # Bug 95337 : Date utilisée pour le calcul des taxes (prix HT/TTC)
    # Utiliser [M]VATDAT si le champ est renseigné sinon utiliser [M]INVDAT
    # (Les classes [M] sont alimentés dans ALISIH)
    Local Date WDATCONVPRI
    If dim([M:SIH2]VATDAT)>0 & [M:SIH2]VATDAT<>[0/0/0]
        WDATCONVPRI=[M:SIH2]VATDAT
    Else
        WDATCONVPRI=[M:SIH0]INVDAT
    Endif
    If [F:SIV]PRITYP=1
        [F:SID]NETPRINOT = [F:SID]NETPRI
#        Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,[F:SIV]INVDAT,
#&                       [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRIATI) From TRTX3
        Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,WDATCONVPRI,
&                       [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRIATI) From TRTX3
    Else
        [F:SID]NETPRIATI = [F:SID]NETPRI
#        Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,[F:SID]INVDAT,
#&                       [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRINOT) From TRTX3
        Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,WDATCONVPRI,
&                       [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRINOT) From TRTX3
    Endif
    # Bug 95337
    # --> Calcul de la marge
    [F:SID]PFM = [F:SID]NETPRINOT - [F:SID]CPRPRI
Endif

GPOINT="ALISID" : Gosub ENTREE From EXEFNC

nolign = WLIN
[M:SIH4] = [F:SID]
# 101874 : V9 : Taxe code control
[M:SIH4]VACITM1(nolign-1) =  [F:SID]VACITM(0)
[M:SIH4]VACITM2(nolign-1) =  [F:SID]VACITM(1)
[M:SIH4]VACITM3(nolign-1) =  [F:SID]VACITM(2)
# 101874
[M:SIH4]VAT1(nolign-1) =  [F:SID]VAT(0)
[M:SIH4]VAT2(nolign-1) =  [F:SID]VAT(1)
[M:SIH4]VAT3(nolign-1) =  [F:SID]VAT(2)
[M:SIH4]DSTOFCY(nolign-1) =  [F:SID]STOFCY

# Chargement sections analytiques
Case INVORI
 When 1 : #    Devis
    Call CHARG_ACCCCE(NOL,"","","[M:SIH4]CCE",
&                        "SQD",0,[F:SQD]SQHNUM,[F:SQD]SQDLIN,0,"") From TRTX3CPT
 When 2 : #    Commande
    Call CHARG_ACCCCE(nolign-1,"","","[M:SIH4]CCE",
&                        "SOP",0,[F:SOP]SOHNUM,[F:SOP]SOPLIN,[F:SOP]SOPSEQ,"") From TRTX3CPT
 When 3 : #    Livraison
    Call CHARG_ACCCCE(nolign-1,"","","[M:SIH4]CCE",
&                        "SDD",0,[F:SDD]SDHNUM,[F:SDD]SDDLIN,0,"") From TRTX3CPT
 When 7 : #    Contrat
    Call CHARG_ACCCCE(nolign-1,"","","[M:SIH4]CCE",
&                        "SQD",0,[F:SOP]SOHNUM,[F:SOP]SOPLIN,[F:SOP]SOPSEQ,"") From TRTX3CPT
Endcase
# Initialisation des sections analytiques vides
Local Integer I
Local Char    SECTION
For I=1 To GNBDIE
    If evalue("dim([M:SIH4]CCE"+num$(I)+"(nolign-1))") >0 & evalue("[M:SIH4]CCE"+num$(I)+"(nolign-1)")=""
        Call INISEC(SECTION, "SID", I) From TRTX3CPT
        Assign "[M:SIH4]CCE"+num$(I)+"(nolign-1)" With SECTION
    Endif
Next

# Bug 95337 : Date utilisée pour le calcul des taxes (prix HT/TTC)
##   Si on a une base de calcul de taxe, c'est qu'il y a une formule
#If INVORI <> 7 & ([F:SID]CLCAMT1<>0 | [F:SID]CLCAMT2<>0)
#    # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
#    Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
#    WANC_CLCAMT1=[F:SID]CLCAMT1 : WANC_CLCAMT2=[F:SID]CLCAMT2
#    Call ALICLCAMT([F:SID]ITMREF, [F:SID]QTY, nolign-1, "SIH4", [F:SID]CLCAMT1, [F:SID]CLCAMT2) From TRTX3
#    [M:SIH4]CLCAMT1(nolign-1) =  [F:SID]CLCAMT1
#    [M:SIH4]CLCAMT2(nolign-1) =  [F:SID]CLCAMT2
#    # Recalcul des taxes ssi les montants de base ont évolués
#    If [F:SID]QTY=0 | [F:SID]CLCAMT1/[F:SID]QTY<>WANC_CLCAMT1/WANC_QTY
#&                   | [F:SID]CLCAMT2/[F:SID]QTY<>WANC_CLCAMT2/WANC_QTY
#        If [F:SIV]PRITYP=1
#            [F:SID]NETPRINOT = [F:SID]NETPRI
#            Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,[F:SIV]INVDAT,
#&                           [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRIATI) From TRTX3
#            [M:SIH4]NETPRIATI(nolign-1) =  [F:SID]NETPRIATI
#        Else
#            [F:SID]NETPRIATI = [F:SID]NETPRI
#            Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,[F:SID]INVDAT,
#&                           [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRINOT) From TRTX3
#            [M:SIH4]NETPRINOT(nolign-1) =  [F:SID]NETPRINOT
#        Endif
#    Endif
#Endif
If INVORI <> 7
    # Si on a une base de calcul de taxe, c'est qu'il y a une formule
    Local    Decimal  WANC_CLCAMT1, WANC_CLCAMT2
    WANC_CLCAMT1=[F:SID]CLCAMT1 : WANC_CLCAMT2=[F:SID]CLCAMT2
    If ([F:SID]CLCAMT1<>0 | [F:SID]CLCAMT2<>0)
        # Recalcul des montants de base calcul de taxe (peuvent être dépendant de la qté)
        Call ALICLCAMT([F:SID]ITMREF, [F:SID]QTY, nolign-1, "SIH4", [F:SID]CLCAMT1, [F:SID]CLCAMT2) From TRTX3
        [M:SIH4]CLCAMT1(nolign-1) =  [F:SID]CLCAMT1
        [M:SIH4]CLCAMT2(nolign-1) =  [F:SID]CLCAMT2
    Endif
    # Bug 95337 : Date utilisée pour le calcul des taxes (prix HT/TTC)
    # Utiliser [M]VATDAT si le champ est renseigné sinon utiliser [M]INVDAT
    Local Date WDATCONVPRI
    If dim([M:SIH2]VATDAT)>0 & [M:SIH2]VATDAT<>[0/0/0]
        WDATCONVPRI=[M:SIH2]VATDAT
    Else
        WDATCONVPRI=[M:SIH0]INVDAT
    Endif
    If [F:SIV]PRITYP=1
        [F:SID]NETPRINOT = [F:SID]NETPRI
        Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,WDATCONVPRI,
&                        [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRIATI) From TRTX3
        [M:SIH4]NETPRIATI(nolign-1) =  [F:SID]NETPRIATI
    Else
        [F:SID]NETPRIATI = [F:SID]NETPRI
        Call CLCTAXEPRIV([F:SID]NETPRI,[F:SID]VAT,[F:SIV]PRITYP,GSOCIETE,WDATCONVPRI,
&                        [F:SID]QTY,[F:SIH]VAC,[F:SID]CLCAMT1,[F:SID]CLCAMT2,[F:SID]NETPRINOT) From TRTX3
        [M:SIH4]NETPRINOT(nolign-1) =  [F:SID]NETPRINOT
    Endif
Endif
# Bug 95337

# Spécificité USA
# Pour les taxes américaines, le calcul est fait à la fin
# If GLOCUSATAX = 0   # 106867.o
If !(func AFNC.ACTIV("LTA")) | [F:CPY]SSTTAXACT <> 2   # 106867.n
    [M:SIHX]LIGNE=nolign
    Gosub PLUS_LIGNE From TRTVENFACC
    nolign = WLIN
    [F:SID]AMTNOTLIN    =  [M:SIH4]AMTNOTLIN(nolign-1)
    [F:SID]BASTAXLIN(0) =  [M:SIH4]BASTAXLIN1(nolign-1)
    [F:SID]BASTAXLIN(1) =  [M:SIH4]BASTAXLIN2(nolign-1)
    [F:SID]BASTAXLIN(2) =  [M:SIH4]BASTAXLIN3(nolign-1)
    [F:SID]BASTAXLIN(3) =  [M:SIH4]BASTAXLIN4(nolign-1)
    [F:SID]BASTAXLIN(4) =  [M:SIH4]BASTAXLIN5(nolign-1)
    [F:SID]BASTAXLIN(5) =  [M:SIH4]BASTAXLIN6(nolign-1)
    [F:SID]RATTAXLIN    =  [M:SIH4]RATTAXLIN(nolign-1)
    [F:SID]AMTTAXLIN(0) =  [M:SIH4]AMTTAXLIN1(nolign-1)
    [F:SID]AMTTAXLIN(1) =  [M:SIH4]AMTTAXLIN2(nolign-1)
    [F:SID]AMTTAXLIN(2) =  [M:SIH4]AMTTAXLIN3(nolign-1)
    [F:SID]AMTATILIN    =  [M:SIH4]AMTATILIN(nolign-1)
    # 102423 : Belgium Early discounts
    # Discount amount for the line
    If GDEPMGTMOD=5 & [M:SIH2]DEPRAT<>0
        [F:SID]AMTDEPLIN    =  [M:SIH4]AMTDEPLIN(nolign-1)
    Endif
    # 102423
Endif
nolign = WLIN

# Recalcul du prix de revient et la marge
# Pour les factures de commande, les proformas
If ([F:SIV]INVTYP = 1 & INVORI = 2) | [F:SIV]INVTYP = 5 Gosub MARGE Endif

Gosub CHARGETXTSID

# Alimentation du compte et de la nature analytique
#Call CPTE_NATURE(WTRANSAC,[F:SID]LINACC,[F:SID]LINCNA)

Raz [F:SID]UPDDAT
Raz [F:SID]UPDUSR
If evalue ("dim([F:SID]CREDAT)")>0 [F:SID]CREDAT = date$:Endif
If evalue ("dim([F:SID]CREUSR)")>0 [F:SID]CREUSR = GUSER:Endif
If evalue ("dim([F:SID]EXPNUM)")>0 [F:SID]EXPNUM = [C]EXPORT:Endif

#CPO 06/02/2009 Pour la DEB
If dim([F:SID]EECFLOPHY)>0
    # --- Si article non soumis à la DEB => EECFLOPHY = Non
    If [F:ITM]ITMREF<>[F:SID]ITMREF
        Read [ITM]ITM0=[F:SID]ITMREF
        If fstat Raz [F:ITM] : Endif
    Endif
    If INVORI=1 or INVORI=7 or [F:ITM]EECGES=1
      [F:SID]EECFLOPHY=1
    Elsif INVORI=2 or INVORI=3
      [F:SID]EECFLOPHY=func INIT_EECFLOPHY([F:ITM]EECGES,[F:SIV]STOMVTFLG)
    Endif
Endif

# Issue X3-38242 - 2019-03-21 by MUARN : remove ORILIN
# Raz n°ligne à l'origine d'un gratuit (les lignes liées sur le document d'origine ne le sont plus forcément sur la facture)
Raz [F:SID]ORILIN

$ALISID_FIN

# Si problème sur un kit, on annule la facture
If GOK<1
   Call ECR_TRACE(mess(16,107,1)-":"-[F:SIH]NUM-"\"-mess(27,159,1)-
&           [F:SID]ITMREF-":"-mess(585,196,1),1) From GESECRAN
Endif

End

# Bug 80451 : PE CALPFM1 non appelé
##--------------------------------------------------------------------------------------------------#
## ATTENTION : Appelé depuis :                                                                      #
##   - Subprog ALISID de TRTVENFAC : Facturation auto commande                                      #
##   - $INICRE_LIG de SUBSIHA      : Création Ligne Avoir si base calcul marge=prix moyen lot       #
##--------------------------------------------------------------------------------------------------#
##--------------------------------------#
## Recherche du nouveau prix de revient #
## Recalcul de la marge                 #
##--------------------------------------#
#$MARGE
#Local Decimal COUTHT, COUTHTC, WQTY
#Local Integer STAT, LOK, WNATPRI
#
## Bug 43723 : Calcul du prix de revient pour les gratuits
##If [F:SID]NETPRI = 0 & [F:SID]FOCFLG = 3 Return Endif
#
## Recalcul du prix de revient
## --> Si article géré en stock : recalcul
## --> Si article non géré      : on conserve celui d'origine
##If [F:SID]STOMGTCOD <> 1 : # dde 10803 : rechercher le prix de revient systématiquement
#    # Récupération du coef de conversion UV en US pour calcul de la marge
#    If [F:ITM]ITMREF <> [F:SID]ITMREF
#        Read [F:ITM]ITM0 = [F:SID]ITMREF
#        If fstat  Raz [F:ITM] : Endif
#    Endif
#    If [F:ITS]ITMREF <> [F:SID]ITMREF
#        Read [F:ITS]ITS0 = [F:SID]ITMREF
#        If fstat  Raz [F:ITS] : Endif
#    Endif
#    WQTY = [F:SID]QTYSTU
#    # Calcul prix revient
#    #
#    If [F:SIV]INVTYP=2
#        # Création ligne d'avoir depuis la gestion facture : Le n°ligne dans SIH4 (WLIN) est nécessaire
#        # VCRTYP ainsi que le n°ligne dans SIH4 (WLIN) est nécessaire
#        Call DEFCPR ([F:SID]ITMREF,[F:SID]STOFCY,5,"",0,WLIN,[F:SIV]INVDAT,WQTY,COUTHT,LOK) From STKVAL
#    Else
#        # Création ligne de facture depuis facturation auto des commandes
#        Call DEFCPR ([F:SID]ITMREF,[F:SID]STOFCY,0,"",0,0,[F:SIV]INVDAT,WQTY,
#&                    COUTHT,LOK) From STKVAL
#    Endif
#    If LOK <> 0
##       Pas de récup du prix de revient donc pas de recalcul de la marge
#        Return
#    Else
#        # Si devise document <> devise base calcul marge (société du site expé)
#        If [F:SIV]CUR <> GLOCALDEV & COUTHT <> 0
#            Call CONVERT (GLOCALDEV, [F:SIV]CUR, GLOCALDEV, [F:SIH]CURTYP, [F:SIV]INVDAT, COUTHT, COUTHTC, STAT) From TRTDEV
#            COUTHT=COUTHTC
#        Endif
#        # Si Prix de revient récupéré à 0 : S'il était renseigné on ne fait rien
#        If COUTHT = 0 & [F:SID]CPRPRI <> 0
#            Return
#        Else
#            # Le prix de revient est exprimé en US : Le convertir en UV
#            COUTHT=COUTHT*[F:SID]SAUSTUCOE
#        Endif
#    Endif
##Endif
#Gosub CALSPEPFM From TRTVENPRI
##[F:SID]CPRPRI=arr(COUTHT,10^-GDECPRI)
#If GSALRND = 2
#    Call ARRDEV(COUTHT,[F:SIV]CUR) From TRTDIV
#    [F:SID]CPRPRI=COUTHT
#Else
#    [F:SID]CPRPRI=arr(COUTHT,10^-GDECPRI)
#Endif
## Pas de calcul de marge pour les gratuits
#If [F:SID]NETPRI = 0 & [F:SID]FOCFLG = 3 Return Endif
#
## Calcul de marge pour les articles vendus ou les articles livrables ayant un prix net
#If [F:ITM]SALFLG=2 | ([F:ITM]SALFLG=1 & [F:SID]NETPRINOT<>0)
#    # --> Calcul de la marge
#    [F:SID]PFM = [F:SID]NETPRINOT - [F:SID]CPRPRI
#    #Call ARRDEV([F:SID]PFM,[F:SIV]CUR) From TRTDIV
#Endif
#
#Return

#--------------------------------------------------------------------------------------------------#
# ATTENTION : Appelé depuis :                                                                      #
#   - Subprog ALISID de TRTVENFAC : Facturation auto commande                                      #
#   - $INICRE_LIG de SUBSIHA      : Création Ligne Avoir si base calcul marge=prix moyen lot       #
#--------------------------------------------------------------------------------------------------#
#--------------------------------------#
# Recherche du nouveau prix de revient #
# Recalcul de la marge                 #
#--------------------------------------#
$MARGE
Local Decimal COUTHT, COUTHTC, WQTY
Local Integer STAT, LOK, WNATPRI

Local Decimal PHTNET              : # 95792 : Variable inexistante dans PE CALPFM
Local Decimal XCRPPRI, XPFM

# Récupération du coef de conversion UV en US pour calcul de la marge
If [F:ITM]ITMREF <> [F:SID]ITMREF
    Read [F:ITM]ITM0 = [F:SID]ITMREF
    If fstat  Raz [F:ITM] : Endif
Endif
If [F:ITS]ITMREF <> [F:SID]ITMREF
    Read [F:ITS]ITS0 = [F:SID]ITMREF
    If fstat  Raz [F:ITS] : Endif
Endif

XCPRPRI  = [F:SID]CPRPRI
XPFM     = [F:SID]PFM
PHTNET   = [F:SID]NETPRINOT       : # 95792 : Variable inexistante dans PE CALPFM

WQTY = [F:SID]QTYSTU

# Calcul prix revient
If [F:SIV]INVTYP=2
    # Création ligne d'avoir depuis la gestion facture : Le n°ligne dans SIH4 (WLIN) est nécessaire
    # VCRTYP ainsi que le n°ligne dans SIH4 (WLIN) est nécessaire
    Call DEFCPR ([F:SID]ITMREF,[F:SID]STOFCY,5,"",0,WLIN,[F:SIV]INVDAT,WQTY,COUTHT,LOK) From STKVAL
Else
    # Création ligne de facture depuis facturation auto des commandes
    Call DEFCPR ([F:SID]ITMREF,[F:SID]STOFCY,0,"",0,0,[F:SIV]INVDAT,WQTY,
&                    COUTHT,LOK) From STKVAL
Endif
If LOK = 0
    # Si devise document <> devise base calcul marge (société du site expé)
    If [F:SIV]CUR <> GLOCALDEV & COUTHT <> 0
        # Issue X3-98052
        # No rounding, to be consistent with what is done in TRTVENPRI
        #Call CONVERT (GLOCALDEV, [F:SIV]CUR, GLOCALDEV, [F:SIH]CURTYP, [F:SIV]INVDAT, COUTHT, COUTHTC, STAT) From TRTDEV
        Call CONVERT2 (GLOCALDEV, [F:SIV]CUR, GLOCALDEV, [F:SIH]CURTYP, [F:SIV]INVDAT, COUTHT, COUTHTC, STAT) From TRTDEV
        # End issue X3-98052
        COUTHT=COUTHTC
    Endif
    If COUTHT <> 0 | [F:SID]CPRPRI = 0
        # Le prix de revient est exprimé en US : Le convertir en UV
        COUTHT=COUTHT*[F:SID]SAUSTUCOE

        #  Point d'entree calcul d'un cout supplémentaire pour le calcul de la marge
        Gosub CALSPEPFM From TRTVENPRI

        If GSALRND = 2
            Call ARRDEV(COUTHT,[F:SIV]CUR) From TRTDIV
            XCPRPRI=COUTHT
        Else
            XCPRPRI=arr(COUTHT,10^-GDECPRI)
        Endif
        # Pas de calcul de marge pour les gratuits
        If [F:SID]NETPRI<>0 | [F:SID]FOCFLG<>3
            # Calcul de marge pour les articles vendus ou les articles livrables ayant un prix net
            If [F:ITM]SALFLG=2 | ([F:ITM]SALFLG=1 & [F:SID]NETPRINOT<>0)
                # --> Calcul de la marge
              XPFM = [F:SID]NETPRINOT - XCPRPRI
            Endif
        Endif
    Else
        # Si Prix de revient récupéré à 0 : S'il était renseigné on ne fait rien
    Endif
Endif

# Point d'entree pour recalcul de la marge
Gosub CALSPEPFM1 From TRTVENPRI

[F:SID]CPRPRI= XCPRPRI
[F:SID]PFM   = XPFM

Return
# Bug 80451

#-------------------------------------#
# Charge des textes détails facture   #
#-------------------------------------#
$CHARGETXTSID
#Local Integer WRETOUR
#Local Char    WNUMTEX (12)
Local Integer WRET

# Les textes ne sont pas repris pour les devis

# Facture de commande : Suivi texte détail cde sur fac : Duplication
If INVORI = 2 & find (GSALTEXLIN,5)
#    WNUMTEX = [F:SOQ]SOQTEX
#    If WNUMTEX <> ""
#        WRETOUR = 0
#        Call TEX(5,"SID1","","","",WNUMTEX,"D",WRETOUR) From TRTX3TEX
#        If WRETOUR <> 99
#            [F:SID]SIDTEX = WNUMTEX
#        Endif
#    Endif
    [F:SID]SIDTEX = [F:SOQ]SOQTEX
    If left$([F:SOQ]SOQTEX,3)="SOQ"
       Call DUP_CLOB("SID",[F:SID]SIDTEX,WRET) From TRTX3TEX
       If WRET<1 Raz [F:SID]SIDTEX Endif
    Endif
Endif

# Facture de livraison : Suivi texte détail liv sur fac : Duplication
If INVORI = 3 & find (GSALTEXLIN,4,5)
#    WNUMTEX = [F:SDD]SDDTEX
#    If WNUMTEX <> ""
#        WRETOUR = 0
#        Call TEX(5,"SID1","","","",WNUMTEX,"D",WRETOUR) From TRTX3TEX
#        If WRETOUR <> 99
#            [F:SID]SIDTEX = WNUMTEX
#        Endif
#    Endif
    [F:SID]SIDTEX = [F:SDD]SDDTEX
    If left$([F:SDD]SDDTEX,3)="SDD"
       Call DUP_CLOB("SID",[F:SID]SIDTEX,WRET) From TRTX3TEX
       If WRET<1 Raz [F:SID]SIDTEX Endif
    Endif
Endif

# Facture de commande ou livraison
# --> Suivi texte sur facture  : Recherche texte article et duplication
If (INVORI = 2 | INVORI = 3) & find (GSALTEXLIN,3)
    If clalev([F:ITU]) = 0 Local File ITMBPC [ITU] : Endif
    If ([F:ITU]ITMREF <> [F:SID]ITMREF) | ([F:ITU]BPCNUM <> [F:SIV]BPCORD)
        Read [F:ITU]ITU0 = [F:SID]ITMREF;[F:SIV]BPCORD
        If fstat  Raz [F:ITU] : Endif
    Endif
    If [F:ITU]ITSTEX = ""
        If clalev([F:ITS]) = 0 Local File ITMSALES [ITS] : Endif
        If [F:ITS]ITMREF <> [F:SID]ITMREF
            Read [F:ITS]ITS0 = [F:SID]ITMREF
            If fstat  Raz [F:ITS] : Endif
        Endif
#        WNUMTEX = [F:ITS]ITSTEX
       [F:SID]SIDTEX = [F:ITS]ITSTEX
    Else
#        WNUMTEX = [F:ITU]ITSTEX
       [F:SID]SIDTEX = [F:ITU]ITSTEX
    Endif
#    If WNUMTEX <> ""
#        WRETOUR = 0
#        Call TEX(5,"SID1","","","",WNUMTEX,"D",WRETOUR) From TRTX3TEX
#        If WRETOUR <> 99
#            [F:SID]SIDTEX = WNUMTEX
#        Endif
#    Endif
Endif

Return

#------------------------------------------------------------------------------------#
#     Maj suite à la création d'une ligne facture à partir du détail commande        #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons       #
#------------------------------------------------------------------------------------#
Subprog MAJDETCDED ()

Local Decimal WQTY, WMNTCALC : # 107888 : Scheduled invoices : New fields 'To invoice' - X3-15772 (LD:20/12/16)

[F:SOQ]INVQTY    += [F:SID]QTY
[F:SOQ]INVQTYSTU += [F:SID]QTYSTU

#If [F:SOQ]INVQTY >= [F:SOQ]QTY

# La ligne n'était pas facturée
If [F:SOQ]INVFLG = 1
# Elle est soldée et tout ce qui est livré est facturé : Elle devient facturée
   If [F:SOQ]SOQSTA = 3 & [F:SOQ]INVQTY >= ([F:SOQ]DLVQTY + [F:SOQ]ODLQTY)
      [F:SOQ]INVFLG    = 2
      If [F:SDD]SOHCAT <> 4 [F:SOH]INVLINNBR += 1 : Endif
   Endif
Endif
# Mise à jour de l'entête cde si ce n'est pas une commande ouverte
If [F:SDD]SOHCAT <> 4
   [F:SOH]INVSTA = 2
   If [F:SOH]INVLINNBR >= [F:SOH]LINNBR
      [F:SOH]INVSTA = 3
   Endif
   [F:SOH]LASINVNUM = [F:SIV]NUM
   [F:SOH]LASINVDAT = [F:SIV]INVDAT

   # 107888 : Scheduled invoices : New fields 'To invoice' - X3-15772 (LD:20/12/16)
   If [F:SOH]SOHCAT <> 2
     If [F:SOH]INVSTA = 3
        #  --> La commande est facturée
        [F:SOH]INRNOT = 0
        [F:SOH]INRATI = 0
     Else
        # Décrémentation du reste à facturer
        If GDLVRTNCNO=1
            # Pas de facturation des qtés retournées
            # Le reste à facturer doit également être décrémenté de ce qui a été retourné
            WQTY= [F:SID]QTY+[F:SDD]RTNQTY
        Else
            # Facturation des qtés retournées
            WQTY= [F:SID]QTY
        Endif
        WMNTCALC  =  WQTY * [F:SOP]NETPRINOT
        Call ARRDEV (WMNTCALC, [F:SOH]CUR) From TRTDIV
        [F:SOH]INRNOT -= WMNTCALC
        WMNTCALC  =  WQTY * [F:SOP]NETPRIATI
        Call ARRDEV (WMNTCALC, [F:SOH]CUR) From TRTDIV
        [F:SOH]INRATI -= WMNTCALC
        # Cas de surlivraison et donc de surfacturation
        # Le reste à facturer ne doit pas passer en négatif ou être < reste à facturer échéancier
        If [F:SOH]INRNOT < [F:SOH]INRSCHNOT [F:SOH]INRNOT=[F:SOH]INRSCHNOT Endif
        If [F:SOH]INRATI < [F:SOH]INRSCHATI [F:SOH]INRATI=[F:SOH]INRSCHATI Endif
     Endif
   Endif
   # 107888 : Scheduled invoices : New fields 'To invoice' - X3-15772 (LD:20/12/16)

   Rewrite [SOH]
   If fstat : GOK = 0 : Call FSTA("SOH") From GLOCK : End : Endif
Endif

Rewrite [SOQ]
If fstat : GOK = 0 : Call FSTA("SOQ") From GLOCK : Endif

End


######## NEW ############
#------------------------------------------------------------------------------------#
#     Maj suite à la création d'une ligne facture pr commande à facturation directe  #
#                 du détail commande                                                 #
#                 de l'en-cours                                                      #
#                 de l'allocation                                                    #
#                 des sections analytiques
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes        #
#------------------------------------------------------------------------------------#
Subprog MAJDETCDEO (WRET,WCPE_SOQSTA)
Variable Integer WRET
Variable Integer WCPE_SOQSTA

WRET = 0
#---------------

Local Integer WRMN, STAT, WSOQSTA, WALL
Local Decimal WQTY, WALLQTY, WALLQTYSTU, WSHTQTY, WLIN, WSEQ
Local Integer WTYP, WOPT, WRET, WWIN
Local Char    WNUM, WMAJ
Local Decimal MNTCALC

If GMODU(6)=2 & clalev([F:POQ])=0 : Local File PORDERQ [POQ] : Endif

# Sauvegarde des qtés allouées et rupture pour maj des allocations
WALLQTY    = [F:SOQ]ALLQTY
WALLQTYSTU = [F:SOQ]ALLQTYSTU
WSHTQTY    = [F:SOQ]SHTQTY
WSOQSTA    = [F:SOQ]SOQSTA

# Il restait quelque chose à allouer sur la ligne
If [F:SOQ]STOMGTCOD <> 1 & [F:SOQ]QTY > [F:SOQ]ALLQTY+[F:SOQ]OPRQTY+[F:SOQ]PREQTY+[F:SOQ]INVQTY+[F:SOQ]ODLQTY
   WALL = 1
Endif

If [F:SOQ]ALLQTYSTU = 0
   [F:SOQ]SHTQTYSTU = max(0,[F:SOQ]SHTQTYSTU-[F:SID]QTYSTU)
   [F:SOQ]SHTQTY    = max(0,[F:SOQ]SHTQTY   -[F:SID]QTY)
Elsif [F:SID]QTYSTU <= [F:SOQ]ALLQTYSTU
   [F:SOQ]ALLQTYSTU -= [F:SID]QTYSTU
   [F:SOQ]ALLQTY    -= [F:SID]QTY
Else
   [F:SOQ]SHTQTYSTU = max(0,[F:SOQ]SHTQTYSTU-([F:SID]QTYSTU-[F:SOQ]ALLQTYSTU))
   [F:SOQ]SHTQTY    = max(0,[F:SOQ]SHTQTY   -([F:SID]QTY   -[F:SOQ]ALLQTY))
   [F:SOQ]ALLQTYSTU  = 0
   [F:SOQ]ALLQTY     = 0
Endif

[F:SOQ]TDLQTY     = 0
[F:SOQ]TDLQTYSTU  = 0

[F:SOQ]ODLQTY    += [F:SID]QTY
[F:SOQ]ODLQTYSTU += [F:SID]QTYSTU
[F:SOQ]UPDDAT     = date$
[F:SOQ]UPDUSR     = GUSER

# La ligne est elle soldée ?
If !find([F:SID]LINTYP,3,4,5)
    If [F:SOQ]QTY <= [F:SOQ]ODLQTY+[F:SOQ]INVQTY
       [F:SOQ]SOQSTA = 3
    Else
       WQTY = [F:SOQ]ODLQTY + [F:SOQ]INVQTY
       Call SCAL_RMN ([F:SOQ]QTY, WQTY, [F:ITM]ITMREF, WRMN, STAT) From TRTVENQTE
       If WRMN=1  [F:SOQ]SOQSTA = 3  Endif
    Endif
    If [F:SID]LINTYP=2 WCPE_SOQSTA=[F:SOQ]SOQSTA Endif
Else
    # Bug 52442 : Si composant kit, le statut de solde doit être le même que celui du composé
    [F:SOQ]SOQSTA=WCPE_SOQSTA
Endif

If [F:SOQ]SOQSTA = 3 & [F:SOQ]SHTQTY <> 0
   [F:SOQ]SHTQTY    = 0
   [F:SOQ]SHTQTYSTU = 0
Endif

# --> alim. nb lignes dans entête commande
If [F:SOQ]SOQSTA = 3
   [F:SOH]CLELINNBR += 1
Endif
If [F:SOQ]QTY <= [F:SOQ]ODLQTY + [F:SOQ]INVQTY
   [F:SOQ]INVFLG     = 2
   [F:SOH]INVLINNBR += 1
Endif
# Il restait quelque chose à allouer et ce n'est plus le cas
If [F:SOQ]STOMGTCOD <> 1 & WALL = 1 & ([F:SOQ]QTY <= [F:SOQ]ALLQTY + [F:SOQ]ODLQTY + [F:SOQ]INVQTY)
    [F:SOH]ALLLINNBR -= 1
    If [F:SOH]ALLLINNBR=0
        # La cde devient allouée
        [F:SOH]ALLSTA = 3
    Else
        # La cde devient partiellement allouée
        [F:SOH]ALLSTA = 2
    Endif
Endif

# --> sauvegarde ancienne qté commandée
WQTY = [F:SOQ]QTY

Rewrite [SOQ]
If fstat : GOK = 0 : Call FSTA("SOQ") From GLOCK : End : Endif

# Récriture du détail commande (SOP)
[F:SOP]SOQSTA = [F:SOQ]SOQSTA
Rewrite [SOP]
If fstat : GOK = 0 : Call FSTA("SOP") From GLOCK : End : Endif

# --> maj en-cours
If [F:SOQ]STOMGTCOD <> 1
   Gosub MAJENC
   If GOK<1 End : Endif
   # v6 affectations
   Gosub MAJ_MTO_SOQ From SALMTOLIB
Endif
#----------------------------------------------------#
# Maj de l'en-cde client dans les mouvements article #
#----------------------------------------------------#
#--- Bug 31537
#If [F:SOQ]STOMGTCOD <> 1
#    Call  MAJITVVEN ([F:SOQ]ITMREF, [F:SOQ]STOFCY, [F:SID]QTYSTU, "-", "S", WRET) From TRTVENMAJ
#    If GOK<=0  End : Endif
#Endif
#--------------

#-------------------------#
# Maj des allocations     #
#-------------------------#
[M:ALP]VCRTYP     = 5
[M:ALP]VCRNUM     = [F:SIV]NUM
[M:ALP]VCRLIN     = [F:SID]SIDLIN
[M:ALP]VCRSEQ     = 0
[M:ALP]STOFCY     = [F:SID]STOFCY
[M:ALP]ITMREF     = [F:SID]ITMREF
# --------------------------------------
# FGR 21/04/2015 : X3SUIVI105605 (début)
If func AFNC.ACTIV("ECC") Then
  [M:ALP]ECCVALMAJ    = [F:SID]ECCVALMAJ
Endif
# FGR 21/04/2015 : X3SUIVI105605 (fin)
# --------------------------------------
[M:ALP]TYPQTY     = 2
[M:ALP]BESDAT     = [F:SIV]INVDAT
Raz [M:ALP]ALLDAT, [M:ALP]DESQTY, [M:ALP]ALLQTY

# Avec désallocation commande origine
[M:ALP]VCRTYPORI  = 2
[M:ALP]VCRNUMORI  = [F:SID]SOHNUM
[M:ALP]VCRLINORI  = [F:SID]SOPLIN
[M:ALP]VCRSEQORI  = [F:SID]SOQSEQ
[M:ALP]ALLTYPORI  = [F:SOQ]ALLTYP

[M:ALP]QTY        = [F:SID]QTYSTU
Raz [M:ALP]MVTDES
# Mise à jour des allocations à partir de l'écran de travail STOSORW
# Avec désallocation commande origine
Call ENRSTOALL(1,1,WRET) From STKALL
If WRET<>0
   Raz GOK : End
Endif

End

#-----------------------------------------------------------------------#
#     Mise à jour de l'en-cours                                         #
#-----------------------------------------------------------------------#
$MAJENC
Local Decimal WCPLQTY
Local Char    WTRTORD

WCPLQTY = [F:SOQ]INVQTYSTU
WTRTORD = "M"
Gosub APPELWIP From TRTVENMAJ

Return

#-----------------------------------------------------------------------------#
#     Cumul mnt commande pour la maj mvt client (en-cde)                      #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes #
#-----------------------------------------------------------------------------#
Subprog ALICUMSOH(WORDBPCNOT, WORDBPCATI)
Variable Decimal WORDBPCNOT
Variable Decimal WORDBPCATI

Local Decimal MNTCALC

MNTCALC  =  [F:SID]QTY * [F:SOP]NETPRINOT
Call ARRDEV (MNTCALC, [F:SOH]CUR) From TRTDIV
WORDBPCNOT +=  MNTCALC

MNTCALC  =  [F:SID]QTY * [F:SOP]NETPRIATI
Call ARRDEV (MNTCALC, [F:SOH]CUR) From TRTDIV
WORDBPCATI +=  MNTCALC

End

#-----------------------------------------------------------------------------#
#     Mise à jour de l'entête commande                                        #
#              Utilisé par FUNAUTINVO : Facturation automatique des commandes #
#-----------------------------------------------------------------------------#
Subprog MAJSOH(WORDBPCNOT, WORDBPCATI)
Value Decimal WORDBPCNOT
Value Decimal WORDBPCATI

If GINVTYP <> 5                     : # Si facture
   [F:SOH]LASINVNUM = [F:SIV]NUM
   [F:SOH]LASINVDAT = [F:SIV]INVDAT
   [F:SOH]INVSTA    = 2
#  --> La commande est facturée
   If [F:SOH]INVLINNBR >= [F:SOH]LINNBR
      [F:SOH]INVSTA = 3
   Endif
#  --> La commande est soldée
   If [F:SOH]CLELINNBR >= [F:SOH]LINNBR
      [F:SOH]ORDSTA = 2
      [F:SOH]DLRNOT = 0
      [F:SOH]DLRATI = 0
   Else
      [F:SOH]DLRNOT -= WORDBPCNOT
      [F:SOH]DLRATI -= WORDBPCATI
   Endif
   # 107888 : Scheduled invoices : New fields 'To invoice' - X3-15765 (LD:16/12/16)
   # For direct invoice order, To invoice amounts are managed as To deliver amounts
   [F:SOH]INRNOT = [F:SOH]DLRNOT
   [F:SOH]INRATI = [F:SOH]DLRATI
   # 107888 : Scheduled invoices : New fields 'To invoice' - X3-15765 (LD:16/12/16)

   If [F:SOH]ORDSTA = 2
       [F:SOH]ALLSTA=1 : [F:SOH]ALLLINNBR=0
   Elsif [F:SOH]ALLSTA<>3
       # La cde est-elle partiellement allouée ou non allouée
       If !clalev([SOQ1]) : Local File SORDERQ [SOQ1] : Endif
       Filter [SOQ1] Where SOHNUM = [F:SOH]SOHNUM & ALLQTYSTU<>0
       Look [SOQ1]SOQ0 First
       If !fstat [F:SOH]ALLSTA=2 Else [F:SOH]ALLSTA=1 Endif
       Filter [SOQ1]
   Endif
   [F:SOH]UPDDAT = date$
   [F:SOH]UPDUSR = GUSER
Else                                : # Si proforma
   [F:SOH]PRFNUM = [F:SIV]NUM
Endif

Rewrite [SOH]
If fstat : GOK = 0 : Call FSTA("SOH") From GLOCK : Endif

End


#------------------------------------------------------------------------------#
#     Cumul mnt livraison pour la maj mvt client (livré non facturé)           #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons #
#------------------------------------------------------------------------------#
Subprog ALICUMSDH(WNIVDLV)
Variable Decimal WNIVDLV

Local Decimal MNTCALC

# Bug 46937
# Si livraisons de prêt, on facture ce qui n'est pas retourné
# Si livraisons normales et pas de facturation qté retournée (GDLVRTNCNO=1), on ne facture que ce qui n'est pas retourné
# Si livraisons normales et facturation qté retournée (GDLVRTNCNO=2), on facture tout
If [F:SDH]LND=2 | GDLVRTNCNO=1
    # Pas de création d'avoir pour le retour : Qté facturée=Qté livrée-Qté retournée
    MNTCALC  =  ([F:SDD]QTY - [F:SDD]RTNQTY) * [F:SDD]NETPRIATI
Else
    # Création d'un avoir pour le retour : Qté facturée=Qté livrée
    MNTCALC  =  [F:SDD]QTY * [F:SDD]NETPRIATI
Endif
Call ARRDEV (MNTCALC, [F:SDH]CUR) From TRTDIV
WNIVDLV +=  MNTCALC

End

#------------------------------------------------------------------------------#
#     Mise à jour de l'entête livraison                                        #
#              Utilisé par FUNAUTINVD : Facturation automatique des livraisons #
#------------------------------------------------------------------------------#
Subprog MAJLIV(WINVORN)
Value Shortint WINVORN

If GINVTYP <> 5                : # Si facture
   [F:SDH]INVFLG = 2
   [F:SDH]SIHNUM = [F:SIV]NUM
   [F:SDH]INVORN = WINVORN
   [F:SDH]UPDDAT = date$
   [F:SDH]UPDUSR = GUSER
Else                           : # Si proforma
   [F:SDH]PRFNUM = [F:SIV]NUM
Endif

Rewrite [SDH]
If fstat : GOK = 0 : Call FSTA("SDH") From GLOCK : Endif

End

#----------------------------------------------------------#
# Calcul base et montant des commissions représentants     #
#----------------------------------------------------------#
Subprog CALC_COMREP()
Local Decimal WREPBAS, WREPAMT
If clalev([F:REP]) = 0 Local File SALESREP [REP] Endif
#---- Calcul commission représentant1
If [F:SID]REP1 <> ""
   If [F:SID]REP1 <> [F:REP]REPNUM
      Read [REP]REP0=[F:SID]REP1
      If fstat Raz [F:REP] Endif
   Endif
   Case [F:REP]COMBAS
    When 1   : WREPBAS = [F:SID]NETPRINOT * [F:SID]QTY
    When 2   : WREPBAS = [F:SID]PFM * [F:SID]QTY
    When 3   : Call FORMULE_REP ([F:REP]COMFOR1,WREPBAS)
   Endcase
   Call ARRDEV (WREPBAS,[F:SIV]CUR) From TRTDIV

   WREPAMT = WREPBAS * [F:SID]REPRAT1/100 * [F:SID]REPCOE
   Call ARRDEV (WREPAMT,[F:SIV]CUR) From TRTDIV

   [F:SID]REPBAS1 = WREPBAS
   [F:SID]REPAMT1 = WREPAMT
Endif
#---- Calcul commission représentant2
Raz WREPBAS, WREPAMT
If [F:SID]REP2 <> ""
   If [F:SID]REP2 <> [F:REP]REPNUM
      Read [REP]REP0=[F:SID]REP2
   Endif
   Case [F:REP]COMBAS
    When 1   : WREPBAS = [F:SID]NETPRINOT * [F:SID]QTY
    When 2   : WREPBAS = [F:SID]PFM * [F:SID]QTY
    When 3   : Call FORMULE_REP ([F:REP]COMFOR2,WREPBAS)
   Endcase
   Call ARRDEV (WREPBAS,[F:SIV]CUR) From TRTDIV

   WREPAMT = WREPBAS * [F:SID]REPRAT2/100 * [F:SID]REPCOE
   Call ARRDEV (WREPAMT,[F:SIV]CUR) From TRTDIV

   [F:SID]REPBAS2 = WREPBAS
   [F:SID]REPAMT2 = WREPAMT
Endif

End

#------------------------------------------------------------------#
# Calcul de la base de commission d'un représentant à partir d'une #
# ligne de facture si celle ci est définie par une formule         #
#------------------------------------------------------------------#
# Entrée  WFORMULE : code formule                                  #
#         WREPBAS  : base de calcul de commission                  #
#------------------------------------------------------------------#

Subprog FORMULE_REP (WFORMULE, WREPBAS)
Value    Char    WFORMULE
Variable Decimal WREPBAS

If WFORMULE = "" End Endif

If clalev ([F:TFO]) = 0 Local File TABFOR [TFO] Endif
Read [TFO]TFO0=3;WFORMULE
If fstat End Endif
If instr(1,[F:TFO]FORFOR,"ITS]")
   If [F:ITS]ITMREF <> [F:SID]ITMREF
      Read [ITS]ITS0=[F:SID]ITMREF
      If fstat Raz [ITS] Endif
   Endif
Endif

Onerrgo ERR_FORMULE
WREPBAS = evalue([F:TFO]FORFOR)
Onerrgo
Goto FIN_FOR_REP

$ERR_FORMULE
WREPBAS = 0
Call ECR_TRACE (mess(93,192,1),1) From GESECRAN
Resume

$FIN_FOR_REP
End

#########################################################################
# Evaluation de la pièce automatique
#########################################################################
Subprog EVALAUTO(WTRANSAC,ZONE,VALEUR)
Value    Char    WTRANSAC(), ZONE()
Variable Char    VALEUR()
Local    Integer WOPEN

If !clalev([F:GAG]) Local File GAUTACEF [GAG] : WOPEN=1 Endif
VALEUR=""
Read [GAG]GAG0 = WTRANSAC;0;ZONE
If !fstat
 Local Char PROG(20)
 PROG = "WMGAU"+WTRANSAC
 Onerrgo RIEN
 Local File SINVOICEV [TB0]
 [F:TB0] = [F:SIV]
 Gosub OUVRE From = PROG
 Gosub LIENS From = PROG
 VALEUR = evalue([F:GAG]FORCLC)
 Onerrgo
Endif
If WOPEN=1 Close Local File [GAG] Endif
End

$RIEN
Resume

#########################################################################
## CPTE_NATURE : S/P de recherche du compte et de la nature analytique  #
## -------------------------------------------------------------------- #
## Subprog CPTE_NATURE (WTRANSAC,COMPTE,NATURE)                         #
##   WTRANSAC : Pièce automatique                                       #
##   COMPTE   : Compte                                                  #
#########################################################################
#Subprog CPTE_NATURE (WTRANSAC,COMPTE,NATURE)
#Value    Char     WTRANSAC
#Variable Char     COMPTE
#Variable Char     NATURE
#Local    Char     ID1(20)(1..1), ID2(20)(1..2), CODPIECE(5)
#Local    Shortint I, SNS, LIG, SAVNOLIGN : SAVNOLIGN=nolign
#Local    Integer  STA
#Local File SINVOICEV [TB0], SINVOICED [TB1]

#[F:TB0] = [F:SIV]
#[F:TB1] = [F:SID]

#[F:TB1]NUM = [F:TB0]NUM
#ID1(1) = [F:TB0]NUM
#ID2(1) = [F:TB0]NUM

#CODPIECE = WTRANSAC
##----- Lecture de la pièce automatique -----#
#If clalev([F:GAU])<=0 Local File GAUTACE   [GAU] : Endif
#Read [GAU] GAU0=CODPIECE : If fstat Raz [F:GAU] : CODPIECE="SIHI" : Endif
##----- Recherche du numéro de ligne de la pièce auto -----#
#Onerrgo SANSRIEN
#If clalev([F:GAD])<=0 Local File GAUTACED  [GAD] : Endif
#Filter [GAD] Where COD=CODPIECE & LINNUM>0
#For [GAD]
#  If instr(1,vireblc([F:GAD]ACCKEY(0),4),"ITMREF") |
#&    ([F:GAD]LIKTBL(0)="ITMMASTER" & [F:GAD]LIKFLD(0)="ITMREF")
#    If [F:GAD]FORCND<>""
#      STA=evalue([F:GAD]FORCND)
#      If STA
#        LIG=[F:GAD]LINNUM : Break
#      Endif
#    Else
#      LIG=[F:GAD]LINNUM : Break
#    Endif
#  Endif
#Next
#Filter [GAD]
#If LIG=0 : LIG=2 : Endif
#Onerrgo

##----- Recherche compte et nature à l'aide de la pièce auto -----#
#Call COMPTE(CODPIECE,LIG,ID1,ID2,COMPTE,NATURE,STA) From CPTCOD
#Close Local File [TB0], [TB1]
#If STA Raz COMPTE,NATURE : Endif
#nolign=SAVNOLIGN
#End
#########################################################################
## INIT_ACC : S/P de recherche des comptes                              #
## -------------------------------------------------------------------- #
## Subprog INIT_ACC (WTRANSAC,WABREV, WNOL, TPLAN,TACC)                 #
##   WTRANSAC : Pièce automatique                                       #
##   WABREV   : Origine :                                               #
##              "SID" = Ligne détail facture, "SIHV" = Elt facturation  #
##   WNOL     : N° d'indice                                             #
##              "SID"=0, "SIHV"=Indice de l'élt ds le tableau           #
##   TPLAN    : Tableau des codes plans                                 #
##   TACC     : Tableau des comptes                                     #
#########################################################################
## Pour les lignes de factures,                                         #
## - Appelé depuis $VALLIG de SUBSIHA                                   #
## -        depuis $TRT_DETAIL  de FUNAUTINVD FUNAUTINVO                #
## Pour les éléments de facturation,                                    #
## - Appelé par CREMOD_DIE_FOOT de SUBSIHV                              #
## -        depuis $FIN_FACTURE de SUBSIHA                              #
## -        depuis $FIN_FACTURE de FUNAUTINVD FUNAUTINVO                #
#########################################################################
Subprog INIT_ACC (WTRANSAC,WABREV, WNOL, TPLAN, TACC)
Value    Char     WTRANSAC
Value    Char     WABREV
Value    Integer  WNOL
Variable Char     TPLAN()(1..)
Variable Char     TACC()(1..)

Local    Char     ID1(20)(1..1), ID2(20)(1..3), CODPIECE(GLONGAU)
Local    Shortint I, J, LIG, SAVNOLIGN : SAVNOLIGN=nolign
Local    Integer  STA
Local    Char     WMESSAGE(80)
Local    Char     TCOMPTE(GLONGAC)(1..10)
Local    Char     ACCKEY, LIKTBL

Local    Shortint SAVNOLIGN : SAVNOLIGN=nolign : nolign=WNOL+1

Local File SINVOICEV [TB0], CPTANALIN [TB2]
#----- Chargement pseudo fichier lignes comptables SINVOICEV [TB0]
[F:TB0] = [F:SIV]

If WABREV="SID"
    Local File SINVOICED [TB1]
    #----- Chargement pseudo fichier lignes comptables SINVOICED [TB1]
    [F:TB1] = [F:SID]
    #----- Chargement pseudo fichier lignes comptables CPTANALIN [TB2]
    Raz [F:TB2]
    [F:TB2]ABRFIC="SID"
    [F:TB2]VCRNUM=[F:SID]NUM
    [F:TB2]VCRLIN=[F:SID]SIDLIN
    [F:TB2]ANALIG=1
Else
    Local File SVCRFOOT  [TB1]
    #----- Chargement pseudo fichier lignes comptables SVCRFOOT  [TB1]
    [F:TB1] = [M:SIH0] : [F:TB1]=[M:SIH1] : [F:TB1]=[M:SIH2] : [F:TB1]=[M:SIHV]
    [F:TB1]VCRNUM=[M:SIH0]NUM
    [F:TB1]VCRTYP=4
    [F:TB1]DTA   =[M:SIHV]XFNUM(WNOL)
    [F:TB1]DTAAMT=[M:SIHV]XFDTAAMT(WNOL)
    [F:TB1]DTATYP=[M:SIHV]CLCBAS(WNOL)
    [F:TB1]DTANOT=[M:SIHV]XFNOT(WNOL)
    For I=0 To dim([F:TB1]DTANET)-1
        [F:TB1]DTAVATNOT(I) = evalue ("[M:SIHV]DTANOT"+format$("N0:2",I+1)+"("+num$(WNOL)+")")
        [F:TB1]DTANET(I)    = evalue ("[M:SIHV]DTANET"+format$("N0:2",I+1)+"("+num$(WNOL)+")")
        [F:TB1]DTAVAT(I)    = evalue ("[M:SIHV]DTAVAT"+format$("N0:2",I+1)+"("+num$(WNOL)+")")
        [F:TB1]DTAVATRAT(I) = evalue ("[M:SIHV]DTAVATRT"+format$("N0:2",I+1)+"("+num$(WNOL)+")")
        [F:TB1]DTAVATAMT(I) = evalue ("[M:SIHV]DTAVATMT"+format$("N0:2",I+1)+"("+num$(WNOL)+")")
    Next
    [F:TB1]CLCORD=[M:SIHV]CLCORD(WNOL)
    [F:TB1]AMTCOD=[M:SIHV]AMTCOD(WNOL)
    [F:TB1]DTADSP=[M:SIHV]DSP(WNOL)
    #----- Chargement pseudo fichier lignes comptables CPTANALIN [TB2]
    Raz [F:TB2]
    [F:TB2]ABRFIC="SVF"
    [F:TB2]VCRTYP=4
    [F:TB2]VCRNUM=[F:SIV]NUM
    [F:TB2]VCRLIN=0
    [F:TB2]VCRSEQ=[M:SIHV]XFNUM(WNOL)
    [F:TB2]ANALIG=1
Endif
For I=1 To max(GNBCOA,2)
  J=GTYPLED(I)
  If J
    [F:TB2]LED(J-1)=GLEDSOC(I)
    [F:TB2]COA(J-1)=GCOA(I)
#    [F:TB2]ACC(J-1)=TACC(I)
  Endif
Next I

For I=1 To max(GNBDIE,GOPTCANA)
  [F:TB2]DIE(I-1)=GDIE(I)
  If WABREV="SID"
    If evalue("dim([M:SIH4]CCE"+num$(I)+")")>0
        [F:TB2]CCE(I-1)=evalue("[M:SIH4]CCE"+num$(I)+"(nolign-1)")
    Endif
  Else
    If evalue("dim([M:SIHV]SFICCE"+num$(I)+")")>0
        [F:TB2]CCE(I-1)=evalue("[M:SIHV]SFICCE"+num$(I)+"(nolign-1)")
    Endif
  Endif
Next I

ID1(1) = [F:TB0]NUM
ID2(1) = [F:TB0]NUM
If WABREV="SID"
    [F:TB1]NUM = [F:TB0]NUM
    ID2(2) = num$([F:TB1]SIDLIN)
    ACCKEY = "ITMREF"
    LIKTBL = "ITMMASTER"
Else
    [F:TB1]VCRNUM = [F:TB0]NUM
    ID2(2) ="4"
    ID2(3) = num$([F:TB1]DTA)
    ACCKEY = "DTA"
    LIKTBL = "SVCRFOOT"
Endif
#----- Lecture de la pièce automatique -----#
CODPIECE = WTRANSAC
If clalev([F:GAU])<=0 Local File GAUTACE   [GAU] : Endif
Read [GAU] GAU0=CODPIECE : If fstat Raz [F:GAU] : CODPIECE="SIHI" : Endif
#----- Recherche du numéro de ligne de la pièce auto -----#
Onerrgo SANSRIEN
If clalev([F:GAD])<=0 Local File GAUTACED  [GAD] : Endif
Filter [GAD] Where COD=CODPIECE & LINNUM>0
For [GAD]
  If instr(1,vireblc([F:GAD]ACCKEY(0),4),ACCKEY) |
&    ([F:GAD]LIKTBL(0)=LIKTBL & [F:GAD]LIKFLD(0)=ACCKEY)
# 96332 : Pb lors de l'évaluation de la condition si elle est sur plusieurs lignes
#    If [F:GAD]FORCND<>"" & WABREV="SID"
#      STA=evalue([F:GAD]FORCND)
#      If STA
#        LIG=[F:GAD]LINNUM : Break
#      Endif
#    Else
#      LIG=[F:GAD]LINNUM : Break
#    Endif
    STA=1
    For I=0 To dim([F:GAD]FORCND)-1
      If [F:GAD]FORCND(I)<>"" & WABREV="SID"
        STA=evalue([F:GAD]FORCND(I))
        # Une des lignes de la condition n'est pas respectée, il faut rechercher la ligne suivante de la pièce auto
        If !STA : Break : Endif
      Else
        # Il n'y a pas de condition, on garde cette ligne de la pièce auto
        LIG=[F:GAD]LINNUM : Break
      Endif
    Next
    If STA
      # Ttes les lignes de la condition sont respectées ou pas de condition, on garde cette ligne de la pièce auto
      LIG=[F:GAD]LINNUM : Break
    Endif
# 96332
  Endif
Next
Filter [GAD]
# 6.2 : Dde 64849
If LIG=0 & WABREV="SID"
  Look [GAD] GAD0=CODPIECE;2
  If !fstat  LIG=2  Else  LIG=20 : Endif
Endif
If LIG=0 & WABREV="SIHV"
  Look [GAD] GAD0=CODPIECE;6
  If !fstat  LIG=6  Else  LIG=60 : Endif
Endif
Onerrgo
#----- Recherche des comptes à l'aide de la pièce auto -----#
Call COMPTE(CODPIECE,LIG,ID1,ID2,TPLAN,TCOMPTE,STA,WMESSAGE) From CPTCOD
If STA
    Raz TPLAN, TCOMPTE
#    Infbox "STA="-num$(STA)-WMESSAGE
    Raz GMESSAGE
Else
  If [F:GAD]COD<>CODPIECE | [F:GAD]LINNUM<>LIG
    Read [GAD] GAD0=CODPIECE;LIG : If fstat  Raz [F:GAD] : Endif
  Endif
  For I=1 To 10
    If TPLAN(I)<>""
#      J=find(TPLAN(I),GCOA(1..GNBCOA))
      J=find([F:GAD]LEDTYP(I-1), GTYPLED(1..GNBTYPLED))
      If J
        TACC(J)=TCOMPTE(I)
#        If GUSER="LD" Infbox "TPLAN(I)="-num$(I)-TPLAN(I)-"TACC(J)="-num$(J)-TACC(J) Endif
      Endif
    Endif
  Next I
Endif

Close Local File [TB0], [TB1], [TB2]
nolign=SAVNOLIGN
End

$SANSRIEN
STA=0
Resume

#----------------------------------------------------------------------------#
# Pour l'Allemagne : Etiquette exploitée dans les pièces automatiques        #
# de génération de facture (SIHI), dans l'action                             #
# 'Après création des lignes' de la ligne de pièces auto correspondant au HT #
#----------------------------------------------------------------------------#
$INITAX
If dim([F:TB1]VAT)>1 & dim([M:HAE2]TAX2)>NOL
  [M:HAE2]TAX2(NOL) = [F:TB1]VAT(1) : # Code taxe parafiscale
Endif
If dim([F:TB1]VAT)>2 & dim([M:HAE2]TAX3)>NOL
  [M:HAE2]TAX3(NOL) = [F:TB1]VAT(2) : # Code taxe spéciale
Endif
Return

######################################################################
#------------------------------------------------------------------#
# Recherche l'unité d'oeuvre associée à un compte                  #
#------------------------------------------------------------------#
# Entrée   WPLAN   : Code plan                                     #
#          WACC    : Compte                                        #
# Sortie   WUOM    : Unité oeuvre                                  #
#------------------------------------------------------------------#
Subprog RECUOMACC (WPLAN, WACC,WUOM,STAT)
Value    Char WPLAN
Value    Char WACC
Variable Char WUOM
Variable Integer STAT

Raz WUOM
If clalev([F:GAC])=0 : Local File GACCOUNT [GAC] : Endif

If [F:GAC]COA<>WPLAN | [F:GAC]ACC<>WACC
    Read [GAC]GAC0 = WPLAN;WACC
    If fstat Raz [F:GAC] : Endif
Endif
WUOM=[F:GAC]UOM

End
######################################################################
#------------------------------------------------------------------#
# Recherche  l'unité d'oeuvre associée à un compte                 #
# puis calcule la qté en unité d'oeuvre                            #
#------------------------------------------------------------------#
# Entrée   WPLAN   : Code plan                                     #
#          WCNA    : Compte                                        #
#          WSTU    : Unité de stock                                #
#          WQTYSTU : Quantité en unité de stock                    #
# Sortie   WUOM    : Unité oeuvre                                  #
#          WQTYUOM : Quantité en unité d'oeuvre                    #
#------------------------------------------------------------------#
Subprog RECUOMQTY (WPLAN, WACC,WSTU,WQTYSTU,WUOM,WQTYUOM,STAT)
Value    Char    WPLAN
Value    Char    WACC
Value    Char    WSTU
Value    Decimal WQTYSTU
Variable Char    WUOM
Variable Decimal WQTYUOM
Variable Integer STAT

Local Decimal WCOEF
Raz WUOM
If clalev([F:GAC])=0 : Local File GACCOUNT [GAC] : Endif
If clalev([F:TCO])=0 : Local File TABCOEFF [TCO] : Endif

# Recherche de l'unité d'oeuvre associée au compte
If [F:GAC]COA<>WPLAN | [F:GAC]ACC<>WACC
    Read [GAC]GAC0 = WPLAN;WACC
    If fstat Raz [F:GAC] : Endif
Endif
WUOM=[F:GAC]UOM
If WUOM="" Raz WUOM, WQTYUOM : End : Endif             : # Si pas d'unité d'oeuvre, on met du blanc

If WUOM=WSTU WQTYUOM=WQTYSTU : End : Endif
# Recherche du coef conversion Unité de stock-Unité d'oeuvre
If [F:TCO]UOM1<>WSTU | [F:TCO]UOM2<>WUOM
    Read [TCO]TCO0=WSTU;WUOM
    If fstat
        Read [TCO]TCO0=WUOM;WSTU
        If !fstat WCOEF = 1/[F:TCO]COEUOM Endif
    Else
        WCOEF = [F:TCO]COEUOM
    Endif
Else
    WCOEF = [F:TCO]COEUOM
Endif
If WCOEF=0 WQTYUOM=WQTYSTU : WUOM=WSTU : End : Endif    : # Si pas de conversion possible : UOM=STU

If WCOEF=1 | WQTYSTU=0
    WQTYUOM=WQTYSTU
Else
    WQTYUOM=WQTYSTU*WCOEF
    If WUOM<>"" Call QTEARR(WQTYUOM, WUOM) From TRTDIV Endif
Endif

End

#########################################################################
# Contrôle de la chronologie des no factures
#########################################################################
# FGR 22/01/2014 : X3SUIVI105648 (début)
$CTRL_CHRONOLOGIE
  Call CONTROL_CHRONOLOGIE
Return

# ------------------------------------------------------------------------
Subprog CONTROL_CHRONOLOGIE
Local Integer SEQ
Local Integer STAT
Local Integer I
Local Integer DEPL
Local Char NUMFAC(GLONVCR)
Local Char CHAINE(GLONVCR)
Local Integer NOSUBANM

  # FGR 22/01/2014 : X3SUIVI105648 : Problème de performance surtout lorsque le numéro de séquence est élevé, et qu'il n'existe pas de valeur précédente
  Local File SINVOICE [SIHB]
  Local File ACODNUM  [ANM]
  Local File AVALNUM  [AVN]
  NUMFAC = [F:SIH]NUM
  NOSUBANM = 1
  Repeat
    If NOSUBANM = 1 Then
      Call NUMERO_PREC(GCPT,[F:SIV]SALFCY,[F:SIV]INVDAT,[F:SIH]JOU,NUMFAC,SEQ,STAT) From SUBANM
      If STAT <> 0 Then
        GMESSAGE = mess(60,199,1) - "(" + GCPT - NUMFAC + ") :"
        Gosub MESSAGE From SUBANM
        GMESSAGE -= MESSA
        Call ECR_TRACE(GMESSAGE,1) From GESECRAN
        GOK = 0
        Break
      Endif
    Else
      NOSUBANM = 1
    Endif
    If SEQ >= 1 Then
      Read [SIHB]SIH0=NUMFAC
      If !fstat Then
        # ------------------------------------------------------------
        If [F:SIHB]ACCDAT > [F:SIH]ACCDAT Then
          GOK = 0
          Call ECR_TRACE(mess(101,121,1),1) From GESECRAN
        Endif
        SEQ = 0
      Else
        # ------------------------------------------------------------
        # Si la facture n'existe pas on va chercher par rapport à la racine le premier numéro qui existe pour partir de lui dans la recherche
        DEPL = 1
        I = 0
        While ([F:ANM]POSTYP(I) <> 8) & (I <= [F:ANM]NBPOS-1)
          DEPL += [F:ANM]POSLNG(I)
          I += 1
        Wend
        CHAINE = left$(NUMFAC, DEPL-1)
        Filter [SIHB] Where [F:SIHB]NUM < NUMFAC and left$([F:SIHB]NUM, len(CHAINE)) = CHAINE
        Read [SIHB]SIH0 Last
        If fstat Then
          # s'il n'y en a pas pas la peine de continuer on sort
          SEQ = 0
        Else
          NUMFAC = [F:SIHB]NUM
          NOSUBANM = 0
        Endif
        Filter [SIHB]
        # ------------------------------------------------------------
      Endif
    Endif
  Until SEQ <= 1
End

#$CTRL_CHRONOLOGIE
#
#Local Integer SEQ, STAT
#Local Char    NUMFAC(GLONVCR) : NUMFAC=[F:SIH]NUM
#If clalev([F:SIHB])=0 Local File SINVOICE [SIHB] Endif
#Repeat
# Call NUMERO_PREC(GCPT,[F:SIV]SALFCY,[F:SIV]INVDAT,[F:SIH]JOU,NUMFAC,SEQ,STAT) From SUBANM
# If STAT<>0
#    Call ECR_TRACE(GCPT-NUMFAC-mess(60,199,1),1) From GESECRAN : GOK=0 : Break
# Endif
# If SEQ>=1
#    Read [SIHB] SIH0=NUMFAC
#    If !fstat
#       If [F:SIHB]ACCDAT>[F:SIH]ACCDAT
#          GOK=0 : Call ECR_TRACE(mess(101,121,1),1) From GESECRAN
#       Endif
#       SEQ=0
#    Endif
# Endif
#Until SEQ<=1
#Close Local File [SIHB]
#Return
# FGR 22/01/2014 : X3SUIVI105648 (fin)

#########################################################################
# Contrôle sur le type de pièce
#########################################################################
$CONTROLE_GTE
# Type de pièce inexistant
If [F:GTE]TYP=""
   GOK=0 : Call ECR_TRACE(WIDENT-mess(17,114,1),1) From GESECRAN : Return
Endif
# 71937 : Multilégislation
Call CONTGTE(WIDENT,GCURLEG,[F:SIH]FCY) From SUBGTE
If mkstat
  Raz mkstat : GOK=0 : Call ECR_TRACE(mess(2,107,1)-WIDENT-GMESSAGE,1) From GESECRAN : Return
Endif
# 71937
# Type de pièce inactive
If [F:GTE]ENAFLG<>2
   GOK=0 : Call ECR_TRACE(WIDENT-mess(274,199,1),1) From GESECRAN : Return
Endif
# Type de pièce non réel
If [F:GTE]VCRREA<>2
   GOK=0 : Call ECR_TRACE(WIDENT-mess(59,119,1),1) From GESECRAN : Return
Endif
# Vous n'avez pas les droits d'exécution
If [F:GTE]ACS<>""
   Call CONTEXE([F:GTE]ACS) From CPTSUB
   If mkstat
      GOK=0 : Call ECR_TRACE([F:GTE]ACS-GMESSAGE,1) From GESECRAN : Raz GMESSAGE : Return
   Endif
Endif
# Contrôle date comptable par rapport aux dates bornes du type de pièce
If WIDENT<>[F:SIH]GTE
   Call CTLVLYDAT([F:SIH]ACCDAT,[F:GTE]VLYSTR,[F:GTE]VLYEND) From CPTSUB
   If mkstat
      GOK=0 : Call ECR_TRACE([F:GTE]TYP-GMESSAGE,1) From GESECRAN : Raz GMESSAGE : Return
   Endif
Endif
Return

#########################################################################
# Contrôle sur le code journal
#########################################################################
$CONTROLE_JOU
# 71937 : Multilégislation
Call CONTJOU(WJOURNAL,GCURLEG,[F:SIH]FCY) From SUBJOU
If mkstat
  Raz mkstat : GOK=0 : Call ECR_TRACE(mess(13,105,1)-WIDENT-GMESSAGE,1) From GESECRAN : Return
Endif
# 71937
# Journal inactif
If [F:JOU]ENAFLG<>2
   GOK=0 : Call ECR_TRACE(WJOURNAL-mess(281,199,1),1) From GESECRAN : Return
Endif
# Vous n'avez pas les droits d'exécution
If [F:JOU]ACS<>""
   Call CONTEXE([F:JOU]ACS) From CPTSUB
   If mkstat
      GOK=0 : Call ECR_TRACE([F:JOU]ACS-GMESSAGE,1) From GESECRAN : Raz GMESSAGE : Return
   Endif
Endif
# Contrôle journal sur société-site
If [F:JOU]FCY<>""
   Call VERSOC([F:JOU]FCY,[F:SIH]CPY,GFINRSP,[F:JOU]JOU) From CFYSUB
   If mkstat
      GOK=0 : GMESSAGE=mess(13,105,1)-GMESSAGE : Call ECR_TRACE(GMESSAGE,1) From GESECRAN : Raz GMESSAGE : Return
   Endif
Endif
# Contrôle si journal autorisé sur le type de pièce
If [F:GTE]AUZJOU([F:JOU]TYP-1)<>2
   GOK=0 : Call ECR_TRACE([F:JOU]JOU-mess(8,106,1)-[F:GTE]TYP,1) From GESECRAN
Endif
Return

# ----------------------------------------------------------- #
#                 Localisation argentine                      #
# Recherche du type de document lié aux factures              #
# Pour la numérotation spécifique                             #
# ----------------------------------------------------------- #
$REC_ARGNUM_TYPDOC

Global Char     GARGFACTYP     : # Type de document facture
Raz GARGFACTYP
Local Integer WA_I, WA_GFACTYP
WA_GFACTYP=GFACTYP : If WA_GFACTYP=4  WA_GFACTYP=1 Endif
# Dans la table diverse des types de document, recherche du type lié à la catégorie 1(facture),2(avoir)
If !clalev([F:ADI])  Local File ATABDIV [ADI]   Endif
Filter [ADI] Where NUMTAB = 362
For [ADI]CODE
    WA_I= instr(1,[F:ADI]A1,num$(WA_GFACTYP))
    If WA_I GARGFACTYP= [F:ADI]CODE : Break : Endif
Next
Filter [ADI]
If GARGFACTYP=""
    ## Pour la numérotation, aucun type de document n'est défini pour les factures/avoirs
    GERR=1 : GMESSAGE = mess(18,8890,1)
    If WA_GFACTYP=1 GMESSAGE -= mess(20,8890,1) Else GMESSAGE -= mess(21,8890,1) Endif
    Return
Endif
Return

#########################################################################
#             Initialisation du champ EECFLOPHY                         #
#               (CPO pour la DEB - 31/07/2008)                          #
# --- En picking de cde, livraison, facture, retour ---                 #
# ---     En traitement automatique des factures    ---                 #
#########################################################################
Funprog INIT_EECFLOPHY(PEECGES, PSTOMVTFLG)

Value Integer PEECGES
Value Integer PSTOMVTFLG
Local Integer VALEURFLAG

# --- Si article non soumis à la DEB => EECFLOPHY = Non
If PEECGES = 2
  VALEURFLAG = PSTOMVTFLG
Else
  VALEURFLAG = 1
Endif

End VALEURFLAG

#########################################################################

